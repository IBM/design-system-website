/* eslint-disable */
 module.exports = {
  "0": {
    "parent": "add-ons",
    "child": "overview",
    "section": "overview",
    "content": "**_Add-ons_ are components built specifically for IBM Cloud products and experiences. Carbon supports two main libraries, [Vanilla.js](https://github.com/carbon-design-system/carbon-components) and [React](https://github.com/carbon-design-system/carbon-components-react). There is also an unofficial [Angular library](https://pages.github.ibm.com/adaniel/angular-carbon-components/) for Carbon Components that is managed by an external team.**\n\n## Carbon support\n\nThe table below shows the Carbon team's level of support for the Core library vs. the Add-ons repo.\n\n|                           | Core library | Add-ons |\n| ------------------------- | ------------ | ------- |\n| General design questions  | ![available](images/checkmark--glyph.svg)          | ![available](images/checkmark--glyph.svg)      |\n| Design feedback & support | ![available](images/checkmark--glyph.svg)           |         |\n| Troubleshooting           | ![available](images/checkmark--glyph.svg)           | ![available](images/checkmark--glyph.svg)     |\n| Bug fixes                 | ![available](images/checkmark--glyph.svg)           |         |\n\n## Contributing to Add-ons\n\nAdd-ons are generally easier to contribute to because they are not fully managed by the Carbon team. Below are the items that you need to pass in order for your contribution to be accepted. You can read our full contribution process for [design](/getting-started/contributing) and [code](https://github.com/carbon-design-system/carbon-components/blob/master/docs/contributing.md) to learn more.\n\n|               |                                                     | Core library | Add-ons |\n| ------------- | --------------------------------------------------- | ------------ | ------- |\n| Accessibility | WCAG AA                                             | ![available](images/checkmark--glyph.svg)           | ![available](images/checkmark--glyph.svg)      |\n|               | Keyboard tabbing                                    | ![available](images/checkmark--glyph.svg)           | ![available](images/checkmark--glyph.svg)      |\n|               | Carbon custom focus states                          | ![available](images/checkmark--glyph.svg)           |         |\n| Visual + UX   | Carbon themed                                       | ![available](images/checkmark--glyph.svg)           |         |\n|               | Universal pattern <br>(fits for 2-3 use cases)      | ![available](images/checkmark--glyph.svg)           |         |\n|               | Interaction states (hover, active, focus, disabled) | ![available](images/checkmark--glyph.svg)           | ![available](images/checkmark--glyph.svg)     |\n\n## Add-on repos\n\nThere are a number of growing add-on repos that can be found under the [Carbon org](https://github.com/carbon-design-system). If you'd like to create an add-on repo, contact a member of the Carbon team.\n\n<!--\n* [carbon-add-ons-bluemix](https://github.com/carbon-design-system/carbon-addons-bluemix): For Vanilla.js Add-on components shipped specifically for IBM Bluemix/IBM Cloud Platform.\n* [carbon-add-ons-bluemix-react](https://github.com/carbon-design-system/carbon-addons-bluemix-react): For React Add-on components shipped specifically for IBM Bluemix.\n* [carbon-add-ons-cloud](https://github.com/carbon-design-system/carbon-addons-cloud)\n* [carbon-add-ons-gridpanel-react](https://github.com/carbon-design-system/carbon-addons-gridpanel-react) -->\n"
  },
  "1": {
    "parent": "components",
    "child": "accordion",
    "section": "code",
    "content": "---\ndesc: <span>Accordion</span> enables users to expand and collapse sections of content.\ncodepen: dZvdaN\n---\n"
  },
  "2": {
    "parent": "components",
    "child": "accordion",
    "section": "style",
    "content": "## Color\n\n| Attribute         | SCSS       | HEX        |\n|----------------|------------|------------|\n| Label          | $text-01   |  #152935   |\n| Body           | $text-01   |  #152935   |\n| Chevron        | $ui-05     |  #5a6872   |\n| Chevron:hover  | $hover-secondary  |  #3d70b2   |\n| Divider line   | $ui-04     |  #8897a2   |\n\n## Typography\n\nAll Accordion labels are set in sentence case and should not exceed three words. Set body text appropriately based on content.\n\n| Property   | Font-size (px/rem)     | Font-weight  |\n|------------|-----------------|--------------|\n| Label      | 16 / 1     | Normal / 400 |\n| Body       | 14 / 0.875 | Normal / 400 |\n\n## Structure\n\nThere is no limit to the height of an open row, however, the padding specs below should be followed. The width of an Accordion varies based on the content, layout, and page design. The chevron icon can be found on the [iconography](/style/iconography/library) library page.\n\n| Height       | px | rem   |\n|--------------|----|-------|\n| Row          | 40 | 2.5   |\n| Chevron      | 10 | 0.635 |\n| Divider line | 1  | -     |\n\n### Spacing\n\nAvoid having any text within 16px / 1rem of the Accordion's sides. Additionally, include padding between labels, body copy, and separation lines to provide breathing room between elements.\n\n| Spacing              | px | rem |\n|----------------------|----|-----|\n| Chevron & label      | 16 | 1   |\n| Content & right edge | 8  | 0.5 |\n| Label & content      | 16 | 1   |\n| Content & line       | 24 | 1.5 |\n\n![Structure and spacing measurements for Accordion](images/accordion-style-1.png)\n_Structure and spacing measurements for Accordion | px / rem_\n"
  },
  "3": {
    "parent": "components",
    "child": "accordion",
    "section": "usage",
    "content": "## General guidelines\n\nAccordions are best used when users need to consume specific areas of content within a page or when vertical space is limited.\n\nUse Accordions when there is enough content to condense. Avoid nested Accordions because it increases the cognitive load for users.\n\nUsers may have multiple Accordions open at the same time. The entire header area is clickable to expand or collapse the content below.\n\n![accordion example](images/accordion-usage-1.png)\n"
  },
  "4": {
    "parent": "components",
    "child": "breadcrumb",
    "section": "code",
    "content": "---\ndesc: <span>Breadcrumb</span> enables users to quickly see their location within a path of navigation and move up to a parent level if desired.\ncodepen: eevVxq\n---\n"
  },
  "5": {
    "parent": "components",
    "child": "breadcrumb",
    "section": "style",
    "content": "## Color\n\n| Attribute      | SCSS      | HEX      |\n|----------  |----------|-----------|\n| Title      | $brand-01| #3d70b2   |\n| Slash      | $text-02 | #5a6872  |\n| Overflow text  | $text-01  | #152934   |\n| Row:hover | $hover-row | #5596e6 at 10% opacity |\n| Breadcrumb:hover  | $hover-primary-text | #294c86   |\n\n## Typography\n\nWhen a user hovers overs a Breadcrumb, the Breadcrumb title should be underlined.\n\n| Property | Font-size    | Font-weight  |\n|------------|-----------------|--------------|\n| Title      | 14 / 0.875 | Roman / 400  |\n| Dropdown text | 14 / 0.875 | Roman / 400  |\n\n![Breadcrumb typography treatment example](images/breadcrumb-style-1.png)\n_Breadcrumb typography treatment example_\n\n## Structure\n\nThe on-click dropdown should follow the [Overflow Menu](/components/overflow-menu) specs for sizing, padding, and interaction.\n\n| Spacing         | px | rem |\n|-----------------|----|-----|\n| Title & slash   | 16 | 1   |\n| Icon & dropdown | 8  | 0.5 |\n\n![Truncated breadcrumb dropdown example](images/breadcrumb-style-2.png)\n_Structure and spacing measurements for Breadcrumb | px / rem_\n"
  },
  "6": {
    "parent": "components",
    "child": "breadcrumb",
    "section": "usage",
    "content": "## Usage\n\nBreadcrumbs enable users to quickly see their location within a path of navigation and move up to a parent level if desired. Each tier of the Breadcrumb should be clickable.\n\n## Best practices\n\n* Breadcrumbs should not replace primary navigation.\n* You can have one Breadcrumb to show that the user is one-level deep.\n* In this case, the clicking the single, stand-alone Breadcrumb would act as a Back button to lead the user to the previous screen.\n* Place Breadcrumbs near the top of the page.\n* Show hierarchy, not history.\n* Keep Breadcrumb titles short but descriptive.\n* Do not use a Breadcrumb if you are taking users through a multi-step process (use a [Progress Indicator](/components/progress-indicator) for this.)\n\n## Multiple tiers\n\nIf there are more than three levels, the home level and the last two levels are visible, with all middle levels being collapsed into ellipses and accessible from a dropdown. For styling of the Dropdown, refer to the [Overflow Menu](/components/overflow-menu).\n\n![multiple tiers of breadcrumb](images/breadcrumb-usage-1.png)\n"
  },
  "7": {
    "parent": "components",
    "child": "button",
    "section": "code",
    "content": "---\ndesc: <span>Buttons</span> express what action will occur when the user clicks or touches it. Buttons are used to initialize an action, either in the background or foreground of an experience.\nvariations:\n  button--primary:\n  - Primary button\n  button--secondary:\n  - Secondary button\n  button--tertiary:\n  - Tertiary button\n  button--ghost:\n  - Ghost button\n  button--danger:\n  - Danger button\n  button--danger--primary:\n  - Primary danger button\n  button--primary--small:\n  - Small primary button\n  button--secondary--small:\n  - Small secondary button\n  button--tertiary--small:\n  - Small tertiary button\n  button--ghost--small:\n  - Small ghost button\n  button--danger--primary--small:\n  - Small primary danger button\n  button--danger--small:\n  - Small danger button\ncodepen:\n  button--primary:\n  - QMaZmK\n  button--secondary:\n  - WdwJKG\n  button--tertiary:\n  - WJqbvX\n  button--ghost:\n  - ppyVOw\n  button--danger:\n  - EoKLeR\n  button--danger--primary:\n  - bKVgOK\n  button--primary--small:\n  - zjVxoX\n  button--secondary--small:\n  - MGMYoZ\n  button--tertiary--small:\n  - JvQoyo\n  button--ghost--small:\n  - vjqEey\n  button--danger--primary--small:\n  - KedaJb\n  button--danger--small:\n  - xjobPx\n---\n"
  },
  "8": {
    "parent": "components",
    "child": "button",
    "section": "style",
    "content": "## Color\n\n| Attribute            | SCSS                   | HEX                |\n|------------------|------------------------|------------------------|\n| Normal           | $brand-01              | #3d70b2                |\n| Danger           | $support-01            | #e0182d                |\n| Primary:hover    | $hover-primary         | #30588c                |\n| Secondary:hover  | $hover-secondary       | #3d70b2                |\n| Tertiary:hover   | $ui-05                 | #5a6872                |\n| Danger:hover     | $support-01            | #e0182d                |\n| Disabled         | $brand-01              | #3d70b2 at 50% opacity |\n\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Example of a normal Primary Button](images/button-style-1.png)\n  </div>\n  <div>\n    ![Example of a Primary Button on hover](images/button-style-2.png)\n  </div>\n  <div>\n    ![Example of a disabled Primary Button](images/button-style-3.png)\n  </div>\n  <div>\n    ![Example of a normal Secondary Button](images/button-style-4.png)\n  </div>\n  <div>\n    ![Example of a Secondary Button on hover](images/button-style-5.png)\n  </div>\n  <div>\n    ![Example of a disabled Secondary Button](images/button-style-6.png)\n  </div>\n  <div>\n    ![Example of a normal Ghost Button](images/button-style-15.png)\n  </div>\n  <div>\n    ![Example of a Ghost Button on hover](images/button-style-16.png)\n  </div>\n  <div>\n    ![Example of a disabled Ghost Button](images/button-style-17.png)\n  </div>\n</div>\n_Primary, Secondary, and Ghost Button state examples_\n\n\n\n## Typography\n\nButton text should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized.\n\n| Property  | Font-size (px/rem)     | Font-weight  |\n|-------------|------------------|--------------|\n| Button text | 14 / 0.875 | Semi-Bold / 600   |\n\n## Structure\n\n| Height          | px | rem |\n|-----------------|----|-----|\n| Regular buttons | 40 | 2.5 |\n| Small buttons   | 32 | 2   |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Structure for a Primary Button](images/button-style-7.png)\n  </div>\n  <div>\n    ![Structure for a small Primary Button](images/button-style-8.png)\n  </div>\n</div>\n_Stucture measurements for small and regular Primary Button | px / rem_\n\n### Spacing\n\nA Button cannot have any element or text within 16 pixels / 1 rem of its borders. For Button groups, the primary button is positioned on the outside of the set, while the secondary button is positioned inside. For a Button with a glyph, the space between the button label and the glyph must be greater than or equal to 16 pixels / 1 rem. This is to accommodate for instances where two or more buttons with glyphs appear together.\n\n| Spacing                 | px | rem  |\n|-------------------------|----|-------|\n| External: regular button| 16 | 1     |\n| Internal: regular button| 16 | 1     |\n| Internal: small button  | 10 | 0.625 |\n| Button pairings         | 16 | 1     |\n| Text & glyph            | 16 | 1     |\n| Ghost Button: text & glyph    | 8  | 0.5   |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Spacing for Primary Button](images/button-style-9.png)\n  </div>\n  <div>\n    ![Spacing for small Primary Button](images/button-style-10.png)\n  </div>\n  <div>\n    ![External Button spacing](images/button-style-11.png)\n  </div>\n  <div>\n    ![Internal spacing for a Button with glyph](images/button-style-12.png)\n  </div>\n  <div>\n  ![Ghost button spacing](images/button-style-13.png)\n  </div>\n  <div>\n  ![Small Ghost button spacing](images/button-style-14.png)\n  </div>\n</div>\n_Spacing measurements for various Button types | px / rem_\n"
  },
  "9": {
    "parent": "components",
    "child": "button",
    "section": "usage",
    "content": "## General guidelines\n\nButtons are used primarily on action items. Some examples include **Add**, **Save**, **Delete**, **Sign up**. Do not use Buttons as navigational elements. Instead, use [Links](/components/link) because it takes the user to a new page and is not associated with an action. Each page may have one to two primary buttons. Any remaining calls-to-action are represented as secondary buttons.\n\n## Usage\n\n| Button type      | Purpose                                                                                                                                                                                                                                                                                                                                                                                  |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Primary          | For the principle call to action on the page.                                                                                                                                                                                                                                                                                                                                            |\n| Secondary        | For secondary actions on each page.                                                                                                                                                                                                                                                                                                                                                      |\n| Button with icon | When words are not enough, icons can be used in buttons to better communicate what the button does. Icons are always paired with text.                                                                                                                                                                                                                                                   |\n| Disabled button  | Use when the user cannot proceed until an input is collected.                                                                                                                                                                                                                                                                                                                            |\n| Set of Buttons   | When an action required by the user has more than one option, always use a a negative action button (secondary) paired with a positive action button (primary) in that order. Negative action buttons will be on the left. Positive action buttons should be on the right. When these two types of buttons are paired in the correct order, they will automatically space themselves apart. |\n| Small Button     | Use when there is not enough vertical space for a regular sized button.                                                                                                                                                                                                                                                                                                                  |   \n| Ghost Button     | When an action does not require primary dominance on the page.  |    \n| Danger Button     | When an action has harmful intentions to the users data (delete, remove, etc).   |       \n\n## Labels\n\nButton labels tell users what will happen when they click the button. Use verbs that describe the action, such as **Add** or **Delete**. Use sentence-style capitalization (only the first word in a phrase and any proper nouns capitalized) and no more than three words for button labels.\n\nFor Sets of Buttons, use specific labels, such as **Save** or **Discard**, instead of using **OK** and **Cancel**. This is particularly helpful when the user is confirming an action.\n\nFor consistency, see [labels and idioms](/guidelines/content/glossary) for the approved list of action labels.\n\n## Icon usage\n\n* Use glyphs (16px) within buttons.\n* Glyphs are distinguished by their solid shape and knocked-out details.\n* Glyphs should always appear to the right of the text.\n* Glyphs used in buttons must be directly related to the action that the user is taking.\n* Glyphs must be the same color value as the text within a button.\n* Ghost buttons require a glyph icon (cannot be stand alone text because of poor affordance).\n\n\n![button with glyph](images/button-usage-1.png)\n_Glyph usage in Buttons_\n\n## Danger button usage\nDanger buttons have a different visual style to inform users of potential dangerous actions they are about to take. If using the Danger button as a standalone, we recommend styling it as a **Secondary button**. If using a Danger button within a set, the Danger button would be styled as a **Primary button.** \n\n![danger button set in modal](images/button-usage-2.png)\n_Danger button set_\n"
  },
  "10": {
    "parent": "components",
    "child": "checkbox",
    "section": "code",
    "content": "---\ndesc: <span>Checkboxes</span> are used when there is a list of options and the user may select multiple options, including all or none.\ncodepen: MOEgxQ\n---\n"
  },
  "11": {
    "parent": "components",
    "child": "checkbox",
    "section": "style",
    "content": "## Color\n\n| Attribute             | SCSS        | HEX         |\n|-------------------|-------------|-------------|\n| Checked: fill     | $brand-01  | #3d70b2     |\n| Unchecked: border | $ui-05     | #5a6872     |\n| Unchecked: fill   | $ui-01     | #ffffff     |\n| Icon: checkmark   | $inverse-01 | #ffffff     |\n| Text              | $text-01    | #152935     |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Normal checkbox example](images/checkbox-style-1.png)\n  </div>\n  <div>\n    ![Disabled checkbox example](images/checkbox-style-2.png)\n  </div>\n</div>\n_Disabled and normal Checkbox states_\n\n## Typography\n\nCheckbox headings and labels should be sentence case, with only the first word in a phrase and any proper nouns capitalized. Checkbox headings and labels should not exceed three words.\n\n| Property   | Font-size (px/rem)     | Font-weight  | Type style |\n|------------|-----------------|--------------|-----|\n| Heading    | 14 / 0.875 | Semi-Bold / 600  | Zeta  |\n| Label      | 14 / 0.875 | Normal / 400 |    - |\n\n## Structure\n\n| Property             | px | rem  |\n|----------------------|----|------|\n| Height & width       | 18 | 2.75 |\n| Outline              | 2  | -    |\n| Spacing: checkboxes  | 16 | 1    |\n| Spacing: checkbox & label | 8  | 0.5  |\n| External spacing     | 16 | 1    |\n\n---\n***\n> \n![Checkbox structure and spacing measurements](images/checkbox-style-3.png)\n\n_Structure and spacing measurements for Checkbox | px / rem_\n"
  },
  "12": {
    "parent": "components",
    "child": "checkbox",
    "section": "usage",
    "content": "## General guidelines\n\n### Headings\n\nIf necessary, a heading can accompany a set of Checkboxes to provide further context or clarity. Use sentence case for Checkbox headings. In the example below, “IBM Designers” would be the heading for the set of Checkboxes below.\n\n### Labels\n\nAlways use clear and concise labels for Checkboxes. Be explicit about the action that will follow if the Checkbox is selected. Labels appear to the right of Checkboxes.\n\n### Click target\n\nUsers should be able to select the checkbox by clicking on the box directly or by clicking on its label.\n\n### Tables\n\nSee the [Data Tables](/components/data-table/usage) section for guidance on how to use Checkboxes within a table.\n\n### Default selection\n\nThe default view of a set of Checkboxes is having no option selected.\n\n---\n***\n> \n![The default state for checkboxes is unchecked.](images/checkbox-usage-1.png)\n_By default, checkboxes are unchecked._\n"
  },
  "13": {
    "parent": "components",
    "child": "code-snippet",
    "section": "code",
    "content": "---\ndesc: <span>Code snippets</span> are small blocks of reusable code that can be inserted in a code file.\nvariations:\n  code-snippet:\n  - Code Snippet\n  code-snippet--inline:\n  - Inline Code Snippet\n  code-snippet--multi:\n  - Multi Code Snippet\ncodepen:\n  code-snippet:\n  - mKJBoE\n  code-snippet--inline:\n  - pKJWMK\n  code-snippet--multi:\n  - ZRGXdq\n---\n"
  },
  "14": {
    "parent": "components",
    "child": "code-snippet",
    "section": "style",
    "content": "## Color\n\n| Attribute                    | SCSS     | HEX     |\n|--------------------------|----------|---------|\n| Code & terminal snippet: background | $ui-01   | #ffffff |\n| Code & terminal snippet: border     | $ui-03   | #DFE3E6 |  \n| Code & terminal snippet: text       | $ui-01   | #152934 |\n| Icon: copy               | $brand-01| #3d70b2 |\n| Inline code: background on ui-02     | $field-01  | #ffffff |\n| Inline code: background on ui-01     | $field-02  | #F4F7FB |\n| Inline code: text           | $text-02   | #5A6872 |\n| Inline code:hover (background on ui-02 ) | $ui-02   | #D0DCED |\n| Inline code:hover (background on ui-01 ) | $hover-row  | #5596e6 at 10% opacity|\n| Icon: copy               | $brand-01| #3d70b2 |\n\n## Typography\n\n| Property | Font-family | Font-size (px/rem)  | Font-weight  |\n|----------|-------------|-------------|--------------|\n| Code Snippet     | Monospace   | 85% of body copy size | Normal / 400 |\n| Terminal Snippet       | Monospace   | 85% of body copy size | Normal / 400 |\n| Inline Code      | Monospace   | 85% of body copy size | Normal / 400 |\n\n## Structure\n\n| Property          | px  | rem  |\n|-------------------|-----|-------|\n| Code Snippet height: enabled   | 288 | 18    |\n| Code Snippet height: expanded   | Varies based on amount of content |     |\n| Terminal height   | 56  | 3.5   |\n| Width             | 600 | 37.5    |\n| Spacing: left-side internal | 24  | 1     |\n| Spacing: external | 16  | 1     |\n| Icon: height & width      | 16  | 1   |\n| Spacing: icon & tooltip | 4 | 0.5|\n| Spacing: tooltip internal | 16 | 1 |\n| Inline Snippet height | 22 | 1.375 |\n| Inline Snippet width | Varies based on content |  |\n| Inline Snippet: border radius | 4 | - |\n| Inline Snippet: internal spacing | 4 | .250 |\n\n\n\n![](images/code-snippet-style-1.png)\n_Structure and spacing measurements for Terminal Snippet | px / rem_\n![](images/code-snippet-style-2.png)\n_Structure and spacing measurements for Code Snippet | px / rem_\n\n---\n***\n> \n![](images/code-snippet-style-3.png)\n\n_Structure and spacing measurements for Copy icon | px / rem_\n"
  },
  "15": {
    "parent": "components",
    "child": "code-snippet",
    "section": "usage",
    "content": "## General\n\nOur Code Snippets are built with basic styling. We recommend using <a href=\"https://github.com/chriskempson/base16\" target=blank>Base16</a> for more complex syntax highlighting. Base16 provides carefully chosen syntax highlighting and a default set of sixteen colors suitable for a wide range of applications. The theme we recommend using is **Solarflare**.\n\n### Overflow\n\nIf there are more than nine lines of code, apply vertical scrolling to the Code Snippet.\n\nTerminal commands are often longer strings and should only appear on one line. Apply horizontal scrolling to maintain the set width of the box for those longer strings.\n\n## Interaction\n\nCode Snippets are accompanied by a **Copy icon**, which allows users to copy the provided code to their clipboard. The copy icon must be accompanied by a confirmation that states the successful action of copying an item to the users clipboard.\n\n![code snippet example](images/code-snippet-usage-1.png)\n"
  },
  "16": {
    "parent": "components",
    "child": "content-switcher",
    "section": "code",
    "content": "---\ndesc: <span>Content switcher</span> manipulates the content shown following an exclusive or “either/or” pattern.\nvariations:\n  content-switcher:\n  - Content Switcher\n  content-switcher--with-icon:\n  - Content Switcher with icon\ncodepen:\n  content-switcher:\n  - qVPBdz\n  content-switcher--with-icon:\n  - qVPBdz\n---\n"
  },
  "17": {
    "parent": "components",
    "child": "content-switcher",
    "section": "style",
    "content": "## Color\n\n| Attribute              | SCSS | HEX |\n|--------------------|------|------|\n| Active: fill       | $brand-01   | #3d70b2  |\n| Active: text       | $inverse-01 | #ffffff  |\n| Inactive: border   | $brand-01   | #3d70b2  |\n| Inactive: text     | $brand-01   | #3d70b2  |\n| :hover             | $hover-primary   | #30588c  |\n\n## Typography\n\nContent Switcher text should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized. The text should not exceed three words.\n\n| Property   | Font-size (px/rem)      | Font-weight  |\n|------------|-----------------|--------------|\n| Text       | 14 / 0.875 | Normal / 400 |\n\n## Structure\n\nContent Switchers must have at least two options for the user to choose from. Each container that makes up the Content Switcher is equal in size. The width of a container is determined by the length of the longest container option text plus the 32 px / 2rem on both sides of the text.\n\n| Property         | px | rem |\n|------------------|----|-----|\n| Height           | 40 | 2.5 |\n| Border           | 1  | -   |\n| Internal spacing | 32 | 2   |\n\n---\n***\n> \n![Content switcher structure and spacing measurements](images/content-switcher-style-1.png)\n\n_Structure and spacing measurements for Content Switcher | px / rem_\n\n### States\n\nContent Switchers have two states: selected and non-selected. Selected states are a solid color. There must always be only one selected state, no more, no less. Unselected options have a 1px border with no fill.\n"
  },
  "18": {
    "parent": "components",
    "child": "content-switcher",
    "section": "usage",
    "content": "## General guidelines\n\n### Text\n\nBe concise and specific. Titles have a max of two words.\n\n### Default selection\n\nBased on usage, there should be a default selection. The default selection is always the first option in a switcher.\n\n### Example\n\nThe content switcher is used for large groups of content, as opposed to the [Toggle](/components/toggle) which is meant for a “Yes/No” or “On/Off” binary decision.\n\n![content switcher example](images/content-switcher-usage-1.png)\n"
  },
  "19": {
    "parent": "components",
    "child": "data-table",
    "section": "code",
    "content": "---\ndesc: <span>Data Tables</span> present raw data sets and lend meaning to the data, while maintaining that the data is readable, scannable, and easily comparable.\n\nvariations:\n  data-table-v2:\n  - Data Table\n  data-table-v2--expandable:\n  - Expandable Data Table\n  data-table-v2--pagination:\n  - Data Table with Pagination\n  data-table-v2--small:\n  - Small Data Table\n  toolbar:  \n  - Toolbar\ncodepen:\n  data-table-v2:\n  - MOEagV\n  data-table-v2--expandable:\n  - gXGabM\n  data-table-v2--pagination:\n  - pdWjva\n  data-table-v2--small:\n  - aVLvzX\n  toolbar:\n  - yPzYNK\n---\n"
  },
  "20": {
    "parent": "components",
    "child": "data-table",
    "section": "style",
    "content": "## Color\n\n| Attribute                       | SCSS     | HEX       |\n|-----------------------------|--------- |-----------|\n| Background: light           | $ui-01   | #ffffff   |\n| Background: gray            | $ui-02   | #f4f7fb  |\n| Table header                | $ui-02   |  #f4f7fb  |\n| Table border                | $ui-04   |  #8897a2  |\n| Row:hover                   | $hover-row | #5596e6 at 10% opacity   |\n| Zebra stripe                | $ui-02   | #f4f7fb   |\n| Expanded: border-left       | $brand-01| #3d70b2   |\n| Text                        | $text-01 | #152935   |\n| Chevron, caret, overflow menu icon             | $ui-05   | #5a6872   |\n\n\n### Style options\nSpecific styling on the Data Table component can be toggled on/off based on user or team preference.\n\n**Row dividers, Zebra striping, & table border**\n\nIf zebra striping is turned off, you must have Row dividers.\n\n![Data table: row styling](images/data-table-style-1.png)\n\n_Data Table with various row styling_\n\n<br />\n\n**Background colors**\n\nData Tables are built to be accessible against two `$ui-01` and `$ui-02`:\n\n![Data table: background colors](images/data-table-style-2.png)\n\n_Data Table on ui-01 vs ui-02_\n\n## Typography\nColumn headers should be in title case. All other table text should be sentenced case.\n\n| Property      | Font-size (px/rem)     | Font-weight  |\n|---------------|------------------|--------------|\n| Title         | 18 / 1.125 | Semibold / 600  |\n| Header        | 14 / 0.875   | Semibold / 600   |\n| Text          | 14 / 0.875  | Normal / 400 |\n\n## Layer\n\n| Layer    | Elevation | Box-shadow  |\n|----------|---------- |-------------|\n| Flat     | 1         | none        |\n\n\n\n## Structure\nTables are a configurable and customizable component. Designers can pick and choose certain elements and interactions.\n\n### Row sizes\nShort and Default are offered as **user preferences** that can be accessed from the table settings menu.\n\nCompact and Tall are designer and developer preferences. Tall row heights are only recommended if your data is expected to have 2 lines of content in a single row.\n\n\n| Size     |   Row Height (px)  |\n| ---------|  ----------------  |\n| Compact  |  24     |\n| Short    |  32     |\n| Default  |  48     |\n| Tall     |  64     |\n\n\n![Data table: row styling](images/data-table-style-3.png)\n_Data Table: varying row sizes_\n\n\n### Simple Data Table\nThe basic table style is the required base from which tables can be developed. Basic tables are composed of a header row followed by rows of data below. At a minimum, tables require three or more columns.\n\nColumn widths can vary by content and only requires a minimum spacing between columns.\n\n| Property                | px | rem  |\n|-------------------------|----|------|\n| Height: header          | 48 | 3    |\n| Width                   | Varies based on content and layout | |\n| Chevron                 | 12   | 0.75  |\n| Checkbox                | 18   | 1.125 |\n\n\n### Data table\nAfter the simple table structure, tables can be enhanced by adding any of the following: selectable rows, expanding rows, nested tables, row menus, table batch actions, overall table menu, and/or table filter.\n\n| Spacing            | px   | rem   |\n|--------------------|------|-------|\n| Title & table      | 16   | 1     |\n| Header & caret     |  8   | 0.5   |\n| Basic internal     | 24   | 1.5   |\n| Enhanced internal  | 16   | 1     |\n| Internal elements  | 16   | 1     |\n| Between columns    | ≥ 24 | 1.5   |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n![Spacing for a basic Data Table](images/data-table-style-5.png)\n</div>\n<div>\n![Spacing for an enhanced Data Table](images/data-table-style-6.png)\n</div>\n</div>\n\n\n_Structure and spacing measurements for a basic and an enhanced Data Table | px / rem_\n\n### Toolbar\n\n| Property               | px   | rem   |\n|------------------------|------|-------|\n| Icon height            | 16   | 1   |\n| Spacing: icons         | 24   | 1.5 |\n| Spacing: icons & table | 16   | 1   |\n\n---\n***\n> \n![Spacing for toolabr icons](images/data-table-style-7.png)\n\n_Structure and spacing measurements for toolbar icons | px / rem_\n"
  },
  "21": {
    "parent": "components",
    "child": "data-table",
    "section": "usage",
    "content": "## Basic Data Table\nThe Data Table component is designed in a way for additional functionality to be added on to fit your team's needs.\n\nThe basic Data Table is shipped with a base style, which includes:\n\n* Borders\n* No zebra striping, row dividers instead.\n* No Pagination, Search, Table toolbar, or multi-select\n\n![basic data table](images/data-table-usage-1.png)\n\n_Basic Data Table_\n\n\n## Additonal functionality\nThe following can be added to the Data Table to increase its functionality.\n\n### Pagination\nPagination divides table data into separate pages. Pagination is accompanied by an option that enables the user to change the number of items per page. See the [Pagination](/components/Pagination) component for further guidelines.\n\n![data table with pagination](images/data-table-usage-2.png)\n\n_Data Table with various Pagination methods_\n\n\n### Search\nSearch returns results based on matches. It is used to locate and display a set of results. Search functionality within a table follows [Small search](/components/search) conventions. Search should be open by default, and live below the table title.\n\n![data table with search](images/data-table-usage-3.png)\n_Search on Data Tables_\n\n### Sorting\nImprove table usability by making data sortable. Clickable headers enable users to sort table data up or down. The specific attribute being sorted is accompanied by a caret icon. The caret will only appear on the column headers once that particular column is being sorted. You can see a demo of this on Carbon's [Codepen.](https://codepen.io/tjegan/pen/PjjyVN)\n\n\n### Table toolbar\nThe table toolbar is reserved for global table actions such as table settings, complex filter, export, or editing table data. Additional options can be added if you have an icon to support that function. Icons should be 16x16 px (glyphs). We recommend using no more than 5 icons within the table toolbar.\n\n---\n***\n> \n![Table toolbar](images/data-table-usage-6.png)\n\n_Table toolbar: Table settings_\n\n### Multi-select / Batch action\nBatch actions are functions that may be performed on multiple items within a table. Once the user selects more than one row from the table, the **batch action bar** appears at the top of the table, presenting the user with actions they can take. To exit or escape \"batch action mode,\" the user can cancel out or deselect the items.  \n\n![Batch action mode](images/data-table-usage-7.png)\n_Batch action mode on Data Tables_\n\n### Inline actions\nInline actions are functions that may be performed on a specific table item. Each row is accompanied by an [Overflow menu](/components/overflow-menu) that contains actions related specifically to that table row.\n\n![Inline action on Data Table](images/data-table-usage-8.png)\n_Inline actions on Data Tables_\n"
  },
  "22": {
    "parent": "components",
    "child": "date-picker",
    "section": "code",
    "content": "---\ndesc: <span>Date and time pickers</span> allow users to select a single or a range of dates and times.\nvariations:\n  date-picker:\n  - Simple date picker\n  date-picker--light:\n  - Simple date picker (Light)\n  date-picker--single:\n  - Single date picker\n  date-picker--single-light:\n  - Single date picker (Light)\n  date-picker--range:\n  - Range date picker\n  date-picker--range-light:\n  - Range date picker (Light)\n  time-picker:\n  - Time picker\ncodepen:\n  date-picker:\n  - POJoNb\n  date-picker--single:\n  - VrMweY\n  date-picker--range:\n  - aVLbNx\n  time-picker:\n  - GOMKap\n---\n"
  },
  "23": {
    "parent": "components",
    "child": "date-picker",
    "section": "style",
    "content": "## Color\n\n Inputs come in two different colors. The default input color is `$field-01` and is used on `$ui-01` page backgrounds. The light version input color is `$field-02` and is used on `$ui-02` page backgrounds.\n\nIf a `min date` is set on the calendar, then any text appearing before that date will be `#152934 @ 50%`, otherwise all text should be `#152934` (unless the number is selected or highlighted). Please refer to [Select](/components/select), for inline select styling.\n\n| Color                    | SCSS       | HEX       |\n|--------------------------|------------|-----------|\n| Background: input default | $field-01     | #f4f7fb |\n| Background: input light  | $field-02     | #ffffff |\n| Label: enabled           | $text-01   | #152934   |\n| Label: focused           | $brand-01  | #3d70b2   |\n| Label: error             | $support-01 | #e0182d |\n| Text: user input         | $text-01   | #152934   |\n| Text: placeholder        | $text-02   | #5a6872   |\n| Text: selected date      | $text-01    | #152934   |\n| Text: highlighted range  | $text-01   | #152934   |\n| Text: error message      | $support-01        | #e0182d   |\n| Background: calendar widget | $ui-01     | #ffffff   |\n| Background: highlighted range | $ui-02  | #f4f7fb   |\n| Icon                     | $brand-01  | #3d70b2   |\n| Dot: current date     | $brand-01  | #3d70b2   |\n| Border: selected date | $brand-01  | #3d70b2   |\n| Border bottom: enabled | $ui-05 | #5a6872 |\n| Border bottom: focused | $brand-01 | #3d70b2 |\n| Border bottom: error | $support-01 | #e0182d |\n\n![Example of a Date Picker](images/date-picker-style-1.png)\n_Date Picker example using both $field-02 (top) and $field-01 (bottom)_\n\n\n\n## Typography\nLabels should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized, and no more than three words.\n\n| Property         | Font-size       | Font-weight  | Type style |\n|------------------|-----------------|--------------|----|\n| Label            | 14 / 0.875      | Semi-Bold / 600   | Zeta |\n| Text: user input  | 14 / 0.875     | Roman / 400  | - |\n| Text: month & year | 12 / 0.75     | Semi-Bold / 600  | Omega |\n| Text: day of the week | 12 / 0.75  | Semi-Bold / 600   | Omega |\n| Text: day        | 12 / 0.75       | Roman / 400  | - |\n| Text: error message | 12 / 0.75 | Normal / 400 | - |\n\n\n## Layer\n| Component                     | Layer    |\n|-------------------------------|----------|\n| Calendar widget               | Overlay  |\n\n\n## Structure\n\n### Simple & Single Date Pickers\n\n| Property                     | px  | rem    |\n|------------------------------|-----|--------|\n| Height                       | 40  | 2.5    |\n| Width: Simple Date Picker (mm/yyyy) | 91 | 5.7   |\n| Width: Simple Date Picker (mm/dd/yyyy) | 114 | 7.125  |\n| Width: Single Date Picker    | 144 | 9      |\n| Calendar icon                | 16  | 1      |\n| Internal spacing             | 16  | 1      |\n| Spacing: icon & input text   | 8  | 0.5|\n| Border bottom: enabled | 1 | 0.0625rem |\n| Border bottom: focused | 2 | 0.125 |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Structure for Simple & Single Date Pickers](images/date-picker-style-4.png)\n  </div>\n  <div>\n    ![Spacing for Simple & Single Date Pickers](images/date-picker-style-5.png)\n  </div>\n  <div>\n    ![Structure for Simple & Single Date Pickers](images/date-picker-style-6.png)\n  </div>\n  <div>\n    ![Spacing for Simple & Single Date Pickers](images/date-picker-style-7.png)\n  </div>\n</div>\n_Structure and spacing for Simple & Single Date Pickers | px / rem_\n\n\n### Range Date Picker\n\n| Property                     | px  | rem    |\n|------------------------------|-----|--------|\n| Height                       | 230 | 14.375 |\n| Width                        | 280 | 17.5   |\n| Calendar icon                | 16  | 1      |\n| Spacing: right of text input | 8   | 0.5    |\n| Internal spacing             | 16  | 1      |\n| Spacing: month & days of week| 20  | 1.25   |\n| Spacing: days of week & days | 20  | 1.25   |\n| Current date border          | 2   | -      |\n\n\n![Structure for Date Picker](images/date-picker-style-2.png)\n_Structure for Date Picker | px / rem_\n\n![Spacing for Date Picker](images/date-picker-style-3.png)\n_Spacing for Date Picker | px / rem_\n\n### Time Picker\nThere are two types of time pickers; a 12-hour and 24-hour time picker. The 12-hour Time Picker is accompanied by a time period (am/pm) input, while the 24-hour clock is not.\n\n| Property                     | px  | rem   |\n|------------------------------|-----|-------|\n| Height                       | 40  | 2.5   |\n| Width                        | 80  | 5     |\n| Internal spacing             | 16  | 1     |\n| Spacing: time picker & inline select | 16  | 1  |\n\n\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Structure for a Time Picker](images/time-picker-style-1.png)\n  </div>\n  <div>\n    ![Spacing for a Time Picker](images/time-picker-style-2.png)\n  </div>\n</div>\n_Structure and spacing for a Time Picker | px / rem_\n\n### States\n\n**Active:** Placeholder text should remain when the user clicks into the text input and gets a cursor. Once the user starts typing the hint text is replaced with the user input text.\n\n**Error:** Error messages appear below the input field and are always present while invalid.\n\n**Disabled:** Disabled state appears at 50% opacity and has a `.not-allowed` cursor on hover.\n"
  },
  "24": {
    "parent": "components",
    "child": "date-picker",
    "section": "usage",
    "content": "## Usage\n\n| Type      | Purpose                                                                                                                                                                                                                                                          |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Range Date Picker         |  To select a range of dates, accompanied by a calendar widget.                       |\n| Single Date Picker       |   When a user needs to select one date, accompanied by a calendar widget.             |\n| Simple Date Picker | When the date is known by the user, and they don't need a calendar to anticipate the dates. |\n\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Range Date Picker](images/date-picker-usage-1.png)\n  </div>\n  <div>\n    ![Single Date Picker](images/date-picker-usage-2.png)\n  </div>\n  <div>\n    ![Simple Date Picker](images/date-picker-usage-3.png)\n  </div>\n</div>\n\n_Types of Date Pickers_\n\n## General guidelines\n### Labels\nBoth Date and Time Pickers are accompanied by labels, and follow the same accessibility guidelines for all [Forms](/components/form).\n\n### Format\nFor Date Pickers, use placeholder text so users input the date in the correct format. It can be formatted in a variety of ways. See the Date Picker code [documentation](https://github.com/carbon-design-system/carbon-components/tree/master/src/components/date-picker) for more info.\n\n\n## Interaction\n### Calendar widget\nIt is recommended to use the Date Picker with a calendar widget when the user is browsing between a range of dates. We can aid the user in making the proper choices by providing a visual reference of dates for them to choose from. The calendar widget appears once the user has interacted with the date input field (typically on `:focus`).\n\n---\n***\n> \n![Selecting a dates from the Range Date Picker](images/date-picker-usage-4.gif)\n\n_Selecting dates from the Range Date Picker_\n\n### Simple Date Picker\nThe Simple Date Picker provides the user with a text input in which they can input month/day/year. Simple Date Pickers are typically used when the date is known by the user, such as a birthday or credit card expiration.\n\n## Time Picker\nTime pickers provide the user with a text input in which they can input hours/minutes. Additionally, they can be accompanied by an “AM/PM” selection and a time zone selection, which is styled as an [Inline Select](/components/select).\n\n---\n***\n> \n![Time picker example](images/time-picker-usage-1.png)\n\n_Time picker used to set deployment time_\n"
  },
  "25": {
    "parent": "components",
    "child": "dropdown",
    "section": "code",
    "content": "---\ndesc: <span>Dropdowns</span> present a list of options that can be used to filter existing content. \nvariations:\n dropdown:\n - Dropdown\n dropdown--light:\n - Dropdown (Light)\n dropdown--up:\n - Dropdown (Up)\n dropdown--up-light:\n - Dropdown (Up & Light)\n MultiSelect:\n - Multi-select Dropdown\n MultiSelect.Inline:\n - Inline Multi-select Dropdown\n MultiSelect.Filterable:\n - Filter Dropdown\ncodepen: eeGYvQ\n---\n"
  },
  "26": {
    "parent": "components",
    "child": "dropdown",
    "section": "style",
    "content": "## Color\n\nInputs come in two different colors. The default input color is `$field-01` and is used on `$ui-01` page backgrounds. The light version input color is `$field-02` and is used on `$ui-02` page backgrounds.\n\n| Color              | SCSS            | HEX       |\n|--------------------|-----------------|-----------|\n| Background: input default | $field-01     | #f4f7fb |\n| Background: input light | $field-02     | #ffffff |\n| Background: drawer  | $ui-01          | #ffffff   |\n| Label: enabled           | $text-01   | #152934   |\n| Label: focused           | $brand-01  | #3d70b2   |\n| Label: error             | $support-01 | #e0182d |\n| Text: user input    | $text-01        | #152935   |\n| Text: placeholder        | $text-03        | #cdd1d4   |\n| Text: error message      | $support-01        | #e0182d   |\n| Row:hover      | $hover-row       | #5596e6 at 10% opacity   |\n| Caret              | $brand-01       | #3d70b2   |\n| Border bottom: enabled | $ui-05 | #5a6872 |\n| Border bottom: focused | $brand-01 | #3d70b2 |\n| Border bottom: error | $support-01 | #e0182d |\n\n![Dropdown example with $field-01 and $field-02](images/dropdown-style-9.png)\n_Example of Dropdowns with $field-02 (left) and $field-01 (right)_\n\n## Typography\nAll Dropdown text should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized. Dropdown options should not exceed three words.\n\n| Property    | Font-size       | Font-weight  | Type style |\n|-------------|-----------------|--------------|------------|\n| Label       | 14 / 0.875 | Semi-bold / 600   | Zeta\n| Option | 14 / 0.875 | Normal / 400 | - |\n| Label: filter | 14 / 0.875 | Normal / 400   | - |\n| Text: filter placeholder | 14 / 0.875 | Normal / 400   | - |\n| Text: user input | 14 / 0.875 | Semi-bold / 600   | Zeta |\n| Text: error message | 12 / 0.75 | Normal / 400 | - |\n\n\n## Layer\n| Layer      | Elevation     | Box-shadow    |\n|------------|----------|----------|\n| Overlay    | 8        | `0 4px 8px 0 rgba(0,0,0,0.10);`  |\n\n\n## Structure\nDropdowns have two states, open and closed. An open and closed Dropdown should be the same width and appropriately fit the design, layout, and content. The height of a closed Dropdown stays consistent while the height of an open Dropdown will vary based on the amount of options it has. Please note the various color differences for closed and open Dropdowns.\n\n| Property         | px | rem |\n|------------------|----|-----|\n| Height           | 40 | 2.5 |\n| Internal spacing | 16 | 1   |\n| Border bottom: enabled | 1 | 0.0625rem |\n| Border bottom: focused | 2 | 0.125 |\n\n![Structure and spacing for a closed dropdown](images/dropdown-style-2.png)\n_Structure and spacing measurements for Dropdown | px / rem_\n\n### States\n\n**Error:** Error messages appear below the input field and are always present while invalid.\n\n**Disabled:** Disabled state appears at 50% opacity and has a `.not-allowed` cursor on hover.\n\n![Normal, active, open, and disabled states for Dropdown](images/dropdown-style-1.png)\n_Normal, active, open, and disabled states for Dropdown_\n\n## Multi-Select Dropdown\n\n| Property                           | px | rem   |\n|------------------------------------|----|-------|\n| Height                             | 40 | 2.5   |\n| Internal spacing                   | 16 | 1     |\n| Row height                         | 40 | 2.5   |\n| Spacing: checkbox & label          | 4  | 0.25  |\n| Spacing: badge & label             | 10 | 0.625 |\n| Spacing: label & caret             |16≤ | 1≤    |\n| Badge height                       | 18 | 1.125 |\n| Badge width                        | Varies based on value | - |\n\n\n![Structure and spacing for a Multi-Select Dropdown](images/dropdown-style-3.png)\n_Structure and spacing measurements for a Multi-Select Dropdown | px / rem_\n\n<!--![Hover and focus states for a Multi-Select Dropdown](images/dropdown-style-4.png)\n_Hover and focus zstates for a Multi-Select Dropdown_-->\n\n\n\n## Inline Dropdown\n\n| Property                           | px | rem   |\n|------------------------------------|----|-------|\n| Height                             | 32 | 2     |\n| Internal spacing                   | 8  | 0.5 |\n| Spacing: label & dropdown menu     | 8  | 0.5 |\n| Row height                         | 40 | 2.5   |\n| Spacing: checkbox & label          | 4  | 0.25  |\n| Spacing: badge & label             | 10 | 0.625 |\n| Spacing: label & caret             | 8≤ | 0.5≤  |\n| Badge height                       | 18 | 1.125 |\n| Badge width                        | Varies based on value | - |\n\n\n![Structure and spacing for Inline Dropdown](images/dropdown-style-5.png)\n_Structure and spacing for Inline Dropdown | px / rem_\n\n\n### Inline Dropdown states\nInline select has two different states, one for mouse hover and one for keyboard focus.\n\n---\n***\n>\u000e\u000e \n![Hover and focus states for Inline Dropdown](images/dropdown-style-6.png)\n\n_Hover and focus states for Inline Dropdown_\n\n## Filtering\nFiltering can be used with Dropdown and Multi-select Dropdown but not Inline Dropdown.\n\n| Property                           | px | rem   |\n|------------------------------------|----|-------|\n| Clear icon height & width          | 8  | 0.5 |\n| Spacing: caret & clear icon        | 16 | 1     |\n| Spacing: clear icon & typed text   | 16 | 1     |\n\n![Spacing for Multi-select Dropdown with Filtering](images/dropdown-style-7.png)\n_Spacing for Multi-select Dropdown with Filtering | px / rem_\n\n![Interation states for Multi-select Dropdown with Filtering](images/dropdown-style-8.png)\n_Interaction states for Multi-select Dropdown with Filtering | px / rem_\n"
  },
  "27": {
    "parent": "components",
    "child": "dropdown",
    "section": "usage",
    "content": "## Usage\n| Type        | Purpose                                        |\n|-------------|------------------------------------------------|\n| Dropdown    | User needs to pick one option from a list.  |\n| Filter Dropdown | When a list contains more than 25 items, use filtering to help find options from the list. May only be used with Dropdown or Multi-select Dropdown. Cannot be used with Inline Dropdown.      |\n| Multi-select Dropdown | User needs to select multiple options from a Dropdown.  |\n| Inline Dropdown | A stylized Dropdown that can be formatted to appear inline with other content and allows the user to select one option.  |  \n| Inline Multi-select Dropdown | A stylized Dropdown that can be formatted to appear inline with other content and allows the user to select more than one option.  |     \n\nDropdowns can also be used as menus. This can be seen in [Tabs](/components/tabs), when used in a smaller screen size, collapses into a Dropdown.\n\n## Content\n### Labels\nLabels inform users what to expect in the list of Dropdown options. Use clear labels for the Dropdown trigger so that users understand the purpose. Keep the label short and concise by limiting it to a single line of text.\n\n### Dropdown options\nDescribe the Dropdown option succinctly in one line of text. Never use images or icons within a Dropdown. Avoid having multiple lines of text in a Dropdown, but if text wrapping is necessary, limit it to two lines and an ellipsis (...) for overflow content. We recommend presenting the options in alphabetical order.\n\n## Interaction\nBy default, the Dropdown displays a label when closed. An open Dropdown appears on click rather than on hover. Open Dropdown drawers should appear above all other UI elements. They can be dismissed by clicking outside of the Dropdown item or on the parent element.\n\nInteractions for Inline Dropdown are the same as above, however we currently don't support an Inline Filter Dropdown (single or Multi-select).\n\n### Dropdown\nSelecting an item from the Dropdown will close the drawer and the selected option will replace the label.\n\n### Multi-select Dropdown\nThe label remains persistent within the Dropdown. Once the user chooses an option from the list, a number badge will appear to the left of the label containing the total number of selected items. Selected options float to the top of the list in alphanumeric order.\n\n![multiselect dropdown](images/dropdown-usage-1.png)\n\n\n#### Clear all\nTo clear all selected items from a list, hover over the number badge and click the \"x\" icon next to the value. To help with clarity, a browser tooltip appears when the user hovers over the \"x\" (or `close`) icon to indicate the click action results.\n\n![clear all on multiselect dropdown](images/dropdown-usage-2.png)\n\n### Filter Dropdown\nBy default, the Dropdown displays a label when closed. When the user hovers over the label area, a text cursor will appear. The drawer opens on click (anywhere in the field) and the user can type to filter through the list of options below. Once the user begins typing, the `close` (x) icon will appear to the right of the label. This will clear any user-inputted text. Selecting an item from the Dropdown will close the drawer and the selected option will replace the default label.\n\n![filter dropdown interactions](images/dropdown-usage-3.png)\n\n### Multi-select Filter Dropdown\nThis variation of Dropdown follows the same interaction patterns described above with the following exceptions:\n\n* The label will remain persistent except when the user is inputting text.\n* Selected options will appear at the top of the list.\n* The drawer does not close once the user makes a selection. The user will need to click outside of the Dropdown or on the parent element to close the drawer.\n\n![multiselect filter dropdown interactions](images/dropdown-usage-4.png)\n"
  },
  "28": {
    "parent": "components",
    "child": "file-uploader",
    "section": "code",
    "content": "---\ndesc: <span>File Uploader</span> allows the user to transfer a file or submit content of their own.\ncodepen: pdWowZ\n---\n"
  },
  "29": {
    "parent": "components",
    "child": "file-uploader",
    "section": "style",
    "content": "## Color\n\n| Attribute              | SCSS            | HEX     |\n|--------------------|-----------------|---------|\n| Text: label        | $text-01        | #152934 |\n| Text: instructions | $text-02        | #5a6872|\n| Text: file name    | $text-01        | #152935 |\n| Background: file   | $brand-01 @ 25% | #3d70b2 |\n| Icon: remove       | $inverse-01     | #152934 |\n| Icon: loading      | $ui-05          | #5a6872 |\n\n## Typography\n\nThe File Uploader label and instruction text should be set in sentence case, with only the first letter of the first word in the sentence capitalized.\n\n| Property         | Font-size (px/rem)     | Font-weight  | Type style |\n|------------------|-----------------|--------------|---|\n| Label            | 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Instruction text | 14 / 0.875 | Normal / 400 | -    |\n| File name        | 12 / 0.75  | Normal / 400 | -    |\n\n## Structure\n\nThe width of an uploaded file varies based on the content and layout of a design. Refer to the [Button](/components/button) guidelines for styling and usage of the “Add files” button.\n\n| Property               | px | rem   |\n|------------------------|----|-------|\n| Height                 | 30 | 1.875 |\n| Icon: remove           | 16 | 1     |\n| Icon: loading          | 16 | 1     |\n| Spacing: uploaded file | 20 | 1.25  |\n| Spacing: remove icon   | 16 | 1     |\n\n---\n***\n> \n![Structure and spacing measurements for File Uploader](images/file-uploader-style-1.png)\n\n_Structure and spacing measurements for File Uploader | px / rem_\n"
  },
  "30": {
    "parent": "components",
    "child": "file-uploader",
    "section": "usage",
    "content": "## General\n\n* A File Uploader is commonly found in forms, but they can also live as stand alone elements.\n* **Add files** is the default text that appears with the File Uploader.\n* A File Uploader should always be accompanied by **Submit** or **Upload**, which is to be styled as a [Secondary Button](/components/button).\n* Use an ellipsis (...) if the filename extends beyond the width of its parent element.\n\n![file uploader example](images/file-uploader-usage-1.png)\n\n## Basic interaction\n\n1. The user may select 1 or more files to upload at a time. By default, any file type is accepted, but  you can add parameters to validate a specific file type.  \n2. The action of clicking **Add files** will trigger a browser-specific upload window.\n3. Once the user chooses files to upload, the browser-specific upload window closes and the files will appear below the **Add files** button.\n4. User clicks **Submit** or **Upload** to submit their data.\n4. Any errors that may occur with the file should appear as an inline error\n[Notification](/components/notification).\n\n![file uploader error](images/file-uploader-usage-2.png)\n_Errors in File uploader_\n\n## Upload state\n\nDevelopers using File Uploader will be able to use JavaScript to inject a Loading component when selected files are actually being uploaded.\n\n![File uploading state](images/file-uploader-usage-3.png)\n\n## Removing files\n\nDevelopers will use JavaScript to inject a “close” button on each file that is selected to be uploaded. It's up to the developer to code the logic for removing these files individually. However, keep in mind that this kind of editing isn't supported natively in the browser.\n"
  },
  "31": {
    "parent": "components",
    "child": "form",
    "section": "code",
    "content": "---\ndesc: <span>Forms</span> are used for submitting data.\ncodepen: pdWorZ\n---\n"
  },
  "32": {
    "parent": "components",
    "child": "form",
    "section": "style",
    "content": "## Color\n\nForm inputs come in two different colors. The default input color is `$field-01` and is used on `$ui-01` page backgrounds. The light version input color is `$field-02` and is used on `$ui-02` page backgrounds. For full color specs, refer to each specific component.\n\n![Example of form fields in the two colors](images/form-style-3.png)\n_Example of light fields with $field-02 (left) and the default version with $field-01 (right)_\n\n## Typography\n\nForm headings and labels should be set in sentence case with the first letter of the first word capitalized. Please refer to the [Text Input](/components/text-input), [Dropdown](/components/dropdown), [Checkbox](/components/checkbox), [Radio button](/components/radio-button), [Toggle](/component/toggle), [Button](/component/button) pages for specific typography details on each component.\n\n| Property | Font-size (px/rem)     | Font-weight  | Type style |\n|------------|-----------------|--------------|---|\n| Heading    | 28 / 1.75    | Light / 300  | Beta |\n| Label      | 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Text: input | 14 / 0.875 | Normal / 400 | - |\n| Text: error message | 12 / 0.75 | Normal / 400 | - |\n| Text: help | 12 / 0.75 | Normal / 400 | - |\n| Text: placeholder | 14 / 0.875 | Normal / 400 | - |\n\n## Structure\n\nForms are made up of several different components. The order in which these elements are arranged is flexible, but should always follow the spacing guidelines below.\n\nForms can be one column or two. The width of each column varies based on the content and layout of the design. On mobile, forms can only have one column.\n\nAll icons can be found on the [iconography](/style/iconography/library) library page.\n\n| Space between       | px | rem  |\n|----------------------|----|------|\n| Inputs               | 24 | 1.5  |\n| Non-input components | 32 | 2    |\n| Columns              | 20 | 1.25 |\n\n\n\n![Structure and spacing measurements for a double column form ](images/form-style-2.png)\n_Structure and spacing measurements for a double column Form | px / rem_\n\n---\n***\n> ![Structure and spacing measurements for a single column form](images/form-style-1.png)\n\n_Structure and spacing measurements for a single column Form | px / rem_\n\n### States\n\n**Active:** Placeholder text should remain when the user clicks into the text input and gets a cursor. Once the user starts typing the hint text is replaced with the user input text.\n\n**Help text:** Help text appears below the label when the input is active. Help text remains visible while the input is focused and disappears after focus away.\n\n**Error:** Error messages appear below the input field and are always present while invalid.\n\n**Disabled:** Disabled state appears at 50% opacity and has a `.not-allowed` cursor on hover.\n\n"
  },
  "33": {
    "parent": "components",
    "child": "form",
    "section": "usage",
    "content": "## Effective form design\n\nAll forms are comprised of 6 elements:\n\n* **Labels:** Inform users what the corresponding input fields mean.\n* **Input fields:** Enable users to provide information. Information can be entered through a variety of different input fields ranging from text fields, checkboxes, and many other types.\n* **Help text:** Provides assistance on how to fill out a field. Help text is optional.\n* **Placeholder text:** Hints at what goes into a field. Placeholder text is optional.\n* **Actions:** Allow users to submit a form.\n* **Validation:** Ensures the data submitted by the user conforms to acceptable parameters.\n\n![effective form design](images/form-usage-1.png)\n\n## Form logic\n\n* **Radio Buttons** are used when there is a list of two or more options that are mutually exclusive and the user must select exactly one choice. In other words, clicking a non-selected radio button will deselect whatever other button was previously selected in the list.\n* **Checkboxes** are used when there are lists of options and the user may select any number of choices, including zero, one, or several. In other words, each checkbox is independent of all other checkboxes in the list, so checking one box doesn’t uncheck the others. A stand-alone checkbox, or a toggle can be used for a single option that the user can turn on or off.\n* For fields in which a single selection is required and there are a large number of possible options, consider using a **Select** element.\n\n![form logic](images/form-usage-4.png)\n\n## General guidelines\n\n### Keep it short\n\nBe as concise as possible when designing forms. Think about each field and what value the data will provide. What do you gain by collecting this information?\n\n**Begin by asking:**\n\n* Is this a piece of information that is valuable to us?\n* Is this a piece of information that is so valuable that it's worth preventing the user from continuing if they choose not to provide it?\n\n### Labels\n\nEffective form labeling helps users understand what information to enter into a Text Input. Using a placeholder text as a label is often applied as a space-saving method. However, this is not recommended because it hides context and presents accessibility issues.\n\n**Accessibility best practices for labels:**\n\n* Labels must be visible when an input gets focus.\n* Labels must be announced to the screen reader on focus.\n* Ensure the helper text that appears under an input is read when an assistive technology user stops at an input using ARIA.\n* Use sentence-style capitalization (only the first word in a phrase and any proper nouns capitalized).\n\n### Default values\n\nWhere possible, add programmatic assistance. Detect and pre-fill inputs to reduce errors and save time. When the software can't determine the value that belongs in an input, use type-ahead to make suggestions. Use sentence-case for default values, detected values, and auto-completion text.\n\n### Help text\n\nHelp text is pertinent information that assists the user in completing a field. Help text is always available when the input is focused and appears underneath the label. Use sentence-style capitalization, and in most cases, write the text as full sentences with punctuation.\n\n### Placeholder text\n\nPlaceholder text provides hints or examples of what to enter. Placeholder text  disappears after the user begins entering data into the Input and should not contain crucial information. Use sentence-style capitalization, and in most cases, write the text as a direct statement without punctuation.\n\n## Validation and errors\n\n### Error messaging\n\nEffective error messaging can help the user to understand the problem and how to fix it. First, inform the user what has happened, then provide guidance on next steps or possible resolutions. [Inline Notifications](/components/notification) can be used to state the general problem with the users input, such as _“Please input the required fields.”_ Inline Notifications can occur pre or post submission, depending on the type of data the user is inputting.\n\n![Inline notification on forms](images/form-usage-2.png)\n_Inline Notification for error messaging_\n\n### Form validation\n\nWe recommend validating the users data before form submission. Use visual cues to guide the user as to where the problem lies within the form. This will help to easily identify the elements that need to be corrected.\n\nThe validation should appear when the user has clicked away from the text field. Once the user corrects the errors within the text field, the validation should disappear once the data is rendered as valid.\n\nThe validation label below the field should be as informative as possible when describing the issue with the users data. For example, if password limitations require 16 characters, but the user inputs a password with only six characters, the text should read something like, _\"Password must be at least 16 characters.\"_\n\n![Validation error sequencing on a form](images/form-usage-3.gif)\n_Validation error sequencing_\n\n\n### Optional vs. required fields\nAll fields in a form are assumed required, with optional fields being tagged as so.\n\n![optional fields in a form](images/form-usage-5.png)\n_Denote optional fields within a Form_\n"
  },
  "34": {
    "parent": "components",
    "child": "link",
    "section": "code",
    "content": "---\ndesc: <span>Links</span> are used primarily as a navigational element. Links may also change what or how data is displayed (view more, show all). If the action taken by the user will change or manipulate data, use a button.\ncodepen: YErzrq\n---\n"
  },
  "35": {
    "parent": "components",
    "child": "link",
    "section": "style",
    "content": "## Color\n\n| Attribute    | SCSS          | HEX           |\n|----------|---------------|---------------|\n| Normal   | $brand-01     | #3d70b2       |\n| :hover   | $hover-primary-text    | #294c86       |\n| Disabled | $brand-01     | #3d70b2 @ 50% |\n\n---\n***\n> \n![Example of normal, hover, and disabled link states](images/link-style-1.png)\n\n_Normal, hover disabled Link states_\n\n## Typography\n\nLink text should be set in set in sentence case with the first letter of each word capitalized. Links should not exceed three words.\n\n| Property  | Font-size (px/rem)   | Font-weight |\n|------------|-----------------|--------------|\n| Text       | 14 / 0.875 | Semi-Bold / 600   |\n\n## Structure\n\nLinks can be grouped horizontally or vertically and must be underlined.\n\n| Property             | px | rem  |\n|----------------------|----|------|\n| Line height          | 24 | 1.5  |\n| Horizontal spacing   | 16 | 1    |\n\n---\n***\n> \n![Link structure and spacing measurements ](images/link-style-2.png)\n\n_Structure and spacing measurements for Link | px / rem_\n"
  },
  "36": {
    "parent": "components",
    "child": "link",
    "section": "usage",
    "content": "## Link text\n\n* Use text for links rather than graphics or icons.\n* Links should be three words or less.\n* Text should be consistent with the title of the intended destination.\n* Use caution with links that are several words long. It is recommended that links are long enough to be understood by the user, but short enough to prevent text wrapping.\n* Avoid the term “Click here,” other links to “here,” or the web address itself.\n* Instead, use a meaningful descriptive label for the link, and match the destination site name.\n"
  },
  "37": {
    "parent": "components",
    "child": "list",
    "section": "code",
    "content": "---\ndesc: <span>Lists</span> consist of related content grouped together and organized vertically.\nvariations:\n  list--ordered:\n  - Ordered list\n  list:\n  - Unordered list\ncodepen:\n  list--ordered:\n  - MOEWEP\n  list:\n  - JOrjOj\n---\n"
  },
  "38": {
    "parent": "components",
    "child": "list",
    "section": "style",
    "content": "## Color\n\n| Attribute    | SCSS          | HEX      |\n|----------|---------------|----------|\n| Text     | $text-01      | #152934  |\n\n## Typography\n\nLevel 1 and 2 of any list type should be set in bold and sentence case, with only the first word in a phrase and any proper noun capitalized. **Line height** for lists should be set at 24px / 1.5rem.\n\n| Property | Font-size (px/rem)     | Font-weight  |\n|----------|-----------------|--------------|\n| Level 1  | 14 / 0.875 | Semi-Bold / 600   |\n| Level 2  | 14 / 0.875 | Normal / 400 |\n\n## Structure\n\nThere are two types of Lists, ordered and unordered.\nLevel 1 ordered list points are marked numerically while Level 2 points are marked with a dash.\nLevel 1 unordered list points are bulleted while Level 2 points are marked with a dash.\n\n| Property             | px | rem  |\n|----------------------|----|------|\n| External spacing     | 16 | 1    |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Structure and spacing measurements for ordered and unordered lists](images/list-style-1.png)\n  </div>\n  <div>\n    ![Example of ordered list](images/list-style-2.png)\n  </div>\n</div>\n_Structure and spacing measurements for an ordered and an unordered List | px / rem_\n"
  },
  "39": {
    "parent": "components",
    "child": "list",
    "section": "usage",
    "content": "## General guidelines\n\n| List type       | Purpose                                                                            |\n|-----------------|------------------------------------------------------------------------------------|\n| Unordered Lists | To present content of equal status or value.                                       |\n| Ordered Lists   | Imply sequence and order, and are commonly used when giving a set of instructions. |\n\n### Length\n\nGenerally, Lists should be used to present simple pieces of information. For more complex sets of data, consider using a [Data Table.](/components/data-table)\n\n### Order\n\nArrange List items in a logical way. For example, if the List is about resource use, the default order might be highest resource use to lowest. Grouping items in categories into smaller, more specific lists might be more meaningful in some contexts. Alternatively, organize in alphabetical or numeric order.\n\n### Text\n\nUse List items that are grammatically parallel. For example, do not mix passive voice with active voice or declarative sentences (statements) with imperative sentences (direct command).\n\n---\n***\n> \n![list example](images/list-usage-1.png)\n"
  },
  "40": {
    "parent": "components",
    "child": "loading",
    "section": "code",
    "content": "---\ndesc: <span>Loading</span> spinners are used when retrieving data or performing slow computations, and help to notify users that loading is underway.\nvariations:\n  loading:\n  - Loading\n  loading--small:\n  - Small Loading\ncodepen:\n  loading:\n  - XzebrR\n  loading--small:\n  - Xzebbg\n---\n"
  },
  "41": {
    "parent": "components",
    "child": "loading",
    "section": "style",
    "content": "## Color\n\n| Attribute              | SCSS          | HEX      |\n|--------------------|---------------|----------|\n| Large spinner      | $nav-05       | #00b4a0  |\n| Small spinner      | $ui-05        | #5a6872 |\n| Overlay            | $ui-01 @ 60%  | #ffffff  |\n\n## Structure\n\n| Property             | px | rem  |\n|----------------------|----|------|\n| Large spinner        | 84 | 5.25 |\n| Small spinner        | 16 | 1    |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Large spinner structure measurements](images/loading-style-1.png)\n  </div>\n  <div>\n    ![Small spinner structure measurements](images/loading-style-2.png)\n  </div>\n</div>\n_Structure measurements for small and large loading spinner | px / rem_\n\n### Placement\n\nThe large Loading spinner should appear centered over a page or content that it is loading. Please note that the top-level navigation is not included in the page loading overlay.\n\n_\n![Large spinner in context example](images/loading-style-4.png)\n_\n\n_Example of a large loading spinner in product context_\n"
  },
  "42": {
    "parent": "components",
    "child": "loading",
    "section": "usage",
    "content": "## General guidelines\n\nThe waiting experience is a crucial design opportunity. Although it may not be obvious what is occurring on the back-end, we can communicate clearly to reassure the user that progress is happening.\n\nIt is best practice to use a loading spinner whenever the wait time is anticipated to be longer than three seconds.\n\nAdopted from the <a href=\"https://www.ibm.com/design/language/experience/animation/elements/\" target=blank>IBM Design Language Animation Library:</a>\n\n> “The rhythmic oscillations of tape reels in motion got us thinking about a user’s waiting experience. If a user watches search results load, showing the machine at work relays a sense of efficiency. The swift and even balance of the spinning circles indicates that progress is being made.”\n\n![Small loader](images/loading.gif)\n\n## Size\n\nLoading spinners may be scaled down if the loading experience is contextual to a certain item on the page.\n\n---\n***\n> \n![Small loader](images/loading-usage-2.png)\n"
  },
  "43": {
    "parent": "components",
    "child": "modal",
    "section": "code",
    "content": "---\ndesc: <span>Modals</span> communicate information via a secondary window and allow the user to maintain the context of a particular task. Use Modals sparingly because they interrupt user workflow.\nvariations:\n  modal--nofooter:\n  - Passive Modal\n  modal:\n  - Transactional Modal\n  modal--danger:\n  - Danger Modal\ncodepen:\n  modal--nofooter:\n  - KyXpKV\n  modal:\n  - dZVoPj\n  modal--danger:\n  - erwbeb\n---\n"
  },
  "44": {
    "parent": "components",
    "child": "modal",
    "section": "style",
    "content": "## Color\n\n| Attribute      | SCSS     | HEX       |\n|------------|--------- |-----------|\n| Background | $ui-01   | #ffffff   |\n| Border-top | $brand-01| #3d70b2   |\n| Text       | $text-01 | #152935   |\n| Title      | $text-02 | #5a6872  |\n| X icon     | $ui-05   | #5a6872   |\n| Footer     | $ui-02   | #f4f7fb   |\n| Page overlay  | $ui-03  | #dfe3e6 @ 50% opacity  |\n\n## Typography\n\nModal labels are optional and should be set in all caps when used. Modal titles should be set in sentence case and should not exceed three words. Important directions or information in the Modal text can be bold, otherwise it should be in roman.\n\n| Property | Font-size (px/rem)     | Font-weight | Type style |\n|----------|-----------------|--------------|---|\n| Optional label    | 14 / 0.875  | Semi-Bold / 600   | Zeta |\n| Heading    | 28 / 1.75 | Light / 300 | Beta |\n| Text     | 16 / 1 | Normal / 400 |- |\n\n## Layer\n\n| Layer      | Elevation     | Box-shadow      |\n|------------|----------|----------|\n| Pop-out    | 24       | `0 12px 24px 0 rgba(0,0,0,0.10);`  |\n\n## Structure\n\n| Property                  | px | rem     |\n|---------------------------|----|---------|\n| Top border                | 5  | 0.313    |\n| X icon                    | 12 | 0.75   |\n| Footer: height            | 88 | 5.5    |\n| Spacing: internal (L,R,B) | 48 | 3       |\n| Spacing: top              | 44 | 2.75    |\n| Spacing: title & text     | 24 | 1.5     |\n| Spacing: text to footer   | 48 | 3       |\n\n![Structure and spacing measurements for Passive Modal](images/modal-style-1.png)\n_Structure and spacing measurements for a Passive Modal | px / rem_\n![Structure and spacing measurements for Transactional Modal elements](images/modal-style-2.png)\n_Structure and spacing measurements for a Transactional Modal | px / rem_\n\n## Mobile\n\nModals should be full screen on mobile.\n\n---\n***\n> \n![Modal on mobile](images/modal-style-3.png)\n\n_Example of a Modal on a mobile screen_\n"
  },
  "45": {
    "parent": "components",
    "child": "modal",
    "section": "usage",
    "content": "## Dismissal\n\nModals may be dismissed in 3 ways:\n\n* Using the “x” in the upper right-hand corner of the Modal\n* Pressing the `ESC` key\n* Clicking / touching outside of the Modal area\n\n## Structure\n\n### Header\n\nInclude a heading within the Modal that mirrors the action or button that was clicked by the user. Headers include a close button “x” in the upper right-hand corner of the Modal.\n\n### Body\n\nThe body content within a Modal should be as minimal as possible. Components that may be used in Modals include: Form fields, Text Area, Select, and Radio Buttons.\n\n### Footer\n\nThe footer area of a Modal typically contains a set of buttons. Refer to [Button](/components/button) guidelines for usage.\n\n## Usage\n\n### Transactional Modal\n\nTransactional Modals are used to validate user decisions or to gain secondary confirmation from the user. Typically, the Modal requests either a 'yes' or 'no' response.\n\n![transactional modal](images/modal-usage-1.png)\n\n### Passive Modal\n\nThis Modal is used as a style of notifications. We highly discourage the use of this, due to its disruptive nature. Passive Modal notifications should only appear if there is an action the user needs to address immediately. Passive Modal notifications are persistent on-screen. That is, they do not automatically go away after appearing. Users must either engage with or dismiss the notification.\n\n![Passive modal](images/modal-usage-3.png)\n\n### Input Modal\n\nModals used in this case include input areas that the user may interact with. These may include but are not limited to Forms, Dropdowns, Selectors, and Links.\n\n![input modal](images/modal-usage-2.png)\n"
  },
  "46": {
    "parent": "components",
    "child": "notification",
    "section": "code",
    "content": "---\ndesc: <span>Notifications</span> are messages that communicate information to the user.\nvariations:\n  inline-notification:\n  - Inline notification\n  toast-notification:\n  - Toast notification\ncodepen:\n  inline-notification:\n  - EbwjVb\n  toast-notification:\n  - mqBJeo\n---\n"
  },
  "47": {
    "parent": "components",
    "child": "notification",
    "section": "style",
    "content": "## Color\n\n| Attribute         | SCSS        | HEX     |\n|---------------|-------------|---------|\n| Background: Toast    | $ui-01      | #ffffff |\n| Error         | $support-01 | #e0182d |\n| Success       | $support-02 | #5aa700 |\n| Warning       | $support-03 | #efc100 |\n| Informational | $support-04 | #5aaafa |\n| Title         | $text-01    | #152935 |\n| Text          | $text-02    | #5a6872 |\n| X icon        | $ui-05      | #5a6872 |\n\n## Typography\n\nNotification titles should not exceed more than three words. Notification text should be set in sentence case with only the first word capitalized.\n\n| Property | Font-size (px/rem)      | Font-weight  | Type style |\n|----------|-----------------|--------------|----|\n| Title    | 14 / 0.875 | Semi-Bold / 600   | Zeta\n| Text     | 14 / 0.875 | Normal / 400 | - |\n\n## Structure\n\n### Toast Notification\n\n| Property           | px  | rem    |\n|--------------------|-----|--------|\n| Height             | varies based on content  | 5      |\n| Width              | 270 | 16.875 |\n| Spacing: external  | 8   | 0.5      |\n| Spacing: left, top, right | 16  | 1      |\n| Spacing: text      | 16  | 1      |\n\n![Structure and spacing for a toast notification](images/notification-style-1.png)\n_Structure and spacing measurements for a Toast Notification | px / rem_\n\n### Inline Notification\n\nThe width of an Inline Notification will vary based on content.\n\n| Property          | px | rem  |\n|-------------------|----|------|\n| Height: one-line  | 40 | 2.5  |\n| Height: two lines | 56 | 3.5  |\n| Icon              | 16 | 1    |\n| X icon            | 12 | 0.750 |\n| Border            | 1  | -    |\n| Border-left       | 5  | -    |\n| Spacing: icons    | 16 | 1    |\n| Spacing: top, bottom | 12 | 0.75|\n\n![Structure and spacing for an inline notification](images/notification-style-2.png)\n_Structure and spacing measurements for a Inline Notification | px / rem_\n"
  },
  "48": {
    "parent": "components",
    "child": "notification",
    "section": "usage",
    "content": "## Format\n\n### Title\n\nAll notifications have subject titles, which should be short and descriptive. Example: **“Tester-app-02 has crashed.”**\n\n### Message\n\nWe recommend the body of the Notification be contained within two lines. Be descriptive and include any troubleshooting actions or next steps. When possible, communicate the main message using just the title. You can include [Links](/components/link) within the Notification body that redirect the user to next steps.\n\n### Dismissal\n\nWe recommend that Toast Notifications automatically disappear after five seconds. Inline Notifications are persistent until the user dismisses them. All notifications have at least one method of dismissal (typically, it is a small “x” in the upper right hand corner).\n\n### Icons\n\nIcons may provide additional clarity. Icons should be placed to the left of a title. These glyphs (16x16) can be found in the [iconography](/style/iconography/library) library.\n\n---\n***\n> \n![notification icons](images/notification-usage-1.png)\n\n## Placement\n\n### Toast Notifications\n\nToast Notifications slide in and out a page from the top-right corner. Actionable notifications do not appear on mobile screen widths.\n\n![toast notifications](images/notification-usage-2.png)\n\n### Inline Notifications\n\nInline Notifications appear near its related item. In [Forms](/components/form), we recommend placing the Inline Notification at the bottom of the Form, right before the submission buttons. Depending on the context of the page, Inline Notifications can appear above the content as well.\n\n![inline notification](images/notification-usage-3.png)\n"
  },
  "49": {
    "parent": "components",
    "child": "number-input",
    "section": "code",
    "content": "---\ndesc: <span>Number inputs</span> are similar to text inputs, but contain controls used to increase or decrease an incremental value.\ncodepen: Xzebda\n---\n"
  },
  "50": {
    "parent": "components",
    "child": "number-input",
    "section": "style",
    "content": "## Color\n\nInputs come in two different colors. The default input color is `$field-01` and is used on `$ui-01` page backgrounds. The light version input color is `$field-02` and is used on `$ui-02` page backgrounds.\n\n| Attribute                | SCSS      | HEX           |\n|----------------------|-----------|---------------|\n| Background: default | $field-01     | #f4f7fb |\n| Background: light | $field-02     | #ffffff |\n| Label: enabled           | $text-01   | #152934   |\n| Label: focused           | $brand-01  | #3d70b2   |\n| Label: error             | $support-01 | #e0182d |\n| Text: number | $text-01  | #152935       |\n| Text: error message      | $support-01        | #e0182d   |\n| Caret                | $brand-01 | #3d70b2       |\n| Border bottom: enabled | $ui-05 | #5a6872 |\n| Border bottom: focused | $brand-01 | #3d70b2 |\n| Border bottom: error | $support-01 | #e0182d |\n\n![Number Input example in $field-01 and $field-02](images/number-input-style-2.png)\n_Number Input example in $field-02 (left) and $field-01 (right)_\n\n## Typography\n\nNumber Input labels should use sentence case, with only the first word in a phrase and any proper nouns capitalized.\n\n| Property  | Font-size (px/rem)      | Font-weight  | Type style |\n|------------|-----------------|--------------|----|\n| Label       | 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Text        | 14 / 0.875 | Normal / 400   | - |\n| Text: error message | 12 / 0.75 | Normal / 400 | - |\n\n## Structure\n\nThe height of a Number Input is always the same. The width however, varies based on content, layout and design. The caret icon can be found in the [iconography](/style/iconography/library) library.\n\n| Property         | px | rem |\n|------------------|----|-----|\n| Height           | 40 | 2.5 |\n| Internal spacing | 16 | 1   |\n| Border bottom: enabled | 1 | 0.0625rem |\n| Border bottom: focused | 2 | 0.125 |\n\n\n---\n***\n> \n![Structure and spacing for number input](images/number-input-style-1.png)\n\n_Structure and spacing measurements for a Number Input | px / rem_\n\n### States\n\n**Active:** Number input should have a default number to start. The input should never be empty.\n\n**Help text:** Help text appears below the label when the input is active. Help text remains visible while the input is focused and disappears after focus away.\n\n**Error:** Error messages appear below the input field and are always present while invalid.\n\n**Disabled:** Disabled state appears at 50% opacity and has a `.not-allowed` cursor on hover.\n\n"
  },
  "51": {
    "parent": "components",
    "child": "number-input",
    "section": "usage",
    "content": "## General guidelines\n\n* Do not use Number Inputs when large value changes are expected. They work best for making small, incremental changes that only require a few clicks.\n* Enable the user to also choose to type a number in the field.\n* Ensure that a default value is shown within the field.\n* Use a clear and concise label for the Number Input.\n* Use sentence-style capitalization (only the first word in a phrase and any proper nouns capitalized) for the label.\n* See further guidance for using number labels within [Forms.](/components/form/usage)\n\n---\n***\n> \n![number input example](images/number-input-usage-1.png)\n"
  },
  "52": {
    "parent": "components",
    "child": "overflow-menu",
    "section": "code",
    "content": "---\ndesc: <span>Overflow menu</span> is used when additional options are available to the user and there is a space constraint.\ncodepen: MOEwjp\n---\n"
  },
  "53": {
    "parent": "components",
    "child": "overflow-menu",
    "section": "style",
    "content": "## Color\n\n| Attribute          | SCSS        | HEX     |\n|----------------|-------------|---------|\n| Icon           | $ui-05      | #5a6872 |\n| Background     | $ui-01      | #ffffff |\n| Text           | $text-01    | #152935 |\n| Icon:hover    | $hover-secondary   | #3d70b2 |\n| Row:hover    | $hover-row | #5596e6 at 10% opacity |\n| Warning:hover | $hover-danger | #bd1427 |\n| Line           | $ui-04      | #8897a2 |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Overflow menu text hover example](images/overflow-menu-style-1.png)\n  </div>\n  <div>\n    ![Overflow menu warning hover example](images/overflow-menu-style-2.png)\n  </div>\n</div>\n_Text and warning hover examples for Overflow Menu_\n\n## Typography\n\nOverflow Menu text should be set in set in sentence case with the first letter of the first word capitalized.\n\n| Property | Font-size (px/rem)    | Font-weight |\n|------------|-----------------|--------------|\n| Text      | 14 / 0.875 | Normal / 400 |\n\n## Layer\n\n| Layer      | Elevation     | Box-shadow      |\n|------------|----------|----------|\n| Overlay    | 8        | `0 4px 8px 0 rgba(0,0,0,0.10);`  |\n\n## Structure\n\nThe height of an Overflow Menu is determined by the amount of content in the menu. The Overflow Menu icon can be found in the [iconography](/style/iconography/library) library.\n\n| Property             | px                      | rem   |\n|----------------------|-------------------------|-------|\n| Width                | 180                     | 11.25 |\n| Height               | Varies based on content |       |\n| Divider line         | 1                       | -     |\n| Internal spacing     | 16                      | 1     |\n| Spacing: icon & menu | 8                       | 0.5   |\n\n---\n***\n> \n![Structure and spacing measurements for an overflow menu](images/overflow-menu-style-3.png)\n\n_Structure and spacing measurements for Overflow Menu | px / rem_\n"
  },
  "54": {
    "parent": "components",
    "child": "overflow-menu",
    "section": "usage",
    "content": "## General guidelines\n\n### Text\n\nThe text within an Overflow Menu should be direct so users can quickly decide on an action. Actions that could cause a significant change to the user's data (Delete app, Delete service, etc.) is separated by a horizontal rule and live below the primary set of actions.\n\n---\n***\n> \n![Overflow menu example](images/overflow-menu-usage-1.png)\n\n### Positioning\n\nDepending on where the Overflow Menu appears within the UI, the caret or arrow may be left or right aligned so the Overflow Menu is clearly visible.\n\n---\n***\n> \n![Right aligned overflow menu](images/overflow-menu-usage-2.png)\n_Right-aligned Overflow Menu_\n\n---\n***\n> \n![Left aligned overflow menu](images/overflow-menu-usage-3.png)\n_Left-aligned Overflow Menu_\n"
  },
  "55": {
    "parent": "components",
    "child": "pagination",
    "section": "code",
    "content": "---\ndesc: <span>Pagination</span> is used for splitting up content or data into several pages, with a control for navigating to the next or previous page.\nvariations:\n  pagination--v2:\n  - Pagination\ncodepen:\n  pagination--v2:\n  - MOEwbp\n---\n"
  },
  "56": {
    "parent": "components",
    "child": "pagination",
    "section": "style",
    "content": "## Color\n\n| Attribute          | SCSS    | HEX         |\n|----------------|---------|-------------|\n| Background     | $ui-01  | #ffffff     |\n| Text           | $text-02| #5a6872     |\n| Border         | $ui-04  | #8897a2     |\n| Chevron        | $ui-05  | #5a6872     |\n| Chevron: disabled | $ui-05 @ 50%  | #5a6872 |\n| Chevron:hover  | $hover-secondary  | #3d70b2    |\n| Caret          | $brand-01  | #3d70b2    |\n\n## Typography\n\nPagination text should be set in set in sentence case with the first letter of each word capitalized.\n\n| Property       | Font-size (px/rem)     | Font-weight |\n|------------------|-----------------|--------------|\n| Secondary text   | 12 / 0.75  | Normal / 400 |\n\n## Structure\n\nThe Pagination bar is most commonly used in [Data Tables](/components/data-table). The width can vary depending on content and layout, but should span the entire width of the table it's being paired with. The size of the chevron is 8px by 12px.\n\n| Property                           | px        | rem   |\n|------------------------------------|-----------|-------|\n| Height                             | 40      | 2.5   |\n| Width                              | Varies based on content and layout | |\n| Border                             | 1         | -     |\n| Internal spacing: left             | 24        | 1.5   |\n| Spacing between elements           | 16        | 1     |\n\n![Structure and spacing for pagination](images/pagination-style-1.png)\n_Structure and spacing measurements for Pagination | px / rem_\n"
  },
  "57": {
    "parent": "components",
    "child": "pagination",
    "section": "usage",
    "content": "## Usage\n\nGenerally, Pagination is used if there are more than 25 items displayed in one view. The default number displayed will vary depending on the context.\n\n## Best practices\n\n### Identify the current page\n\nClearly identify which page the user is on my displaying the current page number. By providing context into how many pages there are in total (eg. 1 of 4 pages), you can help provide clarity around the data displayed.\n\n### Provide various options for navigating\n\n**Previous** and **next** chevrons or links are the most useful way for the user to move forward or backward through pages of data. Provide a [Inline select](/components/select) in which users can choose the page they wish to navigate to.\n\n---\n***\n> \n![Pagination example](images/pagination-usage-1.png)\n\n### Items per page\n\nUse an Inline select within the Pagination bar so the user can change the amount of data displayed per page.\n\n---\n***\n> \n![Pagination with small select](images/pagination-usage-2.png)\n"
  },
  "58": {
    "parent": "components",
    "child": "progress-indicator",
    "section": "code",
    "content": "---\ndesc: <span>Progress Indicator</span> is a visual representation of a users progress through a set of steps. They guide the user through a number of steps in order to complete a specified process.\ncodepen: jaGPyr\n---\n"
  },
  "59": {
    "parent": "components",
    "child": "progress-indicator",
    "section": "style",
    "content": "## Color\n\nAll steps that have already been completed are indicated by an outlined circle with a checkmark. The current step the user is on is indicated by a filled circle. Steps the user has not encountered yet, or future steps, are indicated by an outlined circle.\n\n| Attribute                       | SCSS      | HEX     |\n|---------------------------------|---------  |---------|\n| Label: current & completed      | $brand-01 | #3d70b2 |\n| Label: future step              | $text-02  | #5a6872 |\n| Line: current & completed       | $brand-01 | #3d70b2 |\n| Line: future step               | $ui-05    | #5a6872 |\n| Icon: current & completed       | $brand-01 | #3d70b2 |\n| Icon: future step               | $ui-05    | #5a6872 |\n\n---\n***\n> \n![Examples of current, completed, and future steps for Progress Indicator](images/progress-indicator-style-1.png)\n\n_Examples of current, completed, and future steps for Progress Indicator_\n\n## Typography\n\nLabels should be one to two words only, with a limit of 16 characters total per label. All labels should be set in sentence case.\n\n| Property                 | Font-size (px/rem)    | Font-weight  | Type style |\n|--------------------------|-----------------|--------------|--|\n| Current & completed step| 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Future steps | 14 / 0.875 | Normal / 400 | - |\n\n## Structure\n\nThe checkmark icon can be found in the [iconography](/style/iconography/library) library.\n\n| Property                 | px  | rem   |\n|--------------------------|-----|-------|\n| Circle                   | 24  | 1.5   |\n| Line weight              | 2   | -     |\n| Line length (minimum)    | 112 | 7     |\n| Spacing: steps (minimum) | 48  | 3     |\n| Spacing: icon & label    | 8   | 0.5   |\n| Spacing: icons external  | 16  | 1     |\n\n\n![Structure and spacing for Progress Indicator](images/progress-indicator-style-2.png)\n_Structure and spacing measurements for Progress Indicator | px / rem_\n"
  },
  "60": {
    "parent": "components",
    "child": "progress-indicator",
    "section": "usage",
    "content": "## General guidelines\n\nUse Progress Indicators to keep the user on track when completing a specific task. By dividing the end goal into smaller, sub-tasks, it increases the percentage of completeness as each task is completed.\n\n## Best practices\n\n### Logical progression\n\nDisplay the steps in order from left to right. Indicate to the user that they are performing a multi-step process, and show the direction of movement. Allow the user to return to a previous step to review their data submission.\n\n### Indicate the current step\n\nKeeping the user informed of where they currently are within the process or task at hand will give them a sense of control. This helps the user to know where they are in relation to where they have been, and what sections are to follow. Clear labels should accompany the Progress Indicator to indicate what the user will accomplish within each step. Keep labels between one to two words.\n\n### Validation\n\nUse validation to confirm that a previous step has been completed. If the user cannot proceed onto another step without first completing a task, use an [Inline Notification](/components/notification) to inform them.\n\n![Progress Indicator example](images/progress-indicator-usage-1.png)\n_In-context Progress Indicator_\n"
  },
  "61": {
    "parent": "components",
    "child": "radio-button",
    "section": "code",
    "content": "---\ndesc: <span>Radio buttons</span> are used when a list of two or more options are mutually exclusive, meaning the user must select only one option.\ncodepen: YErXNB\n---\n"
  },
  "62": {
    "parent": "components",
    "child": "radio-button",
    "section": "style",
    "content": "## Color\n\n| Attribute               | SCSS      | HEX       |\n|---------------------|-----------|-----------|\n| Non-selected border | $ui-05    | #5a6872   |\n| Selected            | $brand-01 | #3d70b2   |\n\n## Typography\n\nRadio Button labels and headings should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized.\n\n| Property | Font-size (px/rem)   | Font-weight  | Type style |\n|----------|-----------------|--------------|--|\n| Heading  | 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Label    | 14 / 0.875 | Normal / 400 | - |\n\n## Structure\n\n| Property                     | px | rem  |\n|------------------------------|----|-------|\n| Button height & width        | 18 | 1.125 |\n| Selected dot: height & width | 8  | 0.5   |\n| External spacing             | 16 | 1     |\n| Spacing: between options     | 16 | 1     |\n| Spacing: label & button      | 8  | 0.5   |\n\n---\n***\n> \n![Structure and spacing measurements for a radio button](images/radio-button-style-1.png)\n\n_Structure and spacing measurements for Radio Button | px | rem_\n"
  },
  "63": {
    "parent": "components",
    "child": "radio-button",
    "section": "usage",
    "content": "\n## General guidelines\n\n### Headings\n\nIf necessary, a heading can accompany a set of Radio Buttons to provide further clarity for the user. Use sentence-style capitalization (only the first word in a phrase and any proper nouns capitalized).\n\n### Labels\n\nAlways use a clear and concise label for Radio Buttons. Be explicit about the action that will follow if the Radio Button is selected. Labels appear to the right of Radio Buttons. Use sentence-style capitalization (only the first word in a phrase and any proper nouns capitalized) and no more than three words.\n\n### Default selection\n\nA set of Radio Buttons should default to having one option selected. Never display them without a default selection.\n"
  },
  "64": {
    "parent": "components",
    "child": "search",
    "section": "code",
    "content": "---\ndesc: <span>Search</span> enables users to specify a word or a phrase to find particular relevant pieces of content without the use of navigation. Search can be used as the primary means of discovering content, or as a filter to aid the user in finding content.\nvariations:\n  search--small:\n  - Small search\n  search--large:\n  - Large search\ncodepen:\n  search--small:\n  - rYGVmG\n  search--large:\n  - ooGXVR\n---\n"
  },
  "65": {
    "parent": "components",
    "child": "search",
    "section": "style",
    "content": "## Color\n\nInputs come in two different colors. The default input color is `$field-01` and is used on `$ui-01` page backgrounds. The light version input color is `$field-02` and is used on `$ui-02` page backgrounds.\n\n| Attribute             | SCSS          | HEX      |\n|-------------------|---------------|-----------|\n| Background: default | $field-01     | #f4f7fb |\n| Background: light   | $field-02     | #ffffff |\n| Text: user input  | $text-01      | #152935  |\n| Text: placeholder | $text-03      | #cdd1d4  |\n| Icon              | $ui-05        | #5a6872  |\n| Border: focus    | $brand-01     | #3d70b2 |\n\n\n![Example of Search using $field-01 and $field-02](images/search-style-4.png)\n_Example of Search using $field-02 (top) and $field-01 (bottom)_\n\n![Normal, hover, and input search states](images/search-style-1.png)\n_Examples of normal, hover, and input Search states_\n\n## Typography\n\nSearch text should be set in sentence case, with only the first letter of the first word capitalized.\n\n| Property        | Font-size    | Font-weight       |  Type style |\n|------------------|-----------------|---------------------|\n| Placeholder text | 14 / 0.875 | Normal italic / 400 | - |\n| Text             | 14 / 0.875 | Semi-Bold / 600          | Zeta\n\n## Structure\n\nThe width of the Search field should appropriately fit the design and layout of content. Larger Search fields can include a filter button and a list/card view button.\n\n| Property             | px | rem   |\n|----------------------|----|-------|\n| Height: regular      | 44 | 2.75  |\n| Height: small        | 32 | 2     |\n| Icon: search         | 20 | 1.25  |\n| Icon: small search   | 16 | 1     |\n| Spacing: search icon | 8  | 0.5 |\n| Spacing: small search icon | 12 | 0.75  |\n\n![Structure and spacing measurements for regular search](images/search-style-2.png)\n_Structure and spacing measurements for Regular Search | px | rem_\n![Structure and spacing measurements for small search](images/search-style-3.png)\n_Structure and spacing measurements for Small Search | px | rem_\n"
  },
  "66": {
    "parent": "components",
    "child": "search",
    "section": "usage",
    "content": "## General guidelines\n\n### Search variations\n\n**Large Search** should be used at a global level, when the user is searching content within a page view.\n\n**Small Search** can be used when there are space constraints in your design. It can also be component specific. For example, Small Search can be used to filter data within a [Data Table](/components/data-table).\n\n![Search on a table](images/search-usage-1.png)\n\n_Small Search to filter table data_\n\n### Search fields\n\nSet users' context for the search with helpful placeholder text within the search field (Search Docs), that pertains to the page or section the search box is in. Search in the global header should just say Search.\n\n### Search results\n\n* Clearly show which results are being displayed with labels or headers (i.e. Results for X).\n* Categorize the search results if they come from different areas (eg. docs, services, apps, tutorials, blogs).\n* Give the user control over their viewing options and ability to sort results (eg. relevancy, popularity, ratings, date).\n* Have a clear, “No results,” message and offer suggestions if possible.\n* Have smart algorithms that can search for similar terms or can search even with misspelled words.\n* Include enough of a description in the results for users to make a judgement as to whether that particular result is relevant.\n* Highlight the search term in the results, where appropriate.\n"
  },
  "67": {
    "parent": "components",
    "child": "select",
    "section": "code",
    "content": "---\ndesc: <span>Select</span> is a type of input that is used in forms, where a user is submitting data and chooses one option from a list.\nvariations:\n  select:\n  - Select\n  select--inline:\n  - Inline Select\n  select--light:\n  - Light Select\ncodepen:\n  select:\n  - QOqbPg\n  select--inline:\n  - YErXbK\n---\n"
  },
  "68": {
    "parent": "components",
    "child": "select",
    "section": "style",
    "content": "## Color\n\nInputs come in two different colors. The default input color is `$field-01` and is used on `$ui-01` page backgrounds. The light version input color is `$field-02` and is used on `$ui-02` page backgrounds.\n\n| Attribute             | SCSS          | HEX      |\n|-------------------|---------------|-----------|\n| Background: default | $field-01     | #f4f7fb |\n| Background: light | $field-02     | #ffffff |\n| Label: enabled    | $text-01      | #152934   |\n| Label: focused    | $brand-01     | #3d70b2   |\n| Label: error      | $support-01   | #e0182d |\n| Label: inline select  | $text-01      | #152934  |\n| Caret             | $brand-01     | #3d70b2   |\n| Text: input       | $text-01      | #152935   |\n| Text: inline select | $brand-01     | #3d70b2   |\n| Text: placeholder | $text-03      | #cdd1d4   |\n| Text: error message      | $support-01        | #e0182d   |\n\n![Default and new selection state examples for Select](images/select-style-1.png)\n_Examples of default and new selection Select states in $field-02 (right) and $field-01 (left)_\n\n## Typography\n\nSelect text should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized. Select text should be three words or less.\n\n| Property | Font-size       | Font-weight  | Type style |\n|----------|-----------------|--------------|---|\n| Label    | 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Label: inline select    | 14 / 0.875 |  Normal / 400   | - |\n| Text: input     | 14 / 0.875 | Normal / 400 | - |\n| Text: inline select     | 14 / 0.875 | Semi-Bold / 600 | Zeta |\n| Text: error message | 12 / 0.75 | Normal / 400 | - |\n\n## Structure\n\n| Property                    | px | rem   |\n|-----------------------------|----|-------|\n| Height                      | 40 | 2.5   |\n| Spacing: Label & field      | 8  | 0.5 |\n| Internal spacing            | 16 | 1     |\n| Groupings: vertical         | 32 | 2     |\n| Groupings: horizontal       | 16 | 1     |\n| Border bottom: enabled      | 1 | 0.0625rem |\n| Border bottom: focused      | 2 | 0.125 |\n\n![Structure and spacing measurements for Select](images/select-style-2.png)\n_Structure and spacing measurements for Select | px / rem_\n\n### States\n\n**Open:** Select menu styles are determined by browser. Each browser has a unique style. Shown in the example images is the Chrome select style.\n\n**Help text:** Help text appears below the label when the input is active. Help text remains visible while the input is focused and disappears after focus away.\n\n**Error:** Error messages appear below the input field and are always present while invalid.\n\n**Disabled:** Disabled state has a `.not-allowed` cursor hover and appears at 50% opacity.\n\n---\n***\n> \n![Open, disabled, and more information/help state examples for Select](images/select-style-3.png)\n\n_Examples of open, disabled, and help Select states_\n\n### Small Select\n\n| Property                    | px | rem   |\n|-----------------------------|----|-------|\n| Height                      | 24 | 1.5   |\n| Width                       | 56 | 3.5   |\n| Internal spacing            | 8  | 0.5    |\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Structure and spacing measurements for Small Select](images/select-style-4.png)\n  </div>\n  <div>\n    ![Structure and spacing measurements for Small Select](images/select-style-5.png)\n  </div>\n</div>\n_Structure and spacing measurements for Small Select | px / rem_\n\n_Examples of open and disabled Small Select states_\n\n\n\n### Inline select\n\n| Property                    | px | rem   |\n|-----------------------------|----|-------|\n| Height                      | 32 | 2     |\n| Internal spacing            | 10  | 0.625    |\n\n\n---\n***\n> \n![Structure and spacing measurements for Inline Select](images/select-style-6.png)\n\n_Structure and spacing measurements for Inline Select (on hover) | px / rem_\n\n### States\n\n**Open:** Style determined by browser\n\n**Help text:** Help text appears below the label when the input is active. Help text remains visible while the input is focused and disappears after focus away.\n\n**Error:** Error messages appear below the input field and are always present while invalid.\n\n**Disabled:** Disabled state has a `.not-allowed` cursor hover and appears at 50% opacity.\n"
  },
  "69": {
    "parent": "components",
    "child": "select",
    "section": "usage",
    "content": "| Select type      | Purpose                                                                                                                                                                                                                                                          |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Default          | Typically used in forms with a variety of other components.                                                                                                                                                                                                                    |\n| Small select        | When vertical space is a concern, or Select is being paired with larger component, such as [Cards](/add-ons/card) or [Data Tables](/components/data-table).                                                                                                                                                                                                                               |\n| Inline select | When multiple selects are grouped together.                                                                                                                          |\n\n### Small select\nSmall selects are commonly used in [Data Tables](/components/data-table). When using a Small select for a number selection, the increments in the select should be 10, 25, 50 and 100. The maximum amount of items a user can see per page is 100.\n\n---\n***\n> \n![example of Small Select in Data Table](images/select-usage-3.png)\n\n_Example of Small Select in Data Table_\n\n### Inline select\nInline select is useful when you have multiple `select` fields within a form. Inline selects have less visual weight on a page, since stylistically they are borderless.\n\n---\n***\n> \n![example of Inline Select](images/select-usage-4.png)\n\n_Example of Inline Select_\n\n<br>\n\n## General guidelines\n\n### Labels\n\nLabels are essential to the usability of forms because they provide guidance to the data a user might provide. Do not place a label inside a Select element. Use sentence case and no more than three words.\n\n### Validation\n\nReal time validation helps to streamline the process and keep data clean when the user is filling out forms. For full guidelines, refer to the [Forms](/components/form) usage page.\n\n---\n***\n> \n![validation on select element](images/select-usage-1.png)\n\n_Validation on Select_\n\n### Order\n\nThe order of the Select list should be based on the frequency of use. If applicable, the list should be in increasing order relative to the content. In cases of Forms, alternative orders such as alphabetical may be more fitting. A horizontal rule can be used to group similar items together.\n\n\n\n## Accessibility\n\n### Styling Select dropdowns\n\nIt is strongly recommended not to style Select dropdowns due to accessibility purposes.\nOne of the <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G202.html\" target=blank>WCAG 2.0 standards</a> for accessibility is “Ensuring keyboard control for all functionality.” CSS alternatives to `select` elements to not meet this requirement.\n\nWhile you can make a Select element easily usable by a mouse, making it usable with keyboard navigation is complex. The default `select` element should follow this process:\n\n|         | Mouse                                    | Keyboard                                            |\n|---------|------------------------------------------|-----------------------------------------------------|\n| :hover  | move your cursor over the select element | use the tab key to focus the select element         |\n| :focus  | click on the select element              | press enter                                         |\n| :       | move your cursor over the desired option | use the top and bottom arrow keys to pick an option |\n| :select | click on the desired option              | press enter                                         |\n"
  },
  "70": {
    "parent": "components",
    "child": "slider",
    "section": "code",
    "content": "---\ndesc: <span>Sliders</span> provide a visual indication of adjustable content, where the user can move the handle along a horizontal track to increase or decrease the value.\ncodepen: dZVoBx\n---\n"
  },
  "71": {
    "parent": "components",
    "child": "slider",
    "section": "style",
    "content": "## Color\n| Attribute                | SCSS      | HEX      |\n|-----------------------|---------  |----------|\n| Handle: fill          | $brand-01 | #3d70b2  |\n| Line: selected        | $brand-01 | #3d70b2  |\n| Line: unselected      | $ui-05    | #5a6872  |\n| Label                 | $text-01  | #152934  |\n| Range values   | $text-02  | #5a6872  |\n\n\n## Typography\nSlider labels should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized, and no more than three words.\n\n| Property \t\t\t   | Font-size (px/rem)       | Font-weight  | Type style |\n|----------------------|-----------------|--------------|--|\n| Label                | 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Range values  | 14 / 0.875 | Normal / 400 | -  |\n\n## Structure\nThe width of a Slider varies based on page content and layout.\n\n| Property          | px | rem   |\n|-------------------|----|-------|\n| Handle            | 24 | 1.5   |\n| Slider line height| 4  | 0.25  |\n| Spacing: Label & slider | 16 | 1   |\n| Spacing: slider & range values | 16 | 1  |\n| Spacing: range value & text input | 16 | 1  |\n| Min-width    | 200 | 12.5 |\n | Max-width  | 640 |  40 |\n\n\n![Structure and spacing measurements for Slider](images/slider-style-1.png)\n\n_Structure and spacing measurements for Slider | px / rem_\n"
  },
  "72": {
    "parent": "components",
    "child": "slider",
    "section": "usage",
    "content": "## Types of Sliders\nThe Slider in its basic form should be accompanied by a label and a number input that can demonstrate the slider input's increase or decrease. The basic slider does **not** include values as the slider represents a percentage of 0-100. In this case it is not necessary for a user to choose a specific value, but instead generally increase or decrease an input. For example, the user increases the Slider amount and the volume of the music gets louder. The more complex versions should be used for selecting a specific value within a value range.\n\n---\n***\n> \n![basic slider example](images/slider-usage-1.png)\n\n_Slider used to change volume_\n\n\n## Interaction\nUsers can choose a numerical value by:\n\n* Entering the exact value into the text field.\n* Moving the Slider handle with their mouse, which automatically updates the value in the Text Input.\n* Using the ↑ ↓ ← → arrow keys automatically updates the value in the Text Input and moves the Slider handle to the corresponding value.\n* The **step size increment** is how many increments the inputted value and Slider handle will jump when using the arrow keys. Make sure to set the step size increments to reasonable values.\n* ↑ ↓ ← → changes the value by one step size increment. (_Example: Pressing `→` changes the inputted value from 59 to 60, increasing the value by 1 unit._)\n* `Shift` + ↑ ↓ ← → changes the value by 10 step size increments. (_Example: Typing `Shift + →` changes the value from 60 to 70, increasing the inputted value by 10 units._)\n\n\n![slider interaction](images/slider-usage-2.gif)\n\n_Example of a Slider interaction_\n\n\n## Best practices\n* The Slider label should indicate what value the Slider is changing.\n* Range values are used to describe the range in numbers.\n* Do not use for ranges that are extremely large _(ex. 1-1000)_.\n* Do not use for ranges that are too small _(ex. 1-3)_.\n"
  },
  "73": {
    "parent": "components",
    "child": "structured-list",
    "section": "code",
    "content": "---\ndesc: <span>Structured Lists</span> group content that is similar or related, such as terms or definitions.\nvariations:\n  structured-list:\n  - Structured List\n  structured-list--selection:\n  - Structured List with selection\ncodepen:\n  structured-list:\n  - BJKxZa\n  structured-list--selection:\n  - qpZYmK\n---\n"
  },
  "74": {
    "parent": "components",
    "child": "structured-list",
    "section": "style",
    "content": "## Color\n| Attribute    | SCSS          | HEX      |\n|----------|---------------|----------|\n| Text     | $text-01      | #152934  |\n| Table header: border-bottom | $brand-01 | #3d70b2 |\n| Optional border | $ui-04 | #8897a2    |\n| Selection list row:hover  | $hover-row | #5596e6 at 10% opacity    |\n| Checkmark icon | $brand-02  | #5596e6    |\n\n\n## Typography\nStructured List headers should be set in all caps, while all other text is set in sentence case. All typography is left aligned. **Line height** for Structured Lists should be set at 18px / 1.25rem.\n\n| Property | Font-size (px/rem)     | Font-weight  | Type style |\n|----------|-----------------|--------------|-- |\n| Column header   | 12 / 0.75 | Semi-Bold / 600   | Omega |\n| Text     | 14 / 0.875 | Normal / 400   | - |\n\n## Structure\nStructured Lists by default are not accompanied by a border, but one may be added for stylistic purposes, and should be set at 1px.  \n\n\n| Property             | px | rem  |\n|----------------------|----|------|\n| Width                | varies based on content and layout |   |\n| Spacing: content-right| 16 | 1    |\n| Spacing: checkmark    | 12 | 0.75 |\n| Row spacing: tall     | 16 | 1    |\n| Row spacing: narrow   | 10 | 0.625|\n| Checkmark glyph       | 16 | 1   |\n\n\n![Spacing and measurements for Structured List](images/structured-list-style-1.png)\n\n_Spacing and measurements for Structured List | px / rem_\n\n\n![Spacing and measurements for Structured List with selection](images/structured-list-style-2.png)\n_Spacing and measurements for Structured List with selection | px / rem_\n"
  },
  "75": {
    "parent": "components",
    "child": "structured-list",
    "section": "usage",
    "content": "## Content\n* Row height varies based on content, and can expand to fit multiple lines.\n* Column widths can either be equally proportional or proportioned based on content.\n* If your list extends past 25 items, consider using a [Data Table](/components/data-table) to present this larger set of content.\n* A maximum of one paragraph of text is recommended.\n* Nesting items is not recommended, as Structured Lists are used to present simple data. If you have additional content that needs to be shown, consider using a [Data Table,](/components/data-table) which supports nesting items.\n\n\n![Structured List](images/structured-list-usage-2.png)\n\n_Structured List to present definitions_\n\n\n## Interaction\nStructured lists can be single-select if a user is choosing between a set of options.\n\n**Guidelines:**\n\n* Only one item can be selected from the list.\n* By default, one option should be selected.\n* If you need to select multiple items, use a [Data Table.](/components/data-table)\n* When the user selects an item from the list, the selected row will appear with the `checkmark--glyph` icon.\n"
  },
  "76": {
    "parent": "components",
    "child": "tabs",
    "section": "code",
    "content": "---\ndesc: <span>Tabs</span> are used to quickly navigate between views within the same context.\ncodepen: QOprdK\n---\n"
  },
  "77": {
    "parent": "components",
    "child": "tabs",
    "section": "style",
    "content": "## Color\n\n| Attribute                       | SCSS      |  HEX    |\n|-----------------------------|-----------|---------|\n| Tab label: selected          | $brand-01 | #3d70b2 |\n| Tab border-bottom: selected | $brand-01 | #3d70b2 |\n| Tab label                    | $text-01  | #152935 |\n| Tab:hover                    | $hover-primary-text | #294c86 |\n\n## Typography\n\nTab label should be set in sentence case, and should not exceed three words.\n\n| Property | Font-size (px/rem)      | Font-weight  | Type style |\n|----------|-----------------|--------------|---|\n| Tab label | 14 / 0.875 | Semi-Bold / 600   | Zeta   |\n\n## Structure\n\n| Property          | px | rem |\n|-------------------|----|-----|\n| Tab border-bottom | 2  | -   |\n| Spacing: tabs     | 48 | 3   |\n| Spacing: bottom   | 16 | 1   |\n\n![Structure and spacing measurements for Tabs](images/tab-style-1.png)\n_Structure and spacing measurements for Tab | px / rem_\n"
  },
  "78": {
    "parent": "components",
    "child": "tabs",
    "section": "usage",
    "content": "## General guidelines\n\n### Text\n\nEach Tab label describes its content and sets user expectations. Labels are concise and use one to two words maximum. Keep in mind that at mobile widths, the character length of a title will impact the experience. Icons are not permitted in Tab labels.\n\n### Number of tabs\n\nA maximum of six tabs may be displayed. This is to maintain an uncluttered UI and reduce cognitive load for users.\n\n### Order\n\nTab order should be consistent across an experience. Tabs with related content should be grouped adjacent to each other.\n\n![tab example](images/tab-usage-1.png)\n"
  },
  "79": {
    "parent": "components",
    "child": "tag",
    "section": "code",
    "content": "---\ndesc: <span>Tags</span> are used for items that need to be labeled, categorized, or organized using keywords that describe them.\ncodepen: GOWdob\n---\n"
  },
  "80": {
    "parent": "components",
    "child": "tag",
    "section": "style",
    "content": "## Typography\n\nTag text should be set in sentence case, and should only have one word. However, if more than one is necessary, then connect the words using a hyphen with no spaces.\n\n| Property | Font-size (px/rem)      | Font-weight  |\n|----------|----------------|--------------|\n| Text     | 12 / 0.75 | Normal / 400 |\n\n## Structure\n\nAll tags have the same height. However, the width of tags varies based on the amount of content. All four corners of a tag are rounded with a 15px radius.\n\n| Property          | px | rem   |\n|-------------------|----|-------|\n| Height            | 20 | 1.25  |\n| Radius            | 15 | 0.938 |\n| Spacing: tags     | 3  | 0.188 |\n| Spacing: internal | 10 | 0.625 |\n\n---\n***\n> ![Structure and spacing measurements](images/tag-style-1.png)\n\n_Structure and spacing measurements for a Tag | px / rem_\n"
  },
  "81": {
    "parent": "components",
    "child": "tag",
    "section": "usage",
    "content": "## General guidelines\n\nMultiple or single tags can be used to categorize items.\n\nUse Tags when content is mapped to multiple categories, and the user needs a way to differentiate between them.\n\n---\n***\n> \n![Tags example](images/tag-usage-1.png)\n\nTags can also be used as a method of filtering data, to show only items within that particular category.\n\n![Tags to filter](images/tag-usage-2.png)\n"
  },
  "82": {
    "parent": "components",
    "child": "text-input",
    "section": "code",
    "content": "---\ndesc: <span>Text inputs</span> enable the user to interact with and input data. Use when the application requires long-form content from the user.\nvariations:\n  text-input:\n    - Text Input\n  text-input--light:\n  text-area:\n    - Text Area\ncodepen:\n  text-input:\n  - YEZLyd\n  text-area:\n  - yPMjeg\n---\n"
  },
  "83": {
    "parent": "components",
    "child": "text-input",
    "section": "style",
    "content": "## Color\n\nText inputs come in two different colors. The default input color is `$field-01` and is used on `$ui-01` page backgrounds. The light version input color is `$field-02` and is used on `$ui-02` page backgrounds.\n\n| Attribute             | SCSS          | HEX           |\n|---------------------|---------------|---------------|\n| Background: default | $field-01     | #f4f7fb |\n| Background: light | $field-02     | #ffffff |\n| Border bottom: enabled | $ui-05 | #5a6872 |\n| Border bottom: focused | $brand-01 | #3d70b2 |\n| Border bottom: error | $support-01 | #e0182d |\n| Label: enabled | $text-01      | #152935       |\n| Label: focused| $brand-01 | #3d70b2 |\n| Label: error | $support-01 | #e0182d |\n| Text: user input  | $text-01      | #152935       |\n| Text: placeholder | $text-03      | #cdd1d4       |\n| Text: help | $text-02 | #5a6872 |\n| Text: error message   | $support-01        | #e0182d   |\n\n![Default and user input states for Text Input in both field colors](images/text-input-style-1.png)\n\n_Examples of default and user-input states for Text Input in both $field-02 (left) and $field-01 (right)_\n\n## Typography\n\nText Input labels and placeholder text should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized. Text Input labels should be three words or less.\n\n| Property | Font-size    | Font-weight  | Type style |\n|----------|-----------------|--------------|---|\n| Label    | 14 / 0.875 | Semi-Bold / 600   | Zeta |\n| Text: input     | 14 / 0.875 | Normal / 400 |- |\n| Text: help      | 12 / 0.75  | Normal / 400 |- |\n| Text: error message | 12 / 0.75 | Normal / 400 | - |\n\n## Structure\n\n| Property                    | px | rem   |\n|-----------------------------|----|-------|\n| Height                      | 40 | 2.5   |\n| Spacing: Label & select box | 8  | 0.5   |\n| Spacing: Label & hint text  | 2  | 0.125 |\n| Internal spacing            | 16 | 1     |\n| Groupings: vertical         | 32 | 2     |\n| Groupings: horizontal       | 16 | 1     |\n| Border bottom: enabled      | 1 | 0.0625rem |\n| Border bottom: focused      | 2 | 0.125 |\n\n![Structure and spacing measurements for Text Input](images/text-input-style-2.png)\n_Structure and spacing measurements for Text Input | px / rem_\n\n### States\n\n**Active:** Placeholder text should remain when the user clicks into the text input and gets a cursor. Once the user starts typing the hint text is replaced with the user input text.\n\n**Help text:** Help text appears below the label when the text input is active. Help text remains visible while the input is focused and disappears after focus away.\n\n**Error:** Error messages appear below the input field and are always present while invalid.\n\n**Disabled:** Disabled state appears at 50% opacity and has a `.not-allowed` cursor on hover.\n\n---\n***\n> ![Active, help, error or disabled states for Text Input](images/text-input-style-3.png)\n\n_Examples of active, help, error and disabled Text Input states_\n"
  },
  "84": {
    "parent": "components",
    "child": "text-input",
    "section": "usage",
    "content": "## Usage\n\n| Type       | Purpose                                                                            |\n|-----------------|------------------------------------------------------------------------------------|\n| Text Input | When the input anticipated by the user is a single line of text as opposed to a paragraph.  |\n| Text Area   | When you anticipate the user to input more than one sentence.   |\n\n## General guidelines\n\n### Labels\n\nEffective form labeling helps users understand what information to enter into a Text Input. Using a placeholder text as a label is often applied as a space-saving method. However, this is not recommended because it hides context and presents accessibility issues.\n\n**Accessibility best practices for labels:**\n\n* Labels must be visible when an input gets focus.\n* Labels must be announced to the screen reader on focus.\n* Ensure the helper text that appears under an input is read when an assistive technology user stops at an input using ARIA.\n* Use sentence-style capitalization (only the first word in a phrase and any proper nouns capitalized).\n\n### Placeholder text\n\nPlaceholder text provides hints or examples of what to enter. Placeholder text  disappears after the user begins entering data into the Input and should not contain crucial information. Use sentence-style capitalization, and in most cases, write the text as a direct statement without punctuation.\n\n---\n***\n> \n![Placeholder text example](images/text-input-usage-1.png)\n_Placeholder text example_\n\n### Help text\nHelp text is pertinent information that assists the user in completing a field. Help text is always available when the input is focused and appears underneath the label. Use sentence-style capitalization, and in most cases, write the text as full sentences with punctuation.\n\n---\n***\n> \n![Help text example](images/text-input-usage-3.png)\n_Help text example_\n\n### Help text\nHelp text is pertinent information that assists the user in completing a field. Help text is always available when the input is focused and appears underneath the label. Use sentence-style capitalization, and in most cases, write the text as full sentences with punctuation.\n\n### Default values\n\nWhere possible, add programmatic assistance. Detect and pre-fill inputs to reduce errors and save time. When the software can't determine the value that belongs in an input, use type-ahead to make suggestions. Use sentence-case for default values, detected values, and auto-completion text.\n\n### Validation and errors\n\nReal time validation helps to streamline the process and keep data clean when the user is filling out forms. For full guidelines, refer to the [Forms](/components/form/usage) usage page.\n\n---\n***\n>\u000e\u000e \n![Validation on text field example](images/text-input-usage-2.png)\n_Error example_\n"
  },
  "85": {
    "parent": "components",
    "child": "tile",
    "section": "code",
    "content": "---\ndesc: <span>Tiles</span> are flexible containers that house a variety of content.\nvariations:\n  tile:\n    - Tile\n  tile--clickable:\n    - Clickable Tile\n  tile--selectable:\n    - Selectable Tile\n  tile--expandable:\n    - Expandable Tile\ncodepen:\n  tile:\n  - vWxRxR\n  tile--clickable:\n  - ooZqaq\n  tile--selectable:\n  - NwpYJW\n  tile--expandable:\n  - NwpMqG\n---\n"
  },
  "86": {
    "parent": "components",
    "child": "tile",
    "section": "style",
    "content": "## Color\n| COLOR             | SCSS          | HEX           |\n|-------------------|---------------|---------------|\n| Background        | $ui-01     | #ffffff |\n| Border      | $ui-03      | #dfe3e6      |\n| Border:hover       | $ui-04      | #8897a2       |\n| Border: focus, selected       | $brand-01      | #3d70b2       |\n| Chevron: collapsed  | $brand-01     | #3d70b2      |\n| Chevron: expanded| $ui-05      | #5a6872       |\n| Checkmark| $inverse-01      | #ffffff       |\n\n\n\n\n## Layer\n\n| Layer | Elevation     | Box-shadow  |\n|----------|-----------------|--------------|\n| Raised    | 2 | \t0 1px 2px 0 rgba(0,0,0,0.10);   |\n\n## Structure\n| Property                    | px | rem   |\n|-----------------------------|----|-------|\n| Height: minimum             | 64 | 4   |\n| Width                       | 128 | 8  |\n| Padding: internal           | 16 | 1    |\n\n\n![Structure and spacing measurements for Tile](images/tile-style-3.png)\n_Structure and spacing measurements for Tile | px / rem_\n\n![Structure and spacing measurements for Tile](images/tile-style-2.png)\n_Structure and spacing measurements for Tile | px / rem_\n\n\n### Proportions for grid\n|  | XL 1600-1200 | L 1200-992 | M 992-768  | S 768-576 | XS 576-0 |\n|-----------|----|-------|---|---|---|\n| 100%           |  ✅ | ✅  | ✅  | ✅ | ✅ |\n| 1/2            |   ✅ | ✅  | ✅  | ✅ | ✅ |\n| 2/3            |   ✅ | ✅  | ✅  | ✅ |  |\n| 1/3            |   ✅ | ✅  | ✅  | ✅ |  |\n| 1/4            |   ✅ | ✅  | ✅  | ✅ |  |\n| 1/6            |   ✅ | ✅  |   | |  |\n"
  },
  "87": {
    "parent": "components",
    "child": "tile",
    "section": "usage",
    "content": "## Usage\n\nTiles provide a diverse method for displaying information. The type of content within a Tile can range from informational, to getting started, how-to, and next steps.\n\nCarbon ships a basic Tile structure that responds to the grid. Tiles have no pre-set styles for the content within them. You can customize Tiles to fit your specific use case.\n\nWhen using a call to action (CTA) within a Tile, we recommend using a [Secondary Button](/components/button). Primary Buttons should be reserved for the most important action a user can take on the page.\n\n## Types of Tiles\n\n_All of the images below represent an example of what type of content could be presented within a Tile. These are the styling choices we recommend, but you are free to create your own layout and design within a Tile._\n\n### Read-only\n\nRead-only Tiles are used to display information to the user, such as features or services offered. Read-only Tiles are often seen on marketing pages to promote content. These Tiles can have internal calls-to-action (CTAs), such as a [Button](/components/button) or a [Link](/components/link).\n\n![Read-only tile](images/tile-usage-1.png)\n\n### Clickable\n\nClickable Tiles can be used as navigational items, where the entire Tile is a clickable state, which redirects the user to a new page. Clickable Tiles cannot contain internal CTAs.\n\n![Clickable tile](images/tile-usage-2.png)\n\n### Selectable\n\nSelectable Tiles work like a [Radio Button](/components/radio-button), where the entire Tile is a click target. Selectable Tiles may contain internal CTAs (like links to docs) if the internal CTA is given its own click target. Selectable Tiles work well for presenting options to a user in a structured manner, such as a set of pricing plans.\n\n![Selectable tile](images/tile-usage-3.png)\n\n### Expandable\n\nExpandable Tiles are helpful for hiding/showing larger amounts of content to a user. They can only be stacked in a single column, and cannot live in a row or horizontal grid. When expanded, Tiles push content down the page. Expandable Tiles may contain internal CTAs (like links to docs) if the internal CTA is given its own click target.\n\n![Expadable tile](images/tile-usage-4.png)\n"
  },
  "88": {
    "parent": "components",
    "child": "toggle",
    "section": "code",
    "content": "---\ndesc: <span>Toggle</span> is a control that is used to quickly switch between two possible states.\nvariations:\n  toggle:\n    - Toggle\n  toggle--small:\n    - Small toggle\ncodepen:\n  toggle:\n  - ooZqxw\n  toggle--small:\n  - pagwYV\n---\n"
  },
  "89": {
    "parent": "components",
    "child": "toggle",
    "section": "style",
    "content": "## Color\n\n| Attribute                 | SCSS     | HEX      |\n|-----------------------|----------|----------|\n| Inactive: fill        | $ui-01   | #ffffff  |\n| Inactive: border      | $ui-05   | #5a6872  |\n| Small toggle: inactive | $ui-05 | #5a6872 |\n| Active: fill          | $brand-01| #3d70b2  |\n| Label                 | $text-01 | #152935  |\n| Small toggle: checkmark | $brand-01 | #3d70b2 |\n\n---\n***\n> ![Inactive, inactive hover, and active states for a Toggle](images/toggle-style-1.png)\n\n_Examples of inactive, inactive hover, and active states for a Toggle_\n\n## Typography\n\nToggle labels should be set in sentence case, with only the first word in a phrase and any proper nouns capitalized, and no more than three words.\n\n| Property | Font-size (px/rem)    | Font-weight |\n|----------|-----------------|--------------|\n| Label    | 14 / 0.875 | Normal / 400 |\n\n## Structure\n\n| Property          | px | rem   |\n|-------------------|----|-------|\n| Height & width    | 24 | 1.5   |\n| Circle border     | 2  | 0.125 |\n| Slider line width      | 24 | 1.5   |\n| Spacing: external | 16 | 1     |\n| Spacing: internal | 8  | 0.5   |\n\n---\n***\n> ![Structure and spacing measurements for toggle](images/toggle-style-2.png)\n\n_Structure and spacing measurements for Toggle | px / rem_\n\n\n\n\n### Small toggle\n| Property          | px | rem   |\n|-------------------|----|-------|\n| Height            | 16 | 1     |\n| Width             | 32 | 2     |\n| Width & height: circle | 10 | 0.625 |\n| Spacing: external | 16 | 1     |\n\n\n\n![Structure and spacing measurements for small toggle](images/toggle-style-3.png)\n\n_Structure and spacing measurements for Small Toggle | px / rem_\n"
  },
  "90": {
    "parent": "components",
    "child": "toggle",
    "section": "usage",
    "content": "## General guidelines\n\nToggles are used for binary actions that occur immediately after the user “flips” the Toggle switch. They are commonly used for “On/Off” situations.\n\n---\n***\n> \n![Toggle example](images/toggle-usage-1.png)\n\n### Heading\n\nA heading may accompany a Toggle to further clarify on the action the Toggle will perform.\n\n### Labels\n\nUse labels with a Toggle so the action is clear. Labels should be three words or less and appear on both sides of a Toggle.\n\n### Language\n\nUse adjectives rather than verbs to describe labels and the state of the object affected.\n\n\n## Small toggle\nSmall toggles are more compact in size, therefore they can be used in use cases such as [Data Tables](/components/data-table/code).\n\n![small toggle in a data table](images/toggle-usage-2.png)\n"
  },
  "91": {
    "parent": "components",
    "child": "tooltip",
    "section": "code",
    "content": "---\ndesc: <span>Tooltips</span> provide additional information upon hover or focus. They often contain helper text that is contextual to an element.\nvariations:\n  tooltip:\n  - Tooltip\n  tooltip--icon:\n  - Icon Tooltip\n  tooltip--definition:\n  - Definition Tooltip\ncodepen:\n  tooltip:\n  - pdeLom\n  tooltip--icon:\n  - yENPBq\n  tooltip--definition:\n  - ERjbYz\n---\n"
  },
  "92": {
    "parent": "components",
    "child": "tooltip",
    "section": "style",
    "content": "## Color\n| COLOR              | SCSS      | HEX       |\n|--------------------|-----------|-----------|\n| Icon               | $brand-01 | #3d70b2   |\n| Interactive text    | $text-01  | #152935   |\n| Interactive background | $ui-01    | #ffffff   |\n| Interactive border     | $ui-03    | #dfe3e6   |\n| Definition & Icon text    | $ui-01  | #ffffff   |\n| Definition & Icon background | $inverse-02   | #272d33   |\n\n---\n***\n> \n![Closed and open states for a Tooltip](images/tooltip-style-1.png)\n\n_Example of closed and open states for a Tooltip_\n\n## Typography\nTooltip labels and text should be set in sentence case.\n\n| PROPERTY | FONT-SIZE (px/rem)      | FONT-WEIGHT  |\n|----------|-----------------|--------------|\n| Label    | 16 / 1 | Semi-Bold / 600   |\n| Interactive text     | 14 / 0.875 | Normal / 400 |\n| Definition & Icon text     | 12 / 0.75 | Normal / 400 |\n\n## Layer\n| LAYER      | ELEVATION     | BOX-SHADOW      |\n|------------|----------|----------|\n| Overlay    | 8        | `0 4px 8px 0 rgba(0,0,0,0.10);`  |\n\n\n## Structure\n| PROPERTY                | PX  | REM   |\n|-------------------------|-----|-------|\n| Tooltip: height         | Varies based on content | |\n| Interactive: width      | 240 | 15    |\n| Definition: width       | 176 | 11    |\n| Icon: width             | Varies based on content | |\n| Tooltip icon: width & height | 16  | 1     |\n| Spacing: label & icon   | 8  | 0.5 |\n| Spacing: icon & Interactive aTooltip | 8  | 0.5 |\n| Spacing: dotted line & Definition Tooltip | 4  | 0.25 |\n| Spacing: icon & Icon Tooltip | 2  | 0.125 |\n| Interactive: internal spacing | 16  | 1   |\n| Definition: internal spacing | 8  | 0.5   |\n| Icon: internal spacing | 4  | 0.25   |\n\n---\n***\n> \n![Structure and spacing measurements for an Interactive Tooltip](images/tooltip-style-2.png)\n\n_Structure and spacing measurements for an Interactive Tooltip | px / rem_\n\n---\n***\n> \n![Structure and spacing measurements for a Definition Tooltip](images/tooltip-style-3.png)\n\n_Structure and spacing measurements for a Definition Tooltip | px / rem_\n\n---\n***\n> \n![Structure and spacing measurements for an Icon Tooltip](images/tooltip-style-4.png)\n\n_Structure and spacing measurements for an Icon Tooltip | px / rem_\n\n### Placement\nTooltips should be placed below the Tooltip icon unless it is within the height of the Tooltip box plus 16px / 1rem of the bottom of the page. In that instance, the Tooltip should appear above the icon or defined word. On mobile, Tooltips can only appear below the Tooltip icon.\n\n---\n***\n> \n![Placement examples for a Tooltip](images/tooltip-style-5.png)\n\n_Placement examples for a Tooltip_\n"
  },
  "93": {
    "parent": "components",
    "child": "tooltip",
    "section": "usage",
    "content": "## Usage\n\n### Icon Tooltip\nAn Icon Tooltip is used to clarify the action or name of an interactive icon button. The Tooltip content should only contain one to two words. Icon Tooltips appear on `hover` and `focus`.\n\n---\n***\n> \n![example of an icon tooltip](images/tooltip-usage-1.png)\n\n_Definition tooltip used to define a Form label._\n\n\n### Definition Tooltip\nThe primary purpose of a Definition Tooltip is to provide additional help or define an item or term. Therefore, they should contain read-only text that is kept to a minimum. The use of interactive elements, such as Buttons or Links, is discouraged. Definition Tooltips appear on `hover` and `focus`.\n\n---\n***\n> \n![example of an interactive tooltip](images/tooltip-usage-2.png)\n\n_Definition tooltip used to define a Form label._\n\n\n### Interactive Tooltip\nInteractive Tooltips can contain text and other interactive elements such as a Button or a Link. They appear on mouse `click` and are persistent until intentionally dismissed by clicking outside of the tooltip.\n\n---\n***\n> \n![example of an interactive tooltip](images/tooltip-usage-3.png)\n\n_Example of an Interactive tooltip._\n"
  },
  "94": {
    "parent": "data-vis",
    "child": "bar-graph",
    "section": "code",
    "content": "<h2>Bar Graph</h2>\n<iframe height='500' scrolling='no' title='Bar Graph' src='//codepen.io/team/carbon/embed/OzBKKN/?height=265&theme-id=30962default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/OzBKKN/'>Bar Graph</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<h2>Grouped Bar Graph</h2>\n<iframe height='500' scrolling='no' title='Grouped Bar Graph' src='//codepen.io/team/carbon/embed/QaJYpg/?height=265&theme-id=30962default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/QaJYpg/'>Grouped Bar Graph</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n"
  },
  "95": {
    "parent": "data-vis",
    "child": "bar-graph",
    "section": "style",
    "content": "Refer to the style tab on the [Data Vis overview page](/data-vis/overview/style) for base graph style specifications.\n\n## Structure\nThe height of a bar varies based on the value for that data increment. The width of a bar is calculated based on the width of the graph and the number of bars. In other words, the more bars there are in a graph the thinner the bars will be and vice versa.\n\nA grouped bar graph follows the same width and height rules for a single bar graph data set. Spacing between groups of bar graphs is larger than bars within a group. Maintain a minimum of 2px between bars within a group to meet color contrast standards.\n"
  },
  "96": {
    "parent": "data-vis",
    "child": "bar-graph",
    "section": "usage",
    "content": "## General guidelines\nBar graphs use rectangles or bars to represent quantitative information. Bars makes it easy to identify individual values and compare them as each bar is visually distinct in position, color, and/or length. The width of the bar doesn't hold meaning but its length matches to a quantitive value on its axis. The base of every bar should always start at the value zero, otherwise it's difficult to make relative comparisons between the values. When displaying a time-series, vertical bar graphs are always used to show change over time by placing time on the x-axis so it reads chronologically from left to right.\n\n![Bar Graph example](images/usage-bar-graph.png)\n_Example of a Bar Graph_\n"
  },
  "97": {
    "parent": "data-vis",
    "child": "gauge",
    "section": "code",
    "content": "<iframe height='500' scrolling='no' title='Gauge Graph' src='//codepen.io/team/carbon/embed/wqyPGz/?height=300&theme-id=30962&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/wqyPGz/'>Gauge Graph</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n"
  },
  "98": {
    "parent": "data-vis",
    "child": "gauge",
    "section": "style",
    "content": "## Color\n\n| Color            | SCSS                   | HEX                 |\n|------------------|------------------------|---------------------|\n| Total            | $ui-03                 | #dfe3e6             |\n| Used             | $primary-04            | #00a68f             |\n\n\n\n## Typography\nPlease note the total number should be left aligned with the used number.\n\n| Property            | Font-size (px/rem)       | Font-weight  |\n|---------------------|------------------|--------------|\n| Small gauge: used   | 16 / 1     | Roman / 400  |\n| Small gauge: total  | 12 / 0.75   | Roman / 400  |\n| Medium gauge: used  | 24 / 1.5    | Light / 300  |\n| Medium gauge: total | 14 / 0.875  | Roman / 400  |\n| Large gauge: used   | 30 / 1.5    | Light / 300  |\n| Large gauge: total  | 14 / 0.875  | Roman / 400  |\n\n\n## Structure\n| Property              | px  | rem |\n|-----------------------|-----|-----|\n| Small gauge           | 80  | 5   |\n| Medium gauge          | 120 | 7.5 |\n| Large gauge           | 160 | 10  |\n| Gauge weight          | 8   | 0.5 |\n\n![Structure for Circle Chart in px / rem](images/style-circle-gauge.png)\n_Structure for Circle Chart | px / rem_\n"
  },
  "99": {
    "parent": "data-vis",
    "child": "gauge",
    "section": "usage",
    "content": "## General guidelines\n\nGauge graphs show the part-to-whole relationship of one value compared to its total.\n\n![Example of a Gauge](images/usage-circle-gauge.png)\n\n_Example of a Gauge_\n\nThe gauge starts at 12 o'clock and moves clockwise or counterclockwise depending on its content. When a value is expressing the amount used out of a total, the gauge will start empty and fill in clockwise. In contrast, if a value is showing the amount remaining out of a total, the gauge will start full then empty counterclockwise.\n\n<div class=\"gif\">\n  ![Example of a Gauge](images/usage-gauge-1.gif)\n</div>\n\n_Examples of a Gauge clockwise motion_\n\n<div class=\"gif\">\n  ![Example of a Gauge](images/usage-gauge-2.gif)\n</div>\n\n_Examples of a Gauge counterclockwise motion_\n"
  },
  "100": {
    "parent": "data-vis",
    "child": "line-graph",
    "section": "code",
    "content": "<iframe height='500' scrolling='no' title='Line Graph' src='//codepen.io/team/carbon/embed/brLogb/?height=300&theme-id=30962&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/brLogb/'>Line Graph</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n"
  },
  "101": {
    "parent": "data-vis",
    "child": "line-graph",
    "section": "style",
    "content": "Refer to the style tab on the [Data Vis overview page](/data-vis/overview/style) for base graph style specifications.\n\n## Structure\n| Property              | px | rem |\n|-----------------------|----|-----|\n| Line weight\t\t\t      | 2  |  -  |\n"
  },
  "102": {
    "parent": "data-vis",
    "child": "line-graph",
    "section": "usage",
    "content": "## General guidelines\nLine graphs connect individual data values together to show the continuity from one value to the next, making it a great way to display the shape of values as they change over time. When displaying a time-series, always place time on the x-axis so it reads chronologically from left to right.\n\n![Line Graph example](images/usage-line-graph.png)\n_Example of a Line Graph_\n"
  },
  "103": {
    "parent": "data-vis",
    "child": "overview",
    "section": "colors",
    "content": "## Color usage best practices\n\n### Color order\nFor data visualizations with touching colors (no white space between blocks of color representing data), make sure to use the colors in the order they are shown from left to right (dark to light). For example, if you are comparing three sets of data, the colors `primary-01`, `primary-02`, and `primary-03` are used in that order, respectively.\n\n### One variable\nThe primary palette is always applied to the first data visualization of any given page. When there is only one data set, use the color `primary-04`.\n\n![Example of primary-04 applied to one data set](images/colors-1.png)\n_Example of <code>primary-04</code> applied to one data set_\n\n### Two or more variables\nWhen comparing multiple variables (items listed under a key) in one graph, start by using colors from the primary palette so that each variable has its own assigned color.\n\n![Example of primary theme applied to two+ data sets](images/colors-2.png)\n_Example of primary theme applied to two+ data sets_\n\n### Two or more graphs on a page\nIf there are multiple graphs on a page, the secondary and/or tertiary color palettes may be used. In cases where your first graph only has one data set (using `primary-04` as its color) and your second graph requires multiple data sets, choose from the remaining primary palette colors first. Once the primary palette colors have been exhausted, feel free to move on to another palette.\n\n![Example of two themes applied to two data visualizations](images/colors-3.png)\n_Example of two themes applied to two data visualizations_\n"
  },
  "104": {
    "parent": "data-vis",
    "child": "overview",
    "section": "general",
    "content": "## Graph basics\n\nData visualization should communicate quantitative information in a way that tells a story about data. Graphs express data visually, making it easy to see the general shape of the data to reveal patterns and trends that text or a table alone cannot.\n\nA graph's story displays the relationship between a set of values, two quantitative values or a quantitative and categorical value. For example, if we were to depict cost over time, cost would be the quantitative value and time would be the categorical value. How this set of values changes over time shows the pattern of their relationship.\n\nAn effective visualization provides enough context to show the graph's purpose, whether it is to analyze, communicate, monitor, or plan. Below are basic elements that make up a successful graph.\n\n![Example of base graph with terminology labels](images/general-base-graph.png)\n_Example of base graph with terminology labels_\n\n### Title\nA title describes what the graph is about and is set in title case capitalization. It may state the type of quantitative and categorical relationship the data presents, for example “2017 Account Cost by Month.”\n\n### X & Y Axes\nTypical graphs have two axes, the x-axis that runs horizontally and the y-axis that runs vertically. Together, the axes outline the area where visual information is displayed.\n\n### Axis label\nAn axis label describes the quantitative or categorical value of an axis. For a quantitative label, make sure to include the unit, either in the label name or in parentheses after it. In this case, “Cost in Dollars” is the y-axis label title and “Time” is the x-axis label title.\n\n### Grid lines\nGrid lines are points of reference aligned to data increments that divide the area of a graph into smaller regions, enhancing the ability to notice subtle differences that makes comparing data easier. Grid lines are not required on a graph and can be toggled on as a filter option.\n\n### Data representation\nThe position where a quantitative and categorical value meet is portrayed as either a point, bar, or line.\n\n### Data increments\nKeep the distance between tick marks on the x and y-axis consistently spaced. This provides a predictable reference and limits the likelihood of distorting data. The larger the data range, the more tick marks a graph should contain.\n\nCategorical values should be labeled in logical increments, such as consecutive months. For quantitative values, choose round numbers that fit the given data range and always include an additional increment greater than the dataset. It is also best practice to have a quantitative scale begin at zero to avoid exaggerating value differences.\n\n### Key\nA key explains what the plotted data in a graph represents. We recommend using up to six data sets (and no more) in a key because any more loses the comparative value of graphs. The key is generally located to the right of a graph. However, if the amount of items listed in the key exceeds that space or the span of the graph is limited, place the key below.  \n\n### Tooltips\n\nA tooltip appears when hovering over content in a graph, showing the exact value(s) for that point of intersection of the x and y-axes.\n\n### Empty state\nEmpty states appear when no data is available, which may be due to a number of reasons. When applicable, include a call to action that helps users to get the graph up and running.\n\n### Abbreviations\nAbbreviate labels if spacing is a concern. Follow these conventions across graphs:\n\n***\n| Attribute             | Abbreviations  |\n|-----------------------|--------------- |\n| Days of the week      | Sun, Mon, Tues, Wed, Thu, Fri, Sat |\n| Months                | Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec  |\n| 12 hour time             | 9am, 12pm, 6pm |\n| Numbers               | Describe the unabbreviated number in the axis label and use abbreviated numbers in the data increments. For example, the axis label “Cost in thousands” may have data increments 1K, 1.5K, 2K, etc.|\n| Currency              | For instance, if an axis label uses “Dollars”, the data increment may be $100, $200, $300, etc.\n\n\n## Accessibility\nData visualization presents some of the most challenging accessibility problems on the web. Although there is no one solution for these challenges, here are our recommendations:\n\n1.\nEvery data visualization is accompanied by an alternative data table view.\n\n2.\nUse an accessible color palette. See the [Colors](/data-vis/overview/colors) tab for more information about colors and how to apply them to your use case.\n\n3.\n**Use inline SVG:** SVG 2.0 is currently in a draft state. In the meantime we can make the most of SVG 1.0 by utilizing the “title” and “desc” attributes in combination with ARIA roles and attributes. Below is an example section of code using this technique. To see a full example go to [Describler](http://describler.com/#intro) and select “aria-bar-chart.svg” from the dropdown on the left. Make sure to turn on your sound so you can hear the chart read to you!\n\n```html\n<g id=\"ChartRoot\" role=\"chart\" aria-charttype=\"bar\">\n  <g id=\"dataarea\" role=\"dataset\">\n    <g id=\"datapoint_0\" role=\"datapoint\">\n      <title role=\"datavalue\" aria-labelledby=\"x-Saturday\">8 Hours</title>\n    </g>\n  </g>\n</g>\n```\n\n#### _References_\n\n_“The Visual Display of Quantitative Information” by Edward Tufte_\n\n_“Show Me the Numbers: Designing Tables and Graphs to Enlighten” by Stephen Few_\n\n_“Interactive Data Visualization for the Web, 2nd Edition” by Scott Murray_\n"
  },
  "105": {
    "parent": "data-vis",
    "child": "overview",
    "section": "style",
    "content": "## Color\n| Color            | SCSS                   | HEX                 |\n|------------------|------------------------|---------------------|\n| Graph title      | $text-02               | #5a6872             |\n| Axis labels      | $text-02               | #5a6872             |\n| Grid lines       | $text-02               | #5a6872             |\n| Data Increments  | $text-02               | #5a6872             |\n| Tooltip: text    | $text-02               | #5a6872             |\n\n## Typography\nNote that all axis labels should be set in uppercase.  \n\n| Property    | Font-size (px/rem) |  Font-weight |\n|-------------|--------------------|--------------|\n| Graph title | 20 / 1.25      \t  | Light / 300  |\n| Axis labels | 10 / 0.625         | Bold / 700   |\n| Data increment | 12 / 0.75       | Roman / 400  |\n| Key label   | 16 /1              | Bold / 700   |\n| Key label   | 14 /1              | Roman / 400  |\n\n\n\n## Structure\nTypically graphs should have a height to width ratio of 1:1.5, respectively. This ensures that graphs are always wider than they are tall. Reference the chart below to see how much suggested screen real estate a graph should be covering at different screen sizes.\n\nIf using a a data visualization in a modal, only use tiles that take up 50% or more of the screen.\n\n| Size                | % of Browser viewport |\n|---------------------|-----------------------|\n| XS (<576px)\t\t \t    | 100%                  |   \n| S (576-768px)\t\t    | 100%                  |\n| M (768-992px)\t\t    | 50-100%               |  \n| L (992-1200px)\t\t  | 50-100%               |   \n| XL (1200-1600+px)\t  | 50-100%               |        \n\n| Spacing                 \t\t\t | px | rem   |\n|---------------------------------|----|-------|\n| Title & grid line\t\t\t\t\t | 24 | 1.5   |\n| Base grid line & data increment | 16 | 1     |\n| Data increment & edge of graph  | 16 | 1     |\n| Data increment & label  \t\t\t | 20 | 1.25  |\n| Between: grid lines (minimum)   | 32 | 2     |\n| Between: horizontal data increments (minimum) | 32 | 2  |\n| Key: graph & border line        | 24 | 1.5   |\n| Key: border line & key text     | 24 | 1.5   |\n| Key: key label & data value labels     | 10 | 0.625 |\n| Key: data value labels          | 20 | 1.25 |\n| Key: color swatch and data value label  | 10 | 0.625   |\n\n**\n![Structure and spacing for the base graph](images/style-base-graph.png)\n**\n_Structure and spacing for the base graph | px / rem_\n\n### States\n\nWhen a graph is not yet populated with data or has been filtered down so much that there is no data to display, an empty graph state should be shown. The base graph should be set to 30% opacity and have a message prompting the user to reset filters or another call to action to help get the data up and running.   \n\n**\n![Example of a graph with no data matching the parameters](images/style-empty-graph.png)\n**\n_Example of a graph with no data matching the filter parameters_\n"
  },
  "106": {
    "parent": "data-vis",
    "child": "pie-chart",
    "section": "code",
    "content": "<iframe height='500' scrolling='no' title='Pie Chart' src='//codepen.io/team/carbon/embed/EwxydP/?height=300&theme-id=30962&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/EwxydP/'>Pie Chart</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n"
  },
  "107": {
    "parent": "data-vis",
    "child": "pie-chart",
    "section": "style",
    "content": "## Color\n\nRefer to the style tab on the [Data Vis overview page](/data-vis/overview/style) for base graph style specifications.\n\n| Attribute                       | SCSS     | HEX     |\n|---------------------------------|----------|---------|\n| Data Value\t                    | $text-01 | #152935 |\n| Data Variable\t                  | $text-02 | #5a6872 |\n\n![Pie Chart hover example](images/style-pie-chart-1.png)\n_Example of a Pie Chart section, hovered_\n\n## Typography\n\n| Property                       | Font-size (px/rem) | Font-weight   |\n|--------------------------------|--------------------|---------------|\n| Data Value\t                   | 29/1.8125          | Light / 300   |\n| Data Variable\t                 | 14/0.875           | Normal / 400  |\n\n## Structure\n\n| Property                       | px   | rem   |\n|--------------------------------|------|-------|\n| Height & width\t\t\t           | 192  | 12    |\n| Chart Thickness                | 30   | 1.875 |\n| Spacing: data representations  | 2    | -     |\n\n\n![Pie Chart example](images/style-pie-chart.png)\n_Example of a Pie Chart | px/rem_\n"
  },
  "108": {
    "parent": "data-vis",
    "child": "pie-chart",
    "section": "usage",
    "content": "## General guidelines\n\nPie charts show individual values that make up a whole data set so users can compare the values to each other and see how each value compares to the whole. A common way to express the part-to-whole relationship is to use percentages, with the whole equaling 100% and each of its parts equaling smaller percentages corresponding to its value relative to the whole. Expressing exact values is useful as long as the total is also shown.\n\n<div class=\"gif\">\n  <img src=\"images/usage-pie-chart.gif\" />\n</div>\n\n_Example of a Pie Chart_\n"
  },
  "109": {
    "parent": "data-vis",
    "child": "scatter-plot",
    "section": "code",
    "content": "<iframe height='500' scrolling='no' title='Scatter Plot' src='//codepen.io/team/carbon/embed/yzLJxd/?height=300&theme-id=30962&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/yzLJxd/'>Scatter Plot</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n"
  },
  "110": {
    "parent": "data-vis",
    "child": "scatter-plot",
    "section": "style",
    "content": "Refer to the style tab on the [Data Vis overview page](/data-vis/overview/style) for base graph style specifications.\n\n## Color\n| Color            | Opacity                                    |\n|------------------|--------------------------------------------|\n| Main\t\t\t\t     | 100%                                      |\n| Hover\t\t\t       | 50% of the main data representation color |\n\n\n\n## Structure\n| Property             | px | rem  |\n|----------------------|----|------|\n| Height & width\t\t\t | 8  |  0.5 |\n| Hover height & width | 20 | 1.25 |\n\n\n![Scatter Plot example](images/style-scatter-plot.png)\n_Example of a Scatter Plot_\n"
  },
  "111": {
    "parent": "data-vis",
    "child": "scatter-plot",
    "section": "usage",
    "content": "## General guidelines\nScatter plots are used to determine whether there is a relationship between two sets of quantitative values by showing the linear correlation between them. Users can identify an individual value on the x-axis and see what happens to that value in relation to the y-axis. Taking the graph as a whole, users can see the strength and direction of the correlation. A strong correlation has a tighter grouping of values, whereas a weak correlation has a looser grouping. A positive correlation shows values trending upward from left to right, which is the opposite for a negative correlation where values trend downward from left to right.\n\n![Scatter Plot example](images/usage-scatter-plot.png)\n_Example of a Scatter Plot_\n"
  },
  "112": {
    "parent": "data-vis",
    "child": "tooltip",
    "section": "code",
    "content": "<h2>Single Data Tooltip</h2>\n<iframe height='300' scrolling='no' title='Single Data Tooltip' src='//codepen.io/team/carbon/embed/rJWymp/?height=300&theme-id=30962&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/rJWymp/'>Single Data Tooltip</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<h2>Multiple Data Tooltip</h2>\n<iframe height='300' scrolling='no' title='Multiple Data Tooltip' src='//codepen.io/team/carbon/embed/mXOWaJ/?height=300&theme-id=30962&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/mXOWaJ/'>Multiple Data Tooltip</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>"
  },
  "113": {
    "parent": "data-vis",
    "child": "tooltip",
    "section": "style",
    "content": "## Color\nNote that the color value of top bar of the Small and Medium Tooltips and the side color bars on Large Tooltip vary based on colors chosen for your data. Refer to the style tab on the [Data Vis Overview page](/data-vis/overview/colors) for base graph style specifications.\n\n| Color            | SCSS                   | HEX        |\n|------------------|------------------------|------------|\n| Background       | $ui-01                 | #ffffff    |\n| Border           | $ui-04                 | #8897a2    |\n| Quantitative data value label | $text-01  | #152934    |\n| Additional data value label (qualitative) | $text-02  | #5a6872   |\n| Data increment label  | $text-02  | #5a6872  |\n\n## Typography\n| Property         | Font-size (px/rem) |  Font-weight |\n|------------------|--------------------|--------------|\n| Quantitative data value label | 16/1  | Bold / 700   |\n| Additional data value label (qualitative) | 12/0.75   | Roman / 400   |\n| Data increment label  | 14/0.875      | Bold / 700   |\n\n## Layer\n| Layer      | Elevation  | Box-shadow                       |\n|------------|------------|----------------------------------|\n| Overlay    | 8          | `0 4px 8px 0 rgba(0,0,0,0.10);`  |\n\n\n## Structure\nThere are three different tooltips types. Refer to the [usage tab](/data-vis/tooltip/usage) for when to use which tooltip size.\n\n### Small Tooltip\nWidth varies based on content length.\n\n| Size                | px    |  rem   |\n|---------------------|-------|--------|\n| Height\t\t\t\t      |  26   | 1.625  |\n| Padding: Internal   |  10   | 0.625  |\n\n---\n***\n> \n![Example of a Small Tooltip](images/style-tooltip-1.png)\n\n_Example of a Small Tooltip_\n\n### Medium Tooltip\nWidth varies based on content length.\n\n| Size                | px    |  rem   |\n|---------------------|-------|--------|\n| Height\t\t\t\t  |  42   | 2.625  |\n| Padding: internal   |  10   | 0.625  |  \n| Color bar           |  4    | -      |\n| Maximum label width |  120  | 7.5    |  \n\n\n---\n***\n> \n![Example of a Medium Tooltip](images/style-tooltip-2.png)\n\n_Example of a Medium Tooltip_\n\n### Large Tooltip\nWidth varies based on content length.\n\n| Size                | px    |  rem   |\n|---------------------|-------|--------|\n| Height\t\t\t\t      | 188   | 11.75  |\n| Padding: internal   |  16   | 1      |  \n| Padding: data sets (vertically) |  20    | 1.25  |\n| Padding: data sets (horizontally)  |  16   | 1   |\n| Padding: color bar & data labels   |  10   | 0.625 |\n| Color bar           | 4     | -      |\n| Maximum label width |  120  | 7.5    |  \n\n\n---\n***\n> \n![Example of a Large Tooltip](images/style-tooltip-3.png)\n\n_Example of a Large Tooltip_\n\n## Tooltip responsiveness\nThe below images show how a Tooltip would respond to different amounts of data values. It also shows how the width of Tooltip changes when a label is at its max-width.\n\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Example of a tooltip with 3 data values](images/style-tooltip-4.png)\n  </div>\n  <div>\n    ![Example of a tooltip with 4 data values](images/style-tooltip-5.png)\n  </div>\n  <div>\n    ![Example of a tooltip with 4 data values](images/style-tooltip-6.png)\n  </div>\n  <div>\n    ![Example of a tooltip with 5 data values](images/style-tooltip-3.png)\n  </div>\n</div>\n\n_Examples of Tooltip responsiveness for different data value amounts_\n\n<div data-insert-component=\"ImageGrid\">\n  <div>\n    ![Example of max-width labels, one column](images/style-tooltip-7.png)\n  </div>\n  <div>\n    ![Example of max-width labels, one column](images/style-tooltip-8.png)\n  </div>\n</div>\n\n_Example of max-width labels, one column, and two-column Tooltips_\n"
  },
  "114": {
    "parent": "data-vis",
    "child": "tooltip",
    "section": "usage",
    "content": "## General Guidelines\n\nThere are three different types of Tooltips: Small, Medium, and Large. Tooltips appear above or below a data representation depending on the use case. The quantitative value on the Tooltip corresponds to the numerical value that the data representation is depicting. Choose the type of Tooltip that is the best fit for your data set based on the descriptions below.\n\n#### Small Tooltip\n\nUse the Small Tooltip when there is one data set. Since only one set of data is being shown, the label and color border are not necessary.\n\n![In context example of a Small Tooltip](images/usage-small-tooltip.png)\n_In context example of a Small Tooltip_\n\n\n#### Medium Tooltip\nThe Medium Tooltip is used in scenarios where two or more sets of data are being compared. The top border color on the Tooltip should match the color of the data it is representing, as shown in the key. The label can either be referring to the corresponding name in the key or the intersecting data increment on the x-axis. Whichever you choose, make sure the labels are consistent across all Tooltips.\n\n![In context example of a Medium Tooltip](images/usage-medium-tooltip.png)\n_In context example of a Medium Tooltip_\n\n#### Large Tooltip\nThe Large Tooltip is used when there are multiple data sets represented in a particular data increment. For example, a Line Graph may have several lines passing through one data increment or increment range. All of these data points need to be shown in the Tooltip on hover. The top label describes the data increment being shown while additional labels correspond to the name of the data value in the key. The left side border's color should match the color of the data it is representing, as shown in the key.\n\n![In context example of a Medium Tooltip](images/usage-large-tooltip.png)\n_In context example of a Large Tooltip_\n"
  },
  "115": {
    "parent": "getting-started",
    "child": "FAQ",
    "section": "FAQ",
    "content": "### What is the Carbon Design System?\n\nCarbon is the design system for IBM Cloud products. It is a series of individual styles, components, and guidelines used for creating unified UI.\n\n### Who works on the Carbon Design System?\n\nCarbon has a [core team](https://github.com/orgs/carbon-design-system/people) of designers and front-end developers that are dedicated to developing and supporting the system. Our core team sits in the IBM Design Studio in Austin, Texas. There are also countless other designers and developers who also contribute back to [carbon-components](https://github.com/carbon-design-system/carbon-components#contributors) and [carbon-react](https://github.com/carbon-design-system/carbon-components-react#contributors).\n\n### How can I contribute and/or propose new components/ideas?\n\nWe have guidelines for contributing back to [Carbon Components](https://github.com/carbon-design-system/carbon-components/blob/master/docs/contributing.md) and the [Carbon Design assets](/getting-started/contributing). We appreciate you helping out and contributing back.\n\n### Which browsers are supported?\n\nCarbon components is supported in the following browsers:\n\n* IE11\n* IE Edge latest\n* Firefox latest\n* Chrome latest\n* Safari latest\n\n### What language are the components written in?\n\nThere are two different implementations of the Carbon Design System. One is a Vanilla.js library; that's written in ES6+, SCSS, and HTML and ships deliverables in vanilla javascript in ES5 as well as ES6, CSS, SCSS, and HTML. The other is a React library, that ships a React rewrite of the javascript, but uses the same CSS as the core library.\n\nThere is also an unofficial, internal-only [Angular library](https://pages.github.ibm.com/adaniel/angular-carbon-components/) for Carbon Components that was built out by a team other than Carbon. Please note that we **do not** maintain this repo.\n\n### I see a bug, how do I report it?\n\nPlease open an issue in the appropriate [GitHub repo](https://github.com/carbon-design-system). We will address the bug as soon as we can. If you have a fix for the bug please feel free to submit a PR for it.\n\n### Why hasn't my bug been fixed yet?\n\nIf you have a pressing bug or change it is best to make PR for the issue yourself. Our team works in sprints and will try to address your bug as soon as possible, usually by the following sprint. Issues that are out of scope will be closed until it becomes a higher priority.\n\n### I haven't updated to the latest version of Carbon yet, but I still need the old documentation. Is there a place I can find it?\n\nEvery version of Carbon that is still supported is hosted at its own domain. You can find the old **[V6](http://v6.carbondesignsystem.com/)** and **[V7](http://v7.carbondesignsystem.com/)** sites here.\n\n### Where do I go if I've read everything and still have an issue/question?\n\nIf you still have questions or can't find the answer you are looking for feel free to reach out in one of the following ways:\n\n**General inquiries**\n\nEmail: carbon@us.ibm.com </br>\nTwitter: <a href=\"https://twitter.com/_carbondesign\" target=\"_blank\">@\\_carbondesign</a>\n\n**Slack channels (IBM internal only)**\n\nFor design questions: #carbon-design-system </br>\nFor developer questions: #carbon-components, #carbon-react\n\n**GitHub repos**\n\nOpen an issue in one of our <a href=\"https://github.com/carbon-design-system\">GitHub repos</a>. Please choose the appropriate repo for your request.\n\n## Featured\n\n<div data-insert-component=\"FeaturedTiles\"></div>\n\n## Articles\n\n<div data-insert-component=\"ArticleTiles\"></div>\n"
  },
  "116": {
    "parent": "getting-started",
    "child": "contributing",
    "section": "contributing",
    "content": "**_Welcome!_ The Carbon team is committed to maintaining consistent, quality guidelines. We welcome all feedback, designs, or ideas in order to produce the best possible experience for our users.**\n\nThe guidelines below are primarily for **design contributions**. You can also read our guidelines for [contributing code](https://github.com/carbon-design-system/carbon-components/blob/master/docs/contributing.md). If you have any questions, reach out to us at carbon@us.ibm.com.\n<br> <br>\n\n## Contribution model & process\n\n### 1. Submit an issue\n\nThe easiest way for us to get an understanding of your needs is to open an issue. Follow our issue template (you'll see this when you go to open a new issue) to ensure you are meeting the issue writing requirements. Screenshots are required when submitting a new pattern or component. A member of the Carbon team will respond to your issue with next steps or a follow up.\n\n**Not sure where to open an issue?**\n\nThe [carbon-design-kit repo](https://github.com/carbon-design-system/carbon-design-kit) is for Sketch bugs, as well as feedback on the Design Kit and component design.\n\nThe [design-system-website repo](https://github.com/carbon-design-system/design-system-website) is for Carbon website specific feedback or bugs.\n\n**Not sure how to submit an issue?**\n\nIt's not so bad, we promise! You can read a [tutorial](https://help.github.com/articles/creating-an-issue/) on GitHub to get familiar with best practices.\n\n### 2. Design review and sync\n\nThe easiest way to move forward in the design process is to set up an in-person or remote call with the Carbon team to go over your design work. We'll provide you with feedback on your proposal and what, if any, changes are needed before bringing them into Carbon.\n\n_Please make sure you have run through these design guidelines prior to the initial design review meeting. The Carbon team will be looking for a few major things:_\n\n#### Accessible\n\n* Is your design [WCAG AA](https://www.w3.org/WAI/WCAG20/quickref/) accessible?\n* Does your design pass [color contrast](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) ratio?\n* Have you considered [keyboard tabbing](/guidelines/accessibility) and focus states?\n\n#### Componentized\n\nMost components we accept into the global library need to work universally across products.\n\n* Have you tested this design for multiple use cases? It needs to be a pattern that all teams can utilize, and global enough to fit use cases for other teams.\n* Is there a similar component in the library that already exists?\n* What are the advantages of this pattern over alternative patterns?\n\n#### Visual style and UX patterns\n\n* Is your design consistent with our default visual style we have established for the core Carbon library?\n* Do your interaction patterns (hover, focus, motion) match Carbon styles?\n* Does your design follow basic UX best practices?\n* Does your design promote clear language, correct grammar, and support globalization?\n\n<hr>\n\n### 3. Roadmap\n\nWe'll work with your team to determine when your design will be implemented into Carbon, and the logisitics behind it. Development resources are greatly appreciated and welcomed. If your pattern is submitted without any code, please keep in mind it may be delayed from getting released into the Carbon component library until we can fit it into our team sprint schedule.\n"
  },
  "117": {
    "parent": "getting-started",
    "child": "designers",
    "section": "designers",
    "content": "**The _Carbon Design Kit_ is a living, breathing document that contains all of our visual assets (components, iconography, color palettes, grids, etc).**\n\n## Setup\n\n### 1. Download the Kit\n\nGo to the <a href=\"https://github.com/carbon-design-system/carbon-design-kit\" target=blank> Carbon Design Kit</a> repo and click on the latest version of the Design Kit. Click the “View Raw” link to begin downloading the kit.\n\n![Download the Carbon Design Kit](images/designers-2.png)\n\n### 2. Open the Design Kit in Sketch\n\n#### Why Sketch?\n\n<a href=\"https://www.sketchapp.com/\" target=blank>Sketch</a> is the industry standard design tool for UI design.\n\nYou can purchase a license for $99/year. If you donʼt have a license for Sketch, you may sign up for a 30-day free trial. Sketch is easy to learn, and they offer many [tutorials](https://medium.com/sketch-app-sources/helpful-guide-to-getting-started-with-sketch-ecab4b5738bb) for further learning.\n\n![Carbon Design Kit](images/designers-3.png)\n\n### 3. Using the Design Kit\n\nThe Design Kit contains core visual styles, components, color swatches, iconography, and templates. It also has a collection of symbols and text styles for rapid design and layout prototyping. Each is designated its own page, which may be accessed via the left side panel.\n\n![Carbon Design Kit](images/designers-4.png)\n\n## Releases\n\nThe Carbon Design System team often makes improvements to the Design Kit. We track all release updates in our <a href=\"https://github.com/carbon-design-system/carbon-design-kit/releases\" target=blank>change log</a>, so check back frequently!\n"
  },
  "118": {
    "parent": "getting-started",
    "child": "developers",
    "section": "developers",
    "content": "**The _Carbon Component Library_ provides front-end developers & engineers a collection of reusable HTML and SCSS partials to build websites and user interfaces. Adopting the library enables developers to use consistent markup, styles, and behavior in prototype and production work.**\n\n## Install\n\nUsing npm:\n\n```sh\n$ npm install --save carbon-components\n```\n\n## What's included\n\n```js\ncarbon-components/\n├── html\n├── css\n│   ├── carbon-components.css\n│   └── carbon-components.min.css\n├── scripts\n│   ├── carbon-components.js\n│   └── carbon-components.min.js\n├── scss\n│   └── modal\n│       └── _modal.scss\n├── umd\n│   └── index.js\n├── es\n│   └── index.js\n└── src\n```\n\n## CDN\n\nUse unpkg for easy access to our built static files. This is great for prototyping and trying `carbon-components` without installing anything.\n\n|     | URL                                                                  |\n|-----|----------------------------------------------------------------------|\n| CSS | https://unpkg.com/carbon-components/css/carbon-components.min.css    |\n| ES5 | https://unpkg.com/carbon-components/scripts/carbon-components.min.js |\n| UMD | https://unpkg.com/carbon-components/umd/index.js                     |\n\nSee all files from `carbon-components` available on [unpkg CDN](https://unpkg.com/carbon-components/). \n\n## SCSS\n\nUsing the Carbon Sass files infers usage of the SCSS pre-processor.\nAll Sass files use the `*.scss` file extension.\n\n### Things to know\n\nIf you're starting a new project without a boilerplate,\nyou need to know about a few things to get started.\n\n**Autoprefixer**: Make sure your build process uses [autoprefixer](https://github.com/postcss/autoprefixer) to ensure vendor prefixes are automatically added to your output CSS.\n\n**Default body styles**: CSS is automatically applied to `<body>` element, which comes from [_css--body.scss](https://github.com/carbon-design-system/carbon-components/blob/master/src/globals/scss/_css--body.scss). These styles are meant to cascade down to everything in `<body>` to set common styles shared across all components.\n\n```css\nbody {\n  @include reset;\n  font-family: 'ibm-plex-sans';\n  color: $text-01;\n  background-color: $ui-02;\n  line-height: 1;\n}\n```\n\n**Icons**: A lot of components depend on SVG icons from [carbon-icons](https://github.com/carbon-design-system/carbon-icons). Read the [docs](https://github.com/carbon-design-system/carbon-icons/blob/master/docs/usage.md) for details on how to use them.\n\n**Global SCSS variables**: These variables are used to configure which parts of the SCSS get compiled, where each variable controls a SCSS file of the same name. All variables are set to `true` by default, except for `_css--font-face.scss`\n\nFor example:\n\n- When you set `$css--reset: true`, then the contents of [_css--reset.scss](https://github.com/carbon-design-system/carbon-components/blob/master/src/globals/scss/_css--reset.scss) will be part of your output CSS.\n- When you set `$css--reset: false`, then nothing gets included from that SCSS file.\n- When the variable is not declared at all, then nothing gets included from that SCSS file.\n\nThe same rules apply to all the following variables:\n\n```scss\n// In styles.scss:\n// These are the default settings.\n$css--font-face: false !default;\n$css--helpers: true !default;\n$css--body: true !default;\n$css--use-layer: true !default;\n$css--reset: true !default;\n$css--typography: true !default;\n```\n\nThese flags are set for you by default when you `@import` the `styles.scss` file.\nYou can override these default settings by redeclaring the variables.\n\n#### Importing SCSS files\n\nTo add a component style to your build, simply import the component directly.\n\n```js\n@import 'node_modules/carbon-components/scss/components/card/card';\n```\n\nImporting a component this way will bring in any dependencies that component has as well. The import system removes duplicate dependencies, so shared dependencies between components will not create extra CSS.\n\n#### Namespacing\n\nCarbon Components are built to be included individually and not clobber global styles - all `class` attributes are prefixed by the `bx--` moniker.\n\n## Javascript\n\nCarbon Component has component JavaScript classes, each of which correspond to a component found in [our components page](../../components/overview). The first steps to work with component JavaScript classes are the following:\n\n1. [Getting component class reference](#1-getting-component-javascript-class-reference)\n2. [Instantiating component class on DOM nodes](#2-instantiating-component-class-on-dom-nodes)\n\n### 1. Getting component JavaScript class reference\n\n#### Using a module bundler: recommended\n\nWe recommend using ECMAScript module along with your module bundler toolchain to do so. Using a module bundler will bring in only the component code your application needs, creating an optimized build for production. Carbon Components ships with a ECMAScript module build as well as UMD build for each component,  for use with webpack or rollup.\n\nAfter you've installed the components through `npm`, you can grab a component JavaScript class reference by something like this:\n\n```js\nimport { Modal } from 'carbon-components'\n```\n\n#### Using pre-built bundle\n\nUsers can also opt to use the pre-built `carbon-components.js` file directly, like below. We recommend that most users do _not_ use this file, as it includes components your application may or may not actually be using.\n\n```html\n<html>\n  <body>\n    <!-- Put HTML snippets of components here... -->\n    <script src=\"node_modules/carbon-components/scripts/carbon-components.min.js\"></script>\n  </body>\n</html>\n```\n\nOnce you load `carbon-components.js` via `<script>` tag, you can grab a component JavaScript class reference by something like this:\n\n```js\nvar Modal = CarbonComponents.Modal;\n```\n\n**Note**: By default, pre-built bundle automatically instantiates all components on the page when `DOMContentLoaded` event on the page fires. In case you don't want that behavior, you can set `CarbonComponents.settings.disableAutoInit = true` right after `carbon-components.js` is loaded.\n\n**Caveat**: Don't use pre-built `carbon-components.js` if you are importing components via ECMAScript module syntax. Doing so will cause Carbon code loaded twice, often competing each other.\n\n### 2. Instantiating component class on DOM nodes\n\nOnce you have a [component JavaScript class reference](#1-getting-component-javascript-class-reference), you can instantiate it on a DOM node with the `.create()` API.\n\nFor example, if you have the following HTML for modal:\n\n```html\n<div data-modal id=\"modal-nofooter\" class=\"bx--modal\" tabindex=\"-1\">\n  <div class=\"bx--modal-container\">\n    ...\n  </div>\n</div>\n```\n\nYou can create and get the instance by:\n\n```js\nconst modalElement = document.getElementById('modal-nofooter');\nconst modalInstance = Modal.create(modalElement);\n```\n\n**Note**: The DOM element to instantiate components on typically has a `data-componentname` attribute, e.g. `data-modal` for modal.\n\nInstantiating a component basically does two things:\n\n* Hooks several event handlers on some DOM elements inside (in above example, ones in `modalElement`, e.g. close button)\n* Allows you to access public methods (found in [our components page](../../components/overview), e.g. [here](http://localhost:3000/components/modal/code#public-methods) for modal) via the instance reference (`modalInstance.show()`, etc. in above example)\n\n#### Higher-level component instantiation API\n\nWhile `.create()` API gives you the full control of component instantiation, there is a higher-level API for instantiating components, which is, `.init(rootElement)`. It instantiates all components with `data-componentname` attribute (e.g. `data-modal` for modal) inside the given `rootElement`. If `rootElement` is omitted, `document` is used.\n\n**Note**: `.init()` API does *not* take care of DOM elements that hasn't been available at the time it's called.\nIf the JavaScript framework you are using creates DOM elements dynamically,\nfollow the instructions in [the next section](#wrapping-a-component-with-javascript-framework-of-your-choice) instead of using `.init()`.\n\n#### Wrapping a component with JavaScript framework of your choice\n\nMany JavaScript frameworks have a mechanism to dynamically create/destroy DOM elements, for example, upon change in array.\nThis often makes it unclear when the DOM element to instantiate Carbon component on is available, which often depends on the JavaScript framework you use.\n\nAlso when DOM elements that Carbon components have been instantiated on are being destroyed, the Carbon component instances should be released so that e.g. there are no zombie event handlers.\n\nThe easiest way to hook on the creation/destroy of DOM elements is defining a \"wrapping component\", with the JavaScript framework of your choice. Here's an example using Web Components' [Custom Elements v1 spec](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Custom_Elements), but the notion of components, along with the lifecycle callbacks, are commonly found in many other JavaScript frameworks.\n\n```javascript\nclass BXLoading extends HTMLElement {\n  // Called when this custom element gets into render tree\n  connectedCallback() {\n    // \"this\" here is \"<bx-loading>\" element\n    this.innerHTML = '(e.g. snippet from http://carbondesignsystem.com/components/loading/code)';\n    this.loading = CarbonComponents.Loading.create(this.querySelector('[data-loading]'));\n  }\n  // Called when this custom element gets out of render tree\n  disconnectedCallback() {\n    this.loading.release();\n  }\n}\ncustomElements.define('bx-loading', BXLoading);\n```\n\n### Polyfills for older browsers\n\ncarbon-components requires some polyfills for older browsers, in addition to carbon-components.js (or carbon-components.min.js).\nThe latest list of polyfills is maintained in https://github.com/carbon-design-system/carbon-components/blob/master/demo/polyfills/index.js.\nYou can easily find the polyfills in NPM, etc. The current list is below:\n\n* [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n* [`Math.sign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign)\n* [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n* [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent)\n* [`Element#closest()`](https://developer.mozilla.org/es/docs/Web/API/Element/closest)\n* [`Element#matches()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)\n* [2nd arg of `Element.classList.toggle()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Methods)\n"
  },
  "119": {
    "parent": "guidelines",
    "child": "accessibility",
    "section": "color",
    "content": "**WCAG guidelines contain recommendations for making the web accessible to users with disabilities, including color blindness or low vision.**\n\n## Introduction\nWeb and software experiences should be accessible for everyone, regardless of a person's abilities or impairments. Visual impairments can range in severity, from low vision, to color blindness, to complete blindness. The Carbon team has done extensive research and testing to ensure each component was designed with accessibility as our top priority.\n\n## Color contrast\nThere are different levels of compliance for WCAG, ranging from A to AAA. **Carbon meets AA standards across our entire system.**\n\nAA requirements state that:\n\n* Text and images of text must have a contrast ratio of at least **4.5:1**. An exception is large text (at least 24px / 19px semi-bold) which must have a contrast ratio of **3:1.**\n* UI components: Visual information used to indicate states and boundaries of UI components must have a contrast ratio of **3:1** against adjacent colors.\n\n\nYou can read more and view the entire guidelines for [WCAG 2.1](https://www.w3.org/TR/WCAG21/) on their website.\n\nTo view best practices for using color in Data Visualization, view the [Data Vis color](/data-vis/overview/colors) page.\n\n## Color blindness\nColor blindness involves difficulty in perceiving or distinguishing between colors, as well as sensitivity to color brightness. It affects approximately 1 in 12 men and 1 in 200 women worldwide.\n\n| Type | Color deficiency |\n|------| ----------------|\n| Protanopia | Red/green |\n| Tritanopia | Blue      |\n| Deuteranopia | Green   |\n| Monochromacy | All colors |  \n\n### Designing for color blindness\nWhen designing color palettes, it's always good to run them through a color blind simulator. If you're working in Sketch, we recommend the [Stark](http://www.getstark.co/) plugin.\n\n\n![rainbow palette](images/color-accessibility-1.png)\n_Non-color blind user vs. color blind user_\n\n\n## Low vision\nLow vision can include partial sight in one or both eyes, and range from mild to severe. It affects 246 million people, or about 4% of the world’s population.\n\n| Type | Color deficiency |\n|------| ----------------|\n| Low acuity | Also known as **blurred vision.** Can make text difficult to read, since it would appear fuzzy. |\n| Low contrast sensitivity | The ability to determine fine detail and distinguish one object from another.     |\n| Obstructed visual field | The user's view is partially obstrucuted. Can include central vision and spotty vision.  |\n| Retinitis Pigmentosa | Also known as **tunnel vision**. Obstructed peripheral vision - user is only able to see central elements  |\n\n_[Source: NoCoffee - Visual impairments ](https://accessgarage.wordpress.com/2013/02/09/458/)_\n\n![blurred vision and tunnel vision on Google.com](images/color-accessibility-2.png)\n\n_Low vision disabilities_\n\n### Designing for low vision\nTo get an understanding of the various low vision disabilities, we recommend using the [NoCoffee](https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl) Chrome plugin to preview websites. Low vision users may be using a screen reader to preview your website or experience, so ensure you're following [keyboard guidelines](/guidelines/accessibility/keyboard) to ensure the page is read to the user in a logical order.\n\n\n## Resources\n- [WCAG 2.1 guidelines](https://www.w3.org/TR/WCAG21/)\n- [IBM accessibility quick guidance](http://w3-03.ibm.com/able/devtest/quick/) - (Internal only)\n- [W3C low vision requirements](https://www.w3.org/TR/low-vision-needs/)\n\n## Tools\n- [High Contrast Chrome plugin](https://chrome.google.com/webstore/detail/high-contrast/djcfdncoelnlbldjfhinnjlhdjlikmph/related?hl=en)\n- [Stark Sketch Plugin](http://www.getstark.co/)\n- [NoCoffee vision simulator](https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl)\n"
  },
  "120": {
    "parent": "guidelines",
    "child": "accessibility",
    "section": "keyboard",
    "content": "**Carbon is committed to following and complying with best practices when it comes to accessibility. Each component and element was built following the Web Content Accessibility Guidelines (WCAG) and met the AA standard. Our patterns are perceivable, operable, and understandable to users, even when using a screen reader or other assistive technology.**\n\n## Keyboard accessibility\n\nKeyboard accessibility is important for users who rely on or prefer using a keyboard. Encourage accessibility by providing keyboard functionality to all available content. Common keyboard interactions include using the `Tab` key to select different interactive elements on a page and using the `Enter` key or the Spacebar to activate an in-focus element.\n\n### Focus indicators\n\nThe `tab` key navigates through various interactive elements on a page. A default visual indicator is provided by the web browser in use. The display is an outlined border around the focused element. When an element is in focus, it can be further activated using the keyboard.\n\n### Navigation order\n\nThe order in which interactive elements receive focus is logical and predictable. Create the tab flow hierarchy by using the source code to arrange the keyboard navigation. Begin with the header, followed by the main navigation, then page navigation (from left to right, top to bottom), and end with the footer.\n\nUse natively-accessible elements in navigation to activate links, buttons, and form controls with a keyboard. Reinforce semantic HTML to convey intent and meaning instead of simply defining the look and feel of an element. Enhance with ARIA (Accessible Rich Internet Application) labels when necessary. For additional customization, use `tabindex=“0”` to ensure a navigable element receives a focus indicator.\n\nProvide a “Skip to content” option when there is lengthy navigation so a user may access main content faster. This option is a link that is visually hidden by default and appears when it receives keyboard focus via the `tab` key.\n\n<a href=\"http://webaim.org/techniques/skipnav/\" target=blank>WebAIM</a> recommends the following to enable a “Skip to content” link.\n\n```html\n<body>\n    <a href=\"#maincontent\">Skip to main content</a>\n    ...\n    <main id=\"maincontent>\n        <h1>Heading</h1>\n        <p>This is the first paragraph</p>\n    </main>\n</body>\n```\n\n## Color accessibility\n\nPlease refer to our [usage](/style/colors/usage) section on the Colors page to learn more about color contrast ratios. You can also use this [color contrast](https://marijohannessen.github.io/color-contrast-checker/) tool to ensure your ratios pass WCAG AA standards.\n"
  },
  "121": {
    "parent": "guidelines",
    "child": "content",
    "section": "content-glossary-intro",
    "content": "**This section covers the approved _action labels_ and _idioms_ for use in the Bluemix UI and documentation. Users rely on consistent labels for common actions to predict how to interact with an interface. Idioms are expressions that have a meaning different from the meaning of each word in the expression.**\n\nThis section is a living document. When new terms are introduced, they will be added here. If you're looking for the product glossary, go to <a href=\"https://new-console.ng.bluemix.net/docs/overview/glossary/index.html\" target=blank>Glossary terms for Bluemix.</a>\n"
  },
  "122": {
    "parent": "guidelines",
    "child": "content",
    "section": "general",
    "content": "## Voice & Tone\n\nUsing the appropriate voice and tone allows us to better connect and resonate with our users. Gone are the days when our users perceive their content experience as complex, distant, or disjointed. We've evolved and we now endorse a style that should feel like a conversation between friends – personal, relatable, clear, helpful, and engaging. Conversational style does not mean sloppy writing. It means creating content in a clear, concise way that anyone can understand. It means genuinely connecting with our users.\n\nWhat is the difference between voice and tone? Simply put, we have the same voice all the time, but our tone often changes. Consider this: You have one voice, but you most likely use a certain tone when you are having coffee with friends and a different tone when you are meeting with your boss.\n\n> ![voice](images/content-general-1.png)\n\n**Voice** is the foundation for communicating IBM Cloud products and brand message. Our voice expresses the core of our personality, while bringing comfort, ease, and a sense of connection to our users. Our goal is to empower our users to meet their business goals. Be consistent with voice across the platform.\n\n> ![tone](images/content-general-2.png)\n\n**Tone** conveys your attitude toward what you are writing about and who you are writing to. When you create content – whether it's introductory text on the UI, an error message, or a topic in the docs – you are essentially a storyteller. Good storytellers are experts in two main areas: what they are saying (the important information that the audience needs to know) and how to say it (the experience that they want to create for the audience). Be a good storyteller.\n\n## Conversation levels\n\nHere's how conversational you should be based on the six stages of the user journey:\n\n> **MOST: Discover, Try, Buy content**\n\n---\n“Thanks for joining IBM Bluemix for your free 30-day trial. It's been great having you! Unfortunately, your Bluemix trial account, with IBMid name@domain, is now deactivated because your trial is over. While your account is deactivated, you can't access resources. Don't worry, your apps are not deleted.”\n\n> **MORE: Getting started interface content (for example, welcome), interface content for remaining experiences (Productive Use, Manage and Upgrade, Leverage and Extend, Get Support)**\n\n---\n“To start using Bluemix, name your first organization. Think of an org as a project or team that shares resources, such as apps, databases, and other services. Orgs exist in geographic regions, so decide where you'd like to put your first one.”\n\n> **LESS: Instructional content (steps) for how to complete a task**\n\n---\n“Go to Avatar icon > Account > Notifications to set up general account and spending notifications. Spending notifications are available only for Subscription and Pay-As-You-Go Bluemix account owners.”\n"
  },
  "123": {
    "parent": "guidelines",
    "child": "content",
    "section": "glossary",
    "content": "---\nA:\n  'Common Actions':\n    Add:\n      desc: Adds an existing object to a list, container, or system (for example, adding a document to a folder).\n      subtext: Combine Add with the object (for example, Add user, Add space, Add role, or Add privileges). Contrast with [Insert](#insert) and [New](#new).\n    Apply:\n      desc: Saves changes without closing the dialog. These properties often affect subsequent system behavior.\n      subtext: Use instead of Save Changes. Contrast with [Save](#save) and [Save As](#save-as).\n    Approve:\n      desc: Indicates the user agrees. In a business process, typically initiates the next step.\n      subtext: See [Reject](#reject).\n  'Idioms':\n    a la carte:\n      desc: (adverb) pertaining to separately itemized objects.\n      subtext: \"Context: Bluemix provides pay-as-you-go and subscription based pricing, a-la-carte and bundled services availability.\"\n    app:\n      desc: (noun) a web or mobile device application.\n      subtext: \"Spell as shown, all lower case. In the doc, if for some reason it seems more appropriate to use application, use application for the first instance and then use app. Context: It's easy to delete apps to free up some spaces in Bluemix at any time.\"\nB:\n  'Common Actions':\n    Back:\n      desc: Returns the user to the previous step in a sequence of steps, such as in a wizard.\n      subtext: Use instead of Previous. See [Next](#next) and [Finish](#finish).\n    Browse:\n      desc: Assists the user in entering a file name or file path (for example, on a button or link next to an entry field). Typically opens a secondary window where the user can locate and select the desired directory and file.\n  'Idioms':\n    bestseller:\n      desc: (noun) a significantly successful product or service in the marketplace.\n      subtext: \"Context: Develop software for a cause or your company’s next bestseller.\"\n    bet:\n      desc: (verb) to feel sure about something.\n      subtext: \"Context: We bet you have built some sweet apps by now.\"\n    big savings:\n      desc: (phrase) a significant amount of money saved.\n      subtext: \"Context: You get big savings every month.\"\nC:\n  'Common Actions':\n    Cancel:\n      desc: Stops the current action and closes the dialog.\n      subtext: Warn the user of any possible negative consequences of stopping an action from progressing, such as data corruption. See [Reset](#reset).\n    Clear:\n      desc: This action clears all the fields or selections. Also deletes the contents of a document, such as a log. Typically the default selection or value is re-established for controls that always have a selection or value, such as Radio Buttons.\n      subtext: Where appropriate, combine Clear with the object (for example, Clear contents, Clear fields, Clear all). Contrast with [Delete](#delete) and [Remove](#remove).\n    Close:\n      desc: Closes the current page or window (for example, closing a secondary window containing online help).\n      subtext: Do not use Close together with OK or Cancel actions. Contrast with [Done](#done). See [Cancel](#cancel).\n    Copy:\n      desc: Creates new instances of the selected objects to a specific destination.\n      subtext: Combine Copy with the object being copied (for example, Copy folder) or the destination (for example, Copy to clipboard) if there are multiple possibilities. Use instead of Create like. Contrast with [New](#new).\n    Create:\n      desc: Label for a button in a dialog or form that creates a new object. The settings in the dialog are applied to the object when it is created.\n      subtext: Use [New](#new) to initiate the action of creating a new object. Use Create to confirm the action after any naming or configuration. Contrast with [Add](#add), [Copy](#copy), and [Insert](#insert).\n    Customize:\n      desc: Allow a user to make desired changes.\n      subtext: \n  'Idioms':\n    cold-blooded cyborg:\n      desc: (noun) a man-like robot with no feelings (to cloud its judgment) that flawlessly executes its mandate.\"\n      subtext: \"Context: Create apps with the efficiency of a cold-blooded cyborg.\"\n    congrats:\n      desc: (noun) congratulations.\n      subtext: \"Context: Congrats on creating your new app!\"\n    crash:\n      desc: (noun) the unexpected termination of a software function.\n      subtext: \"Context: Add the Mobile Quality Assurance service to your iOS app to view high value quality metrics, including information for crashes, bugs, user feedback, and user sentiment.\"\n    crash (verb):\n      desc: of software, to unexpectedly terminate.\n      subtext: \"Context: If a service crashes, the app might stop too.\"\nD:\n  'Common Actions':\n    Delete:\n      desc: Destroys an existing object.\n      subtext: Combine Delete with the object to delete (for example, Delete column or Delete table). Contrast with [Clear](#clear) and [Remove](#remove).\n    Docs:\n      desc: Opens a separate window containing the landing page for the Bluemix product documentation.\n      subtext: Use as link text only for the specific link that points to the Bluemix product documentation from the console menu bar. See [Learn More](#learn-more).\n    Done:\n      desc: Indicates that the user has finished working in an environment (for example, editing templates) and wants to return to where he or she came from.\n      subtext: See [Finish](#finish). Contrast with [Close](#close).\n    Download:\n      desc: Transfers a file from a remote system to a local system.\n      subtext: See [Upload](#upload).\n    Drop:\n      desc: Use only for dropping a database table.\n      subtext: In other cases, use [Delete](#delete), [Clear](#clear), or [Remove](#remove).\n  'Idioms':\n    dev-to-dev:\n      desc: (phrase) developer to developer.\n      subtext: \"Context: Free support is available in our dev-to-dev forum.\"\n    docs:\n      desc: (noun) documentation.\n      subtext: \"Context: View docs.\"\n    dream:\n      desc: (adjective) pertaining to something that is exceptionally gratifying, excellent, or beautiful.\n      subtext: \"Context: Build your dream app.\"\nE:\n   'Common Actions':\n      Edit:\n        desc: Allows data or values to be changed.\n        subtext: Use instead of Modify unless you are modifying a table.\n      Empty trash:\n        desc: Permanently deletes all files or objects that have been placed into a trash container.\n        subtext: See [Move to trash](#move-to-trash).\n      Export:\n        desc: Saves data in a different format external to the system. Typically opens a secondary window for the user to specify the file type and destination (for example, storing table data as a set of comma-separated values).\n        subtext: See [Import](#import).\nF:\n  'Common Actions':\n    Filter:\n      desc: Shortens a list to objects that match the filter criteria.\n      subtext: Contrast with [Find](#find) and [Search](#search).\n    Find:\n      desc: Moves the cursor to the next element matching the specified criteria (for example, view the next occurrence of a specific word within an email message).\n      subtext: Contrast with (Filter)(#filter) and [Search](#search).\n    Finish:\n      desc: Indicates completion of a series of steps, such as in a wizard.\n      subtext: See [Done](#done).\n  'Idioms':\n    freebie:\n      desc: (noun) something given away at no cost.\n      subtext: \"Context: Enjoy freebies after the trial ends, and pay only for what you use beyond those.\"\nG:\n  'Common Actions':\n    Get help:\n      desc: Opens a search field from which the user can search for help information.\n      subtext: Use only as link text on Support widget from the console menu bar. See [Docs](#docs) and [Learn more](#learn-more).\n  'Idioms':\n    get in touch:\n      desc: (verb) to contact someone.\n      subtext: \"Context: The page also provides options to post your question to Stack Overflow, or to open a ticket by clicking Get in touch.\"\nH:\n  'Common Actions':\n    Hide:\n      desc: Removes an element that was previously shown.\n      subtext: \"Context: Hide descriptions. See [Show](#show).\"\n  'Idioms':\n    hackathon:\n      desc: (noun) an event that brings together developers to work intensively on a software project.\n      subtext: \"Context: Run a hackathon.\"\n    have a hand in:\n      desc: (phrase) to be directly involved in the accomplishment or creation of something.\n      subtext: \"Context: If you're a developer, you now have a hand in creating the future.\"\n    hit the ground running:\n      desc: (phrase) to immediately accomplish something when just starting to learn how to do it.\n      subtext: \"Context: Whatever your task, Bluemix contains everything you need to hit the ground running.\"\nI:\n  'Common Actions':\n    Import:\n      desc: Transforms data or objects from an external source. Typically opens a secondary window for the user to locate the external source.\n      subtext: \"Context: Creating a new table based on comma-separated values contained in a separate file. See [Export](#export).\"\n    Insert:\n      desc: Adds an element at a particular position in an ordered view.\n      subtext: \"Context: Adding a picture to the body of a document or inserting a record into a table. Contrast with [Add](#new) and [New](#new).\"\n  'Idioms':\n    in a flash:\n      desc: (phrase) quickly, immediately.\n      subtext: \"Context: Deploy and test your app in a flash.\"\nL:\n  'Common Actions':\n    Launch:\n      desc: Do not use.\n      subtext: Use [Start](#start).\n    Learn more:\n      desc: Opens additional, highly contextual information. Insert at the end of inline text or hover text where more information follows but does not fit in the current context.\n      subtext: If space permits, combine Learn more with meaningful text that describes the content you're pointing to. For example, if your user needs some best practices to manage apps in multiple regions, you could use Learn more about regions.\n    Log in:\n      desc: Enters a site or application. This choice typically opens a form for entry of credentials. Also used on the submission button after users enter their credentials.\n      subtext: Use instead of Sign in. See [Log out](#log-out).\n    Log out:\n      desc: Exits an application or site.\n      subtext: Use instead of Sign out. See [Log in](#log-in).\n  'Idioms':\n    lost in space:\n      desc: (phrase) to be hopelessly adrift with no chance of return, unlocatable, lost to the world.\n      subtext: \"Context: This page seems to be lost in space.\"\nM:\n  'Common Actions':\n    Move:\n      desc: Transfers an object from one container (for example, folder, activity, or page) to another.\n    Move to trash:\n      desc: A soft delete. Moves a file or object to an area from where it can later be permanently deleted or recovered.\n      subtext: Use instead of Delete or Recycle bin. See [Empty trash](#empty-trash).\n  'Idioms':\n    meetup:\n      desc: (noun) an informal gathering.\n      subtext: \"Context: Plan anything, even the monthly meetup.\"\n    muscle:\n      desc: (noun) the metaphorical strength or physical power of something.\n      subtext: \"Context: Whether startup or enterprise, your apps are supported by the muscle of an enterprise-ready cloud.\"\nN:\n  'Common Actions':\n    New:\n      desc: Starts the creation of a new object. New either creates the object immediately or opens a dialog or set of fields where the user can enter properties.\n      subtext: Combine New with the object to create (for example, New user or New column). See [Create](#create). Contrast with [Add](#add), [Copy](#copy), and [Insert](#insert).\n    Next:\n      desc: Advances the user to the next step in a sequence of steps, such as in a wizard.\n      subtext: See [Back](#Back) and [Finish](#finish).\n  'Idioms':\n    N/A:\n      desc: (adjective) not applicable, not available.\n      subtext: Spell as shown, all upper case.\nO:\n  'Common Actions':\n    OK:\n      desc: Completes the current task.\n      subtext: The best practice is to use a label corresponding to the requested action, such as [Save](#save) or [Create](#create). Use OK only when such a label is not available.\n  'Idioms':\n    oh no!:\n      desc: (phrase) used to indicate shock.\n      subtext: \"Context: Oh no! The free trial expired.\"\n    on-prem:\n      desc: (adjective) on-premises.\n      subtext: \"Context: Incrementally port application features across on-prem platforms and clouds with consistent services.\"\n    oops:\n      desc: (expression) used to indicate an accident or a mistake.\n      subtext: \"Context: Oops, sorry, the HTML5 File APIs are not fully supported in this browser.\"\n    ops:\n      desc: (noun) operations.\n      subtext: \"Context: Bluemix mobile cloud services help developers minimize ops and maintenance cost.\"\n    org:\n      desc: (noun) organization.\n      subtext: \"Context: Change to a different org.\"\nP:\n  'Common Actions':\n    Play:\n      desc: Starts audio, video, or an animation.\n    Post:\n      desc: Adds a new comment to an online community or adds status to a log or record.\n      subtext: If you are editing an existing comment, use [Save](#save) instead.\n    Preview:\n      desc: Shows how an object or content will appear with formatting applied before the content is published or distributed. Alternatively, provides an incomplete display of an existing object without leaving the current context.\n    Print:\n      desc: Sends a copy of the currently selected object or the object in view to the printer.\nR:\n  'Common Actions':\n    Redo:\n      desc: Redoes an undo action.\n      subtext: Likely used only as a Tooltip on an icon button. See [Undo](#undo).\n    Refresh:\n      desc: Reloads the view of an object when the displayed view has become unsynchronized with the source.\n      subtext: Likely used only as a tooltip on an icon button.\n    Reject:\n      desc: Indicates the user does not approve. In a business process, typically blocks the process from proceeding to the next step.\n      subtext: See [Approve](#approve).\n    Reply:\n      desc: Indicates or completes a response to an email or a comment.\n    Remove:\n      desc: Removes an object from a list or container but the object is not destroyed as a result of the action. Often requires one or more objects to be selected.\n      subtext: Where appropriate, combine Remove with the object that will be removed (for example, Remove user, Remove role, Remove privileges). Contrast with [Delete](#delete) and [Clear](#clear).\n    Reset:\n      desc: Reverts values back to their last saved state. The last saved state includes the values stored the last time the user clicked Apply. Does not close the dialog or window.\n      subtext: See [Restore defaults](#restore-defaults), [Undo](#undo), and [Cancel](#cancel). Contrast with [Restore](#restore).\n    Restore:\n      desc: Brings a file back after deletion, corruption, or similar event.\n      subtext: Contrast with [Reset](#reset).\n    Restore all:\n      desc: Completes a restore operation on all files or objects in a given system or container.\n      subtext: Contrast with [Restore](#restore).\n    Restore defaults:\n      desc: Sets form values to the default settings.\n      subtext: See [Reset](#reset) and [Undo](#undo).\n    Run:\n      desc: Sets form values to the default settings.\n      subtext: Use instead of Execute.\n  'Idioms':\n      ready for takeoff:\n        desc: (phrase) prepared for use.\n        subtext: \"Context: Your app is ready for takeoff!\"\nS:\n  'Common Actions':\n    Save:\n      desc: Saves pending modifications made to a file or document. Does not close the window or panel.\n      subtext: Contrast with [Apply](#apply).\n    Save as:\n      desc: Creates a new object based on the state of the object currently being viewed. The user names the new object and typically identifies its location.\n    Search:\n      desc: Returns all objects (for example, files, names, or documents) within a defined set (for example, in a folder, directory, database, or the internet) that match some specified criteria.\n      subtext: Contrast with [Find](#find) and [Filter](#filter).\n    Select:\n      desc: Selects data from a table.\n    Select all:\n      desc: Adds all objects in the view to the selection set or checks all Checkboxes.\n      subtext: Contrast with [Clear](#clear).\n    Send:\n      desc: Transfers an email or other information to the recipient.\n    Show:\n      desc: Reveals an object that was previously hidden.\n      subtext: \"Context: Show descriptions. See [Hide](#hide).\"\n    Sign up:\n      desc: Creates a user account or registers a user in a system.\n      subtext: Use instead of Register.\n    Start:\n      desc: Deploy an app or service to its development or production environment so that it can be used.\n      subtext: Use instead of [Launch](#launch).\n    Sort:\n      desc: Sorts a list or table column.\n      subtext: Likely used only as a tooltip on an icon button. Can be used without 'Ascending' or 'Descending' only if the order can be provided to a screen reader in the code for accessibility.\n    Submit an idea:\n      desc: Opens a separate window containing the IBM Cloud Ideas portal.\n      subtext: Use only as link text on Support widget from the console menu bar.\n  'Idioms':\n      skunkworks:\n        desc: (noun) a high priority, often secret, project taken on by a small team without constraints from management.\n        subtext: \"Context: Start a skunkworks.\"\n      startup:\n        desc: (noun) a newly established business.\n        subtext: \"Context: Whether startup or enterprise, your apps are supported by the muscle of an enterprise-ready cloud.\"\n      start from scratch:\n        desc: (phrase) to start from the beginning, to start from nothing.\n        subtext: \"Context: Choose a package of sample code and services, or start from scratch.\"\n      sweet:\n        desc: (adjective) pertaining to something that is considered excellent, awesome, or cool.\n        subtext: \"Context: We bet you have built some sweet apps by now.\"\n      sync:\n        desc: (noun) synchronize.\n        subtext: \"Spell as shown (not synch). Context: Download this .zip file template application or sync with the template source repository by copying and pasting the Git URL to a command line.\"\nT:\n  'Common Actions':\n      Top:\n        desc: Returns to the top of the page.\n        subtext: Use instead of Back to top.\n  'Idioms':\n    test drive:\n      desc: (noun) a test or evaluation of a piece of software for a specified amount of time.\n      subtext: \"Context: You have 1 day left in your Bluemix test drive.\"\n    time flies:\n      desc: (phrase) time passes quickly.\n      subtext: \"Context: Wow, time flies!\"\nU:\n  'Common Actions':\n      Undo:\n        desc: Reverts to the state before the most recent changes made by the user. Repeated use successively reverts to prior states in reverse chronological order. Applies to changes in data and not to changes made to the view.\n        subtext: Not all actions, such as [Save](#save), can be undone. See [Redo](#redo), [Reset](#reset), and [Restore](#restore) defaults.\n      Update:\n        desc: Label for a button in a dialog or form for editing an object. The settings in the dialog are applied to the object when it is updated.\n        subtext: See [Edit](#edit).\n      Upload:\n        desc: Transfers a file from a local system to a remote system.\n        subtext: See [Download](#download).\n  'Idioms':\n    unfavorite:\n      desc: (verb) to change the status of an item that was previously marked as a favorite. (adjective) an item that is not a favorite.   \nV:\n  'Common Actions':\n      View details:\n        desc: Presents additional information or properties for the object.\n  'Idioms':\n    voila:\n      desc: (expression) draws attention to something that has been accomplished or gained.\n      subtext: \"Context: Runtime and container usage is charged based on two things. One, how much memory your runtime or container uses, and two, the duration that memory is used. Multiply the two together, and voila! The GB-hour.\"\nW:\n   'Idioms':\n      wow!:\n        desc: (expression) used to show astonishment, delight, or admiration.\n        subtext: \"Context: Wow, time flies!\"\n---\n"
  },
  "124": {
    "parent": "guidelines",
    "child": "content",
    "section": "guidelines",
    "content": "## Capitalization\n\n<img alt=\"capitalization\" src=\"images/Aa.svg\" class=\"content-page__cap-letter\" />\nGood content design is consistent and coherent so that users can trust and predict how to interact with it. Details matter.\n\nAlways capitalize proper names, such as United States. Use ALL CAPS for abbreviations, acronyms, and initials (for example, IBM and ASCII) and two-letter abbreviations (for example, AL, AK, and AZ), and for OK.\n\nFor specific capitalization rules for different element or component types, see the usage details for each individual element or component type.\n\n### Sentence style\n\nUse sentence-style capitalization in text and for all text elements in the UI, except for table/grid column headers, headings for groups of toggles, and product names. Sentence style capitalizes only the first word of each sentence and proper nouns\n(such as names).\n\n**Examples:**\n\n* Cloud Foundry apps\n* Business models\n* Creating Boolean expressions\n* Planning network architectures\n\n### Headline style\n\nUse headline-style capitalization for table/grid column headers and product names. Headline style capitalizes words based on parts of speech.\n\n**Capitalize the initial letter of the following words:**\n\n* All nouns, pronouns, adjectives, verbs, adverbs, and subordinating conjunctions such as:\n* After\n* Although\n* Because\n* Before\n* How\n* If\n* Than\n* That\n* Though\n* Until\n* When\n* Where\n* Whether\n* While\n\n**Do not capitalize the initial letter of the following words:**\n\n* articles, except as the first word\n* coordinating conjunctions\n* prepositions, except as the first or last word\n\n## Do's & Dont's\n\nThese guidelines apply for developers and writers working with IBM Cloud UI and documentation.\n\n---\n***\n### Do use simple tense\n\nUse simple verbs and tenses, and keep sentences concise, simple, friendly, and punchy. Focus on the user's context and make content relevant. The more familiar you are with their context, the better you can communicate without using a lot of words.\n\nIf you need to use past or future tense, avoid verb tenses with the words have, has, had, been, should, would, and will.\n\n\n<div data-insert-component=\"DosAndDonts1\"></div>\n\n---\n***\n### Do use active voice\n\nTo convey a more natural tone, use active voice. People tend to speak in active voice unless they have a reason not to. For example, a good reason to use passive voice is to avoid sounding judgmental or blaming the user. Consider how a statement like, “You entered the wrong value,” which is active voice, might not be a well received error message.\n\n<div data-insert-component=\"DosAndDonts2\"></div>\n\n---\n***\n### Do use second person\n\nEngage your readers by using second person **(you, your)**. First person **(I, we, our)** focuses on the writer rather than the audience. People are interested in what they can do and how your story applies to their lives.\nOne exception to this is in the case of possessive adjectives in the UI. You can use first person in headings or labels that are very specific to the user or customer data, for example “My Account” or “My Usage.” In explanatory text for the heading or label, switch to second person, for example _“Your usage is calculated from the 1st day of the month.”_\n\n---\n***\n### Don't be too formal or stuffy\n\n* Do not be afraid to use contractions once in a while. Decide whether they fit the context.\n* Occasionally begin sentences with **and, but or so.** This usage allows for shorter, scannable sentences. Do not overuse these devices, especially in instructional (steps) content.\n* For example, _“You can deploy an app to the cloud during lunch hour. And still have time to eat”_ is great for Discover, Try, Buy.\n* Occasionally use questions in headings. In both UIs and documentation, questions can be used to further conversational style, but don't overuse them, as they can add to noise and hinder retrievability. Make sure headings that use questions are meaningful. In a UI, questions can be used in a confirmation prompt in a dialog box. For example: _“Do you want to close without saving?”_\n* Use exclamation marks only positively, not negatively. Make sure you use no more than one exclamation mark in a context, such as a single window or a single Docs topic.\n\n<div data-insert-component=\"DosAndDonts3\"></div>\n\n---\n***\n### Don't be overly mannerly\n\nTerms of politeness are superfluous, convey the wrong tone for technical material, and are not regarded the same way in all cultures.\n\nUse **please** in a UI only when the user is being inconvenienced.\n\n<div data-insert-component=\"DosAndDonts4\"></div>\n"
  },
  "125": {
    "parent": "guidelines",
    "child": "principles",
    "section": "principles",
    "content": "**At IBM, we define design as the intent behind an outcome. Great experiences deliver meaningful outcomes to your user. They reach both head and heart. To design for great user experiences, you must understand how they are put together and why they can touch people at a deeper level.**\n\n## Be essential\n\nEvery element in an experience should have a purpose. Leaving complexity behind allows you to design with restraint by emphasizing the essential and stripping away the distracting. Provide all the necessary information in a sleek and elegant way, so we can be distinct, clear, and concise with our users.\n![be essential](images/overview-1.png)\n\n## Be inclusive\n\nGood design should work for everyone. We need not to focus only on the average person, with regular needs and expectations. Keep in mind that the people using your products will be extremely diverse. User diversity covers variation in capabilities, needs, and aspirations. Empathize with a full spectrum of potential users instead of designing around a checklist.\n![be inclusive](images/overview-2.png)\n\n## Be consistent\n\nConsistency is not exact replication. Rather, it's a harmonious uniformity, instilling predictability and stability. A successful design should leave our users feeling like, “Yes, that makes sense.” Being consistent gives users the power to anticipate what will happen next. And when users encounter something that is expected, it creates a sense of comfort and trust. Usability is greatly improved when an experience acts and feels the same throughout.\n![be consistent](images/overview-3.png)\n\n## Be humanistic\n\nMore than being user-centered, we must be human-centered. Our designs are conceived from a deep understanding of the people behind the product and with the desire to help individuals accomplish their goals. Part of being humanistic is embracing empathy. Empathy is the ability to understand and share another personʼs perspective, feelings, and challenges. Go out of your way to identify with your user's needs.\n![be humanistic](images/overview-4.png)\n\n## Be delightful\n\nEnhances usability and delight by embracing the spirit of “just enough design”. Engaging users with inspiration and curiosity by designing experiences to encourage critical thinking and creative confidence. Be mindful of usersʼ needs by providing them with the right tools at the right time. Make an offering so effective that it doesn't simply read as a software or a product but as something useful in that person's life.\n![be delightful](images/overview-5.png)\n"
  },
  "126": {
    "parent": "overview",
    "child": "overview",
    "section": "overview",
    "content": ""
  },
  "127": {
    "parent": "resources",
    "child": "resources",
    "section": "resources",
    "content": "## Carbon Design Kit\n\nThe Design Kit consists of core visual styles and patterns. It has everything a designer needs to start building experiences.\n![https://github.com/carbon-design-system/carbon-design-kit](Carbon Design Kit)\n\n## Carbon Component Library\n\nThe Component Library gives developers a collection of re-usable HTML and Sass partials they can use for building websites and user interfaces.\n![https://github.com/carbon-design-system/carbon-components](Carbon Component Library)\n\n### Additional Links\n\n#### Carbon Boilerplate\n\nA simple boilerplate for rapid UI prototyping with Carbon Components.\n![https://carbon-boilerplate.mybluemix.net/](Carbon Boilerplate)\n\n#### Craft Library\n\nCraft is a Sketch plugin made by Invision that has an easy to access library of sketch-ready Carbon components and design assets.\n![https://github.com/carbon-design-system/carbon-design-kit/wiki/Carbon-Craft-Library](Set-up Instructions)\n\n#### Color Accessibility\n\nThis color contrast checker allows you to easily calculate the color contrast ratio between two colors, ensuring that it passes WCAG 2.0 Level AA requirements.\n![https://marijohannessen.github.io/color-contrast-checker/](Color Contrast Checker)\n\n#### IBM Design Language\n\nCarbon uses the IBM Design Language as our guiding principle. These core values remind us to design for an outcome and to be authentically thoughtful.\n![https://www.ibm.com/design/language/](IBM Design Language)\n\n### Downloads\n\n#### Presentation Templates\n\nUse our branded templates for your presentation needs.\n\nDownload Keynote\nDownload Powerpoint\n\n#### Bluemix logo\n\nThis comprehensive file contains the various versions of the Bluemix logo.\n![https://github.com/carbon-design-system/carbon-design-kit/blob/master/Bluemix_Logo-Assets.zip?raw=true](Download logo assets)\n"
  },
  "128": {
    "parent": "style",
    "child": "color",
    "section": "usage",
    "content": "**_Color_ brings a design to life. Color is versatile; it's used to express emotion and tone, as well as place emphasis and create associations. Color should always be used in meaningful and intentional ways in order to create patterns and visual cues.**\n\n## Color palette\n\nThe Carbon color palette is designed and implemented in a themable manner. The universal color variables are determined by common roles and usage; it is not based singularly on a color value (i.e. unique hex code). The same color value may be assigned to multiple variables in a theme's palette when the values have distinctly different roles.\n\nA universal variable can also have multiple associated roles when the color is consistently used across those roles. This allows for uniform color application across themes while giving each theme the freedom to express its own individuality at a more detailed level.\n\n### Color terms\n\n| Term         | Definition                                                                                                                                                               |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Value**    | A unique color (hex code) assigned to a universal variable                                                                                                               |\n| **Role**     | The systematic usage/s of a color value                                                                                                                                  |\n| **Variable** | The code identifier for a unique role or set of roles. Variables are universal and never change across themes. Within a theme variables are assigned appropriate values. |\n| **Theme**    | The set of unique color values assigned to the universal palette                                                                                                         |\n| **Palette**  | The complete set of universal variables. The palette is the naming conventions of colors used in the UI. Each theme will use the same palette of variables.              |\n\n## Color roles\n\n| Variable       | Role(s)                                                                                                            | Value   |\n| -------------- | ------------------------------------------------------------------------------------------------------------------ | ------- |\n| **$brand-01**   | Primary brand <br /> Interactive text <br /> Primary icon color <br /> Border highlight <br /> Emphasis background | #3d70b2 |\n| **$brand-02**   | Supporting brand                                                                                                   | #5596e6 |\n| **$brand-03**   | Tertiary brand <br /> Loading                                                                                      | #00b4a0 |\n| **$ui-01**      | Primary background <br /> Layer 1 background                                                                       | #ffffff |\n| **$ui-02**      | Default page background <br /> Layer 0 background <br /> Secondary background                                      | #f4f7fb |\n| **$ui-03**      | Subtle border                                                                                                      | #dfe3e6 |\n| **$ui-04**      | 3:1 color contrast <br /> Emphasis border                                                                          | #8897a2 |\n| **$ui-05**      | 4.5:1 color contrast <br /> High contrast border <br /> Secondary icons                                            | #5a6872 |\n| **$text-01**    | Primary text <br /> Body copy                                                                                      | #152935 |\n| **$text-02**    | Secondary text <br /> Subtle text <br /> Help text                                                                 | #5a6872 |\n| **$text-03**    | Placeholder text                                                                                                   | #cdd1d4 |\n| **$inverse-01** | Inverse text color <br /> Inverse icon color                                                                       | #ffffff |\n| **$inverse-02** | Inverse background color                                                                                           | #272d33 |\n| **$field-01**   | Field color on $ui-01 background                                                                                   | #f4f7fb |\n| **$field-02**   | Field color on $ui-02 background                                                                                   | #ffffff |\n| **$hover-primary** | $brand-01 element hover                                                                       | `darken($brand-01, 10%)` |\n| **$hover-primary-text** | $brand-01 text hover                                                                     | `darken($brand-01, 15%)` |\n| **$hover-danger** | Danger hover                                                                                 | `darken($support-01, 10%)` |\n| **$hover-secondary** | $ui-05 element hover                                                                                        | $brand-01|\n| **$hover-row** | Row hover                                                                                           | `rgba($brand-02, 0.1)` |\n| **$support-01** | Error                                                                                                              | #e0182d |\n| **$support-02** | Success                                                                                                            | #5aa700 |\n| **$support-03** | Warning                                                                                                            | #efc100 |\n| **$support-04** | Information                                                                                                        | #5aaafa |\n\n## Color contrast | WCAG AA standards\n\n### Type colors\n\nAll type color combinations on Carbon must pass <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\" target=blank>WCAG AA standards</a> of 4.5:1 for normal text and 3:1 for large text. For larger text, if the font weight is light (300) or normal (400) the text should be no smaller than 24px. If the font weight is Semi-Bold (600) then the large text should be no smaller than 19px. In the table below are approved Carbon color combinations.\n\n<div data-insert-component=\"ColorContrast\"></div>\n\n### UI colors\n\nCertain UI color combinations on Carbon must pass the new WCAG AA standards of a minimum 3:1 ratio. Carbon complies with a 4.5:1 color ratio for certain controls and all icons. In the table below are approved Carbon color combinations.\n\n<div data-insert-component=\"UIColorContrast\"></div>\n\n### Additional color accessibility\n\nOther color accessibility concerns include color blindness and low vision users. Learn more about these additional color accessibility guidelines in the [accessibility section](http://carbondesignsystem.com/guidelines/accessibility/color) of the Carbon website.\n\n## Resources\n\n* <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html\" target=blank>IBM accessible color guide</a>\n* <a href=\"http://w3-03.ibm.com/able/devtest/quick/\" target=blank>IBM accessibility quick guidance</a>\n* <a href=\"https://marijohannessen.github.io/color-contrast-checker/\" target=blank>Color contrast checker</a>\n* <a href=\"https://www.ibm.com/design/language/resources/color-library\" target=blank>IBM Design Language colors</a>\n"
  },
  "129": {
    "parent": "style",
    "child": "grid",
    "section": "code",
    "content": "**The _CSS grid structure_ utilizes a flexbox-based layout to enable developers to quickly craft layout. Use of our grid classes is not required, but is there to help align and speed the development process with the design specifications of the grid. The grid system is loosely based around the semantics of the Bootstrap grid, so if you're familiar with the technicalities of that grid, this should feel similar.**\n\n## Basic Usage\n\n```html\n<div class=\"bx--grid\">\n\u000e\u000e\u000e  <div class=\"bx--row\">\n    <div class=\"bx--col-xs-12 \">\n      <p>Content space for bx--col-xs-12 bx--col-sm-6</p>\n    </div>\n  </div>\n</div>\n```\n\nLet's run through the grid, there are a few fundamental building blocks that make up our layout.\n\n#### `bx--grid`\n\nThe `bx--grid` creates the wrapper container to space your overall page according to design. This is meant to wrap your highest level content, typically used at `main` element below the Common Header.\n\n#### `bx--row`\n\nThe `bx--row` initializes the element as a `display: flex` parent item, and is used as a wrapper element for any subsequent `bx--col-*` child elements. `bx--row` assumes child `bx--col` classes and applies a negative margin, it is not advised to use `bx--row` as a standalone wrapper.\n\n#### `bx--col`\n\nThe `bx--col-{breakpoint}-{columnNumber}` is our mobile-first look at creating layouts. There are six major breakpoints\n\n| Breakpoint Name | Media Query |\n|-----------------|-------------|\n| `xs`            | 0 - 576px   |\n| `sm`            | > 576px     |\n| `md`            | > 768px     |\n| `lg`            | > 992px     |\n| `xl`            | > 1200px    |\n| `xxl`           | > 1600px    |\n\n`bx--col-xs-{columnNumber}` is the grid layout that responds to mobile - all layouts should at th every least contain a `bx--col-xs-{columnNumber}` class on them. Any additional class is stacked on top of the original; at that breakpoint, the layout will adopt that number of columns.\n\nSo an application layout that had two blocks of content that were each full width at mobile, but then at a medium breakpoint (approximately tablet) became two columns would look like this\n\n```html\n<div class=\"bx--grid\">\n  <div class=\"bx--row\">\n    <div class=\"bx--col-xs-12 bx--col-md-6\">Some content here</div>\n    <div class=\"bx--col-xs-12 bx--col-md-6\">Some content here</div>\n  </div>\n</div>\n```\n\n\n#### bx--col-{breakpoint}-auto\n\nInstead of requiring a certain number of columns for an element to take up, you can also specify the auto class in lieu of a column number. This will tell the column to take as much room as the width of that column's content requires.\n\n**Important:** All `bx--col` elements must be the direct child of a `bx--row` element.\n"
  },
  "130": {
    "parent": "style",
    "child": "grid",
    "section": "design",
    "content": "**_Grid_ systems are used for creating page layouts through a series of rows and columns that house your content. Carbon uses a responsive, mobile first, fluid grid system that appropriately scales up to 12 columns as the device or viewport size increases.**\n\n## Basic structure\n\n<div data-insert-component=\"GridExample\"></div>\n\n### Grid with a side panel\n\nA left or right side panel lives outside the bounds of the grid, including the grid margins. When a side panel appears it pushes the grid away from the outer edge of the browser window condensing the grid and content area.\n\nFor example, when using a persistent left navigation panel, the grid starts after the 200px of the navigation on the left side of the viewport. Normal grid rules still apply within the content area.\n\n**Grid area with interior left navigation: page width minus 200px from left edge.**\n_\n![Interior left nav grid](images/grid-4.png)\n_\n\n## How it works\n\n### Gutters\n\nColumns create gutters (gaps between column content) through padding. For devices with a screen width greater than 768px, the column padding is 20px. For devices with a screen width less than 768px, the column padding is 10px.\n\n**Screen width ≥ 768px = 20px gutters**\n\n**Screen width < 768px = 10px gutters**\n\n### Columns\n\nCarbon designs should be limited to twelve columns. If designers feel that they need fewer columns in their grid, they can specify the number of twelve available columns they wish to span.\n\nThis can translate to percentages of the twelve columns. Using this method, a designer can create a folded, less granular grid. For example, if your component spans three equal columns, that is equal to 25% of twelve columns.\n\n**Column count: 12**\n_\n![Interior left nav grid](images/grid-5.png)\n_\n_@1440px - 12 Columns / 20px Gutters / 5% Margins_\n\n### Margins\n\nThe twelve column grid does not have a maximum width. It has a width of 100%, with built in margins that create padding between column count and the edges of the viewport.\n\nIn devices with a screen width greater than 768px, the margins are 5% on the left, and 5% on the right.\n\n**Example: Screen Width 768px**\n\n* 5% left = 38px (rounded to nearest whole pixel)\n* 5% right = 38px (rounded to nearest whole pixel)\n* 12 columns + gutters = 768px - 38px - 38px = 692px (rounded to nearest whole pixel)\n\nIn devices with a screen width less than 768px, the margins are 3% on the left, and 3% on the right.\n\n**Example: Screen Width 320px**\n\n* 3% left = 10px (rounded to nearest whole pixel)\n* 3% right = 10px (rounded to nearest whole pixel)\n* 12 columns + gutters = 320px - 10px - 10px = 300px (rounded to nearest whole pixel)\n\n### Breakpoints\n\n---\n\n| Size        | Columns | Gutters            | Outer margins     |\n| ----------- | ------- | ------------------ | ----------------- |\n| XS (576px)  | 12      | 5px + 5px = 10px   | 3% left, 3% right |\n| S (768px)   | 12      | 10px + 10px = 20px | 5% left, 5% right |\n| M (992px)   | 12      | 10px + 10px = 20px | 5% left, 5% right |\n| L (1200px)  | 12      | 10px + 10px = 20px | 5% left, 5% right |\n| XL (1600px) | 12      | 10px + 10px = 20px | 5% left, 5% right |\n\n## Large scale grid\n\nCarbon allows for two types of large scale grids. The type of grid used should be based on content type and density. The large scale grid should be consistent within individual sections of the product. For example, all Configuration pages within Bluemix should have either a max width or grow exponentially. The choice of this grid belongs to the teams that own each section/template.\n\n### Option 1: Exponential grid (default)\n\nThe width of the grid and content area grows exponentially and the margin always remain at 5%. The width of each column continuiously grows and gutters remain at 20px.\n\n_\n![Expontential large scale grid](images/grid-6.png)\n_\n_@2560px - 12 Columns exponetial grid / 20px Gutters / 5% Margins_\n\n### Option 2: Max width\n\nThe max width is 1600px, with the margins growing exponentially past that point. Content and columns are centered on page and the margins grow equally on left and right of content.\n\nIf a side panel exists with a max width layout, then the panel should stick to the edges of the viewport with the exponential margin between the grid columns and the panel. This is not an ideal usecase.\n\n_\n![Max width large scale grid](images/grid-7.png)\n_\n_@2560px - 12 Columns at max width 1600px / 20px Gutters / Exponential Margins_\n"
  },
  "131": {
    "parent": "style",
    "child": "iconography",
    "section": "contribution",
    "content": "## Adding icons\nIf you would like to add an UI icon to our library, please submit a pull request in the Carbon Design Kit <a href=\"https://github.com/carbon-design-system/carbon-design-kit\" target=blank>GitHub repo.</a>\n\n**If you're not comfortable with making a Pull Request, please submit an issue in the repo with the icon attached.**\n\n1. Correctly export icon\n2. Name icon to Carbon specifications\n3. Prep SVG XML code\n4. Submit icon to [carbon-icons](https://github.com/carbon-design-system/carbon-icons) repo\n5. Test SVGs\n\n\n## Exporting SVGs\n### Best practices\n* **Square icons:** create an artboard for an individual icon that is 24 x 24 pixels (or 16 x 16 pixels for glyphs)\n* **Rectangular icons:** make sure the width or the height of the artboard is 24 pixels (16 pixels for glyphs).\n* Each artboard and the artwork within it must be aligned to the pixel grid.\n* Icons should be at whole pixels. No decimals in x and y coordinates or width and height fields.\n* All strokes must be expanded.\n* All strokes must be full pixels.\n* No padding when exporting icons (internal and external padding can be added with CSS).\n* Combine all possible shapes and paths.\n* Ungroup icon layers completely. It should be on the top-most layer in your artboard.\n* Make sure to properly name layers and artboards (these names will also be exported into the code).\n\n### How to export SVGs from Sketch\n1. Draw an artboard that is the same size as your icon (at least one side should be 24px or 16px exactly). The artboard should hug the edges of the icon.\n2. Place the icon squarely on the artboard making sure its aligned to the pixel grid.\n3. Convert all strokes to outlines `(Shift + ⌘ + O)`\n4. Select any overlapping shapes and click the Union icon from the top navigation, to merge all of the shapes together.\n5. Make sure the icon is at `#000000` and has no additional styling.\n6. Select the entire artboard (not just the icon).\n7. Click `Make Exportable` at the bottom of the right toolbar in Sketch.\n8. In the `Export` widget select SVG in the format dropdown.\n9. Click `Export 'Artboard-Name'`.\n10. Name icon with the `#name--modifier` convention. (ex. copy.svg, copy--glyph.svg, add.svg, add--glyph.svg).\n\n<div data-insert-component=\"Video\" data-props=\"icon-sketch.mp4\"></div>\n\n### How to export SVGs from Adobe Illustrator\n1. Draw an artboard that is the same size as your icon (at least one side should be 24px or 16px exactly). The artboard should hug the edges of the icon.\n2. Place the icon squarely on the artboard making sure its aligned to the pixel grid.\n3. Expand all strokes `(Object > Expand)`.\n4. Select all overlapping shapes and click the Unite icon in the Pathfinder panel, to merge all of the shapes together.\n5. Make sure the icon is at `#000000` and has no additional styling.\n6. Select `“File”` from the top navigation.\n7. Select `Save A Copy...` which will open a dialog.\n8. On the `Format` dropdown select SVG (svg).\n9. Below `Format` select `Use Artboard` then select either all or a range of artboards depending on your need.\n10. Click `Save`.\n11. The `SVG Options` dialog will then open.\n12. Make sure the preferences are the same as in the image below.\n\n\n![export an icon from illustrator](images/icon-contribution-3.png)\n\n<div data-insert-component=\"Video\" data-props=\"icon-illustrator.mp4\"></div>\n\n## Developer guidelines\n\n### Naming SVG files\n\nWe use the following naming convention for SVG filenames:\n\n* `name`: icon name (ex. `add.svg`)\n* `name--outline`: icon with an outline (ex. `add--outline.svg`)\n* `name--glyph`: icon that is a glyph (ex. `add--glyph`)\n* `name--new`: new icon that replaces a deprecated icon\n\n### Prepping SVG XML code\n\nIt's the goal of this library to make sure icons can be modified with CSS to change it's __color__ (`fill`) and __size__ (`width`, `height`).  \n\nRun SVG XML code through <a href=\"https://jakearchibald.github.io/svgomg/\" target=blank>SVGOMG</a>\nInspect the code and make sure that your XML doesn't include the following:\n\n- `<style>` tags\n- `<g>` tags\n- `class` attributes\n- `stroke` attributes\n- `stroke-width` attributes\n\n### Submitting new SVGs\n\n1. Fork the <a href=\"https://github.com/carbon-design-system/carbon-icons\" target=blank>carbon-icons</a> repo.\n2. Close the fork.\n3. Add new SVG file(s) to <a href=\"https://github.com/carbon-design-system/carbon-icons/tree/master/svg\" target=blank>svg</a> folder. SVG subfolders are deprecated as of version `3.0.0`.\n4. Submit a pull request\n5. Do not commit built files (files created from `npm run build` script).\n\n### Testing SVGs\n\n1. `npm run build` to build new SVG sprite files.\n2. `npm test` to run unit tests\n3. `npm start` and go to [localhost:3000](http://localhost:3000/), make sure added icons are rendering correctly\n4. Optional: Go to [localhost:3000/test](http://localhost:3000/test) and test styling of icon manually using CSS.\n\nUnit tests are run against built SVG sprite files (carbon-icons.svg and sprite.svg).\nDo not commit built files to pull requests.\n"
  },
  "132": {
    "parent": "style",
    "child": "iconography",
    "section": "usage",
    "content": "**_Iconography_ uses images and symbols to represent an object visually. They communicate a message and should be distinct and informative. Icons should be used sparingly throughout the product to provide clarity and reduce cognitive load on users.**\n\n## Resources\n\nYou can find the source file for the icon library within the <a href=\"https://github.com/carbon-design-system/carbon-design-kit\" target=blank>Carbon Design Kit.</a>\n\n* <a href=\"https://github.com/carbon-design-system/carbon-icons\" target=blank>Carbon icons GitHub repo</a>\n* <a href=\"http://www.ibm.com/design/language/resources/icon-library/\" target=blank>IBM Design Language icon library</a>\n\n## Visual usage\n\n### Sizing\n\nUI icons are `16px`.\n\nWhile most icons occupy a square artboard, some icons may occupy a rectangular artboard where only the width or height of the icons is 16px. Icons should only be used at their original sizes.\n\n### Background\n\nAll icons should be on a transparent background and with the artboard boundaries at the edges of the icon. At least one of the edges should be at the standard measurement of 24px or 16px.\n\n---\n***\n> \n![icon usage](images/icon-usage-1.png)\n\n### Padding\n\nWhen **creating icons,** do not add internal padding with Sketch or Illustrator. If the icon needs padding, developers can add this with CSS.\n\nWhen **using icons,** all touch targets need to be 44px or higher. With that said, a developer can add padding to a touch target with CSS to meet the 44px requirement.\n\n---\n***\n> \n![icon padding](images/icon-usage-2.png)\n\n### Color\n\nInteractive UI icons need to pass the same color contrast ratio as typography at a 4.5:1 ratio. UI icons are always a solid color. The color of the icon should depend on the importance of the icon's action.\n\n|                        | SCSS             | HEX     |\n| ---------------------- | ---------------- | ------- |\n| Primary action         | $brand-01        | #3d70b2 |\n| Primary action:hover   | $hover-primary   | #30588C |\n| Secondary action       | $ui-05           | #5a6872 |\n| Secondary action:hover | $hover-secondary | #3d70b2 |\n\n**Exception:** There is an exception to both the `brand-01` and UI color rules. Certain icons, such as status or notification icons, can inherit their parent color. For example, a warning icon is yellow because warning notifications are yellow.\n\n### Weight\n\nIcons of the same size should have the same visual weight. One icon should not look heavier or lighter than another icon of the same size. Most UI Icons are drawn with a two pixel stroke.\n\nMake sure the 2px stroke does not change when resizing icons because it causes\nicons to look uneven. When scaling icons you should always start each icon at the same base size (preferably the default of 24px).\n\nGlyphs or 16 pixel icons, should always be a filled icon. This adds visual weight to the icon, allowing it to maintain its proper emphasis and stay legible. Fine stroke weights can disappear or break at the glyph size.\n\n### Pixel grid\n\nWhen drawing or re-sizing icons make sure the vector always aligns to the base pixel grid. This ensures pixel clarity and crispness on all screen ratios. The x and y coordinates of icons should never contain decimals.\n\n## Developer usage\n\n### Using SVG sprite (recommended)\n\n**Requirements:**\n\n* Install `carbon-icons`\n\nFull installation details in <a href=\"https://github.com/carbon-design-system/carbon-icons\">Carbon icons GitHub repo.</a>\n\n### Using SVG sprite from static assets (recommended)\n\nUse the SVG sprite (**carbon-icons.svg**) by serving it as a static asset.\nThen reference the SVG icon you want to display using a path to the SVG sprite file.\nTo use SVG sprite files, they **must** be distributed through a web server and while using `svgxuse`.\n\n```html\n<!-- From static assets  -->\n<svg>\n  <use xlink:href=\"/path_to_static-assets/carbon-icons.svg#icon_name\"></use>\n</svg>\n```\n\n`path_to_static-assets` is the path to your static assets where `carbon-icons.svg` is located.\n\n`icon_name` is the icon name, which will display the corresponding icon. Refer to the <a href=\"/style/iconography\" target=blank>iconography library</a> page for a full list of icon names.\n\n### CSS\n\nYou can override size and color with CSS.\n\n```html\n<svg class=\"icon\">\n  <use xlink:href=\"/path_to_static-assets/carbon-icons.svg#icon_name\"></use>\n</svg>\n```\n\n```css\n.icon {\n  width: 24px;\n  height: 24px;\n  fill: red;\n}\n```\n\nAll icons in the library are standardized so that they do not include `stroke` or internal spacing (`padding`).\n\n### Inline SVG\n\nIf you're unable to use the recommended SVG sprite or `svgxuse`, you can inline SVG directly into your HTML.\n\nVisit carbon-icons and browse the svg folder for any icons you want to use. (Remember, svg subfolders contain deprecated icons. Don't use these).\n\n### Main files\n\nCarbon icons ship with two main SVG files that contain different sets of external SVG sprite files:\n\n---\n\n| Filename          | Description                                                                                                        | Supported versions     |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------ | ---------------------- |\n| carbon-icons.svg  | Contains current icons (consolidated subset of legacy icons used in IBM Bluemix)                                   | `3.x` and newer        |\n| carbon-icons.json | JSON file created from carbon-icons.svg, used in [Carbon](http://carbondesignsystem.com/style/iconography/library) | `3.x` and newer        |\n| carbon-icons.js   | JS module created from carbon-icons.svg, used in `Icon` React Component in [carbon-components-react](#)            | `3.x` and newer        |\n| sprite.svg        | SVG sprite contains legacy icons                                                                                   | `1.x`, `2.x` and `3.x` |\n| icons.json        | legacy JSON file created from sprite.svg                                                                           | `1.x`, `2.x` and `3.x` |\n| legacy-icons.js   | JS module created from sprite.svg                                                                                  | `3.x` only             |\n\n### Accessibility\n\nFor screen reader accessibility, provide a context-rich title for the SVG using `<title>` element.\n\n```html\n<svg>\n  <title>Add a new service</title>\n  <use xlink:href=\"/carbon-icons/dist/icon--add--glyph\"></use>\n</svg>\n```\n\nIf support for older browsers is needed, use `aria-labelledby` attribute to reference the `<title>` element using an `id`.\nThe `<title>` element will be read by the screen reader to the user so it should describe its purpose.\nMake sure that you do not duplicate this `id`.\n\n```html\n<svg aria-labelledby=\"add\">\n  <title id=\"add\">Add a new service</title>\n  <use xlink:href=\"/carbon-icons/dist/icon--add\"></use>\n</svg>\n```\n\nFor more details on accessibility, see the following resources:\n\n* \"Accessible SVGs\" via [CSS-Tricks](https://css-tricks.com/accessible-svgs/)\n* \"5.4 The 'desc' and 'title' elements\" via [W3C.org](https://www.w3.org/TR/SVG11/struct.html#DescriptionAndTitleElements)\n"
  },
  "133": {
    "parent": "style",
    "child": "layer",
    "section": "overview",
    "content": "**_Layer_ is the surface on which content and components live. It is a visual motif used to create groupings and associations between content as well as hierarchy and focus through depth.**\n\n## Layer types\n\n<div data-insert-component=\"LayerTypes\"></div>\n\nLayer name | Elevation | Box-shadow\n-------------------|--------------|-----------------\n**Base** | 0 | none\n**Flat** | 1 | none\n**Raised** | 2 | 0 1px 2px 0 rgba(0,0,0,0.10);\n**Overlay** | 8 | 0 4px 8px 0 rgba(0,0,0,0.10);\n**Sticky Nav** | 12 | 0 6px 12px 0 rgba(0,0,0,0.10);\n**Temporary Nav** | 16 | 0 8px 16px 0 rgba(0,0,0,0.10);\n**Pop-out** | 24 | 0 12px 24px 0 rgba(0,0,0,0.10);\n\n## Properties\n\n### Physical properties\n\n- All layers are the same thickness.\n- The implied thickness of one layer is one pixel.\n- Layers live on distinct z coordinate planes and uses the offset of the y axis and blur of the box-shadow to represent this depth.\n- Items with the same layer cannot occupy the same space.\n- Components with different layers can be stacked one top of one another (i.e. an overlay layer may exist on top of a raised layer).\n- The only defined style of a layer is its elevation and shadow. The layer container can be styled as needed.\n\n### Content on layer\n\n- Content appears on same plane as layer, content does not add to a layer's elevation.\n- Content on a layer is bound by the edges of the layer container. Content cannot cross boundaries of the layer.\n- Borders are the only overarching limitation of the content on layer, however limitations on the content per component may occur. See individual components for more details.\n\n## Elevation\n\nEach type of layer lives on a different imagined plane of the UI giving each its own distinct elevation. Elevation is the implied measured distance above the base layer. The affect of the elevation on a layer is defined by the intensity and depth of the shadow it casts.\n\n### Elevation scale\n\nThe range of imagined planes in the UI are on a scale from 0 to 24, with zero being the base and 24 the highest point. The higher the elevation is the larger the shadow each layer will cast. Each unit on the elevation scale is equal to the pixel value of the coded blur applied to shadow.\n\nEach layer is a defined marker along the elevation scale. There is not a layer for each level of the scale.\n\n![Layer elevation](images/layer-elevation-604.png)\n"
  },
  "134": {
    "parent": "style",
    "child": "layer",
    "section": "usage",
    "content": "## Component usage\n\nLayer | Components\n------|-----------\n**Base** | Detail page header without tabs\n**Flat** | Interior left nav, Detail page header with tabs, Tables\n**Raised** | Modules, Cards\n**Overlay** | Overflow menu, dropdowns, tooltips\n**Sticky Nav** | Global header (on scroll), Detail page header (on scroll)\n**Temporary Nav** | Global left nav\n**Pop-out** | Modals\n\n<div data-insert-component=\"LayerUsage\"></div>\n\n## Code usage\n\nTo use in code, just include the layer mixin like so with the appropriate layer value from the table below:\n\n```scss\n@include layer('raised');\n```\n\nLayer | Mixin value\n------|-----------\n**Base** | @include layer('raised')\n**Flat** | @include layer('flat')\n**Raised** | @include layer('raised')\n**Overlay** |@include layer('overlay')\n**Sticky Nav** | @include layer('global-header')\n**Temporary Nav** | @include layer('left-nav')\n**Pop-out** | @include layer('pop-out')\n"
  },
  "135": {
    "parent": "style",
    "child": "motion",
    "section": "motion",
    "content": "## Principles\n\nMotion brings personality, tone, rhythm, and purpose to otherwise static objects. When used properly, UI motion should feel like a well choreographed dance, with all of the elements acting and reacting to one another in sync. Start with a clear objective, layering in movements that mimic reality and guide the user through an interface.\n\n### Purposeful\n\nMotion within an experience should be meaningful and intentional. It is used to establish hierarchy and draw the user’s attention to essential elements, giving them an understanding of an object’s role within the design. In order to convey this, the motion needs to be quick, direct, and precise.\n\n### Familiar\n\nMotion design should mirror movements we encounter in the physical world around us. Mimicking the expected behavior of objects from reality creates repetition and consistency, which enables users to anticipate what comes next. Providing motion feedback can help guide the user’s workflow, creating a clear path towards their end goal.\n\n### Unobtrusive\n\nMotion should be used with discretion—a little bit goes a long way. When applied properly, motion goes unnoticed. If a motion feels like it is calling attention to itself, tone it down! Subtlety ensures that the user won’t be distracted and allows for a cohesive motion experience across components.\n\n## Guidelines\n\n### Duration\n\nMovement should be slow enough that the user can recognize what's happening, but fast enough that they are never waiting. The magnitude of change in an animation and its importance combine to determine its duration. Most animations in our component library last between 100 and 300 milliseconds.\n\n<div data-insert-component=\"MotionExample\" data-props=\"duration,300ms,600ms\"></div>\n\n| Type                     | Duration  |\n|--------------------------|-----------|\n| Buttons/small components | 100-200ms |\n| Alerts/table reorder     | 250-300ms |\n| Panels/modals            | 300-400ms |\n| Page transitions         | 500-700ms |\n\n### Easing\n\nStrictly linear movement appears strange to the human eye. An animation should accelerate and decelerate smoothly throughout its duration to appear as natural as possible.\n\n<div data-insert-component=\"MotionExample\" data-props=\"easing,Easing,No-Easing\"></div>\n\nThere are three specific easing curves: standard, ease-out, and ease-in.\n\nYou can think of “in” and “out” as referring to the side of the curve where more time will be spent. So an ease-out will slow down into it's final position. More time is dedicated to the end of the curve or the \"out\".\n\n**Standard:** cubic-bezier(0.5, 0, 0.1, 1)\nThe standard cubic-bezier is used for the majority of animations. Especially when extra context is needed or when an element is removed from the screen but easily accessible (i.e. slide out navigation panel). Acceleration and deceleration occur asymmetrically to feel natural. This means that more emphasis is placed on the end of the curve than at the beginning. In most cases, a user will need greater easing at the end of a movement to allow their eye to register the new state of the element.\n\n<div data-insert-component=\"MotionExample\" data-props=\"standard\"></div>\n\n**Ease-out:** cubic-bezier(0, 0, 0.25, 1)\nThe ease-out cubic-bezier is used for adding elements to the stage or changing on-screen states at a users' input.\nEase-out is a much more dramatic curve because it is used for moving elements onto the stage. In which case, the object will slowly come to rest allowing the user to adjust to its arrival.\n\n<div data-insert-component=\"MotionExample\" data-props=\"ease-out\"></div>\n\n**Ease-in:** cubic-bezier(0.25, 0, 1, 1)\nThe ease-in cubic-bezier is used primarily for removing elements from the screen or stage.\nEase-in does not need as much easing since it is primarily used for objects exiting the stage. Therefore, slow it slightly to allow the user to recognize that it is exiting before speeds out of view.\n\n<div data-insert-component=\"MotionExample\" data-props=\"ease-in\"></div>\n\n### Properties\n\nThe reality of the web is that <a href=\"https://csstriggers.com/\" target=blank>some properties</a> are better to animate than others since some properties trigger more work for the browser than others. With a few exceptions, animations should be created by making changes to the transform and opacity properties.\n"
  },
  "136": {
    "parent": "style",
    "child": "spacing",
    "section": "spacing",
    "content": "**_Spacing_ tokens are used to consistently apply margin and padding across components and UIs. Having a set spacing scale brings a rhythm to the product and creates a natural and familiar flow from page to page.**\n\n## Intro to spacing\n\n### Two Scales\nCarbon has two spacing scales, one for general spacing within components and the other for layout spacing. Both are designed to complement the existing components and typography throughout the system.\n\nEach scale has its own distinct purpose. The two scales have certain overlapping values that serve two different roles so be mindful when picking a spacing token.\n\n\n| Scale         | Purpose     |\n|---------------|-------------|\n| **Spacing Scale** | Used for smaller, more refined spacing situations, specifically within the context of a component (ie. the space between a label and a Text Input).|\n| **Layout Scale**  | Used to create larger spacial differences most commonly with positioning components on a page (ie. the space between a Text fields and a Select). The Layout Scale controls the amount of white space set between larger elements.|\n\n\n### Applying spacing\nBoth the Spacing and the Layout scale can be applied to `margin` or `padding` properties. Likewise, these spacing tokens can be applied to both vertical and horizontal edges. The token takes the place of the values normally assigned to `margin` and `padding`. The following are all approved ways to syntactically apply Carbon spacing tokens:\n\n\n```css\nmargin: $spacing-xs;\nmargin: $layout-sm $layout-2xs;\nmargin: $spacing-xl 0 $spacing-sm 0;\nmargin-right: $layout-lg;\npadding: $spacing-sm;\npadding: $layout-lg $layout-sm;\npadding: $spacing-xl $spacing-sm 0 $spacing-sm;\npadding-left: $spacing-auto;\n```\n\n## Spacing Scale\nUse the Spacing Scale when building individual elements. It includes minute increments needed to create appropriate spacial relationships for detail-level designs. This scale is applied and used within all Carbon components.\n\n\n| Token             | rem    | px     | Example |\n|-------------------|--------|--------|---------|\n| **$spacing-3xs**  | 0.125  | 2      |![spacing-3xs example](images/spacing-3.svg)|\n| **$spacing-2xs**  | 0.25   | 4      |![spacing-2xs example](images/spacing-4.svg)|\n| **$spacing-xs**   | 0.5    | 8      |![spacing-xs example](images/spacing-5.svg)|\n| **$spacing-sm**   | 0.75   | 12     |![spacing-sm example](images/spacing-6.svg)|\n| **$spacing-md**   | 1      | 16     |![spacing-md example](images/spacing-7.svg)|\n| **$spacing-lg**   | 1.5    | 24     |![spacing-lg example](images/spacing-8.svg)|\n| **$spacing-xl**   | 2      | 32     |![spacing-xl example](images/spacing-9.svg)|\n| **$spacing-2xl**  | 2.5    | 40     |![spacing-2xl example](images/spacing-10.svg)|\n| **$spacing-3xl**  | 3      | 48     |![spacing-3xl example](images/spacing-11.svg)|\n\n\n![Example of Spacing tokens applied](images/spacing-1.png)\n_Example of Spacing tokens applied_\n\n\n### Other spacing options\nThere are a few other non-token methods that can be used for spacing elements. Each has its own unique use case.\n\n| Method           | Purpose     |\n|-----------------|-------------|\n| `center` | Used to fluidly center an element between two edges. |\n| `auto`   | Used on one side of an element to allow undefined space to automatically grow and shrink according to screen size. Typically used for asymmetrical fluid spacing. |\n| Gutter | Used to space items between the grid's 12 columns|\n\n\n## Layout Scale\nThe Layout Scale is used for arranging components and other UI parts into a full page layout. It has larger increments that are used to control the density of a design. Use the smaller layout tokens to create more dense compositions and direct relationships. Use the larger tokens to increase the amount of white space and to disassociate sections.\n\n| Token           | rem   | px   | Example |\n|-----------------|-------|------|---------|\n| **$layout-2xs** | 1     | 16   |![layout-2xs example](images/spacing-12.svg)|\n| **$layout-xs**  | 1.5   | 24   |![layout-xs example](images/spacing-13.svg)|\n| **$layout-sm**  | 2     | 32   |![layout-sm example](images/spacing-14.svg)|\n| **$layout-md**  | 3     | 48   |![layout-md example](images/spacing-15.svg)|\n| **$layout-lg**  | 4     | 64   |![layout-lg example](images/spacing-16.svg)|\n| **$layout-xl**  | 6     | 96   |![layout-xl example](images/spacing-17.svg)|\n| **$layout-2xl** | 10    | 160  |![layout-2xl example](images/spacing-18.svg)|\n\n\n![Example of Layout tokens applied](images/spacing-2.png)\n_Example of Layout tokens applied_\n\n\n### Using Layout Scale with the grid\nThe Carbon 12-column grid is still an acceptable and encouraged way to horizontally space UI elements. The Layout Scale is most commonly used for vertical spacing but it can also be applied for horizontal spacing when appropriate, especially in the case of fixed spacing.\n\n## Designing with space\nEvery part of a UI should be intentional including the empty space between elements. The amount of space between items creates relationships and hierarchy.\n\n### Creating relationships\nHaving less space between elements creates a close association and are therefore interpreted as related. Oppositely, elements that have a large amount of space separating them become disassociated with the relationship weakening the further away they get from each other.\n\nPatterns created through spacing can also create relationships. Elements arranged in the same spacing pattern are seen as related pieces that have equal weight.\n\nSpace can also be used to denote groups of associated information. This creates content sections on page without having to use lines or other graphical elements as a divider.\n\n### Creating hierarchy\nElements that have more spacing around them tend to be higher in importance than elements that have less space between them. Take this page for instance. The top level headers have more space surrounding them giving them focus and prominence. Then as the headers descend in importance they receive less space signaling they are subordinate.\n\nElements that are set close to each can be easily overlooked from an individual level. Users may see the grouping but not process each individual item. Therefore, if you have an element or content of high importance on the page consider giving it extra surrounding space to help it attract focus.\n\n### White space\nEmpty space also known as white space is a good thing. It can be used to break up sections on a page or to help create focus on certain element(s). White space helps with information processing; too much dense information can be disorienting and overwhelming for a user. Sections of a UI are allowed to be dense but the whole page should not be crowded; there should be white space to let the user's eye rest. Think of it like a period at the end of sentence, it metaphorically lets the user catch his or her breath before moving on.\n\n## FAQ\n\n##### Are spacing increments outside of the scale allowed?\nThere are always exceptions to the rule but deviating from the spacing scales should be avoided whenever possible.    \n\n##### Can I still use the Carbon grid for horizontal spacing?\nYes, in fact it's encouraged.\n\n##### Can I still use percentages for spacing?\nPercentages like 50% (1/2) or 33% (1/3) are still acceptable ways to divide a page. Percentages can all still be used to control max and min widths. However, using percentages for padding or margin inside of a component or element should be avoided (ex. `padding-right: 10%`). The exception to this is if you're applying it to fit the 5% grid margins.\n\n##### Are the spacing tokens responsive?\nNo, the tokens themselves do not change values based on the screen size. However, it is acceptable at page breakpoints to jump a step(s) on the spacing scale to fit spacial needs (ie. at 1440px `padding-right: $spacing-md` but at breakpoint 768px `padding-right: $spacing-xs`).\n"
  },
  "137": {
    "parent": "style",
    "child": "themes",
    "section": "themes",
    "content": "**_Carbon Themes_ are used to customize components to fit the specific needs of a brand or product.**\n\n## Introduction to theming\n\nDevelopers and designers can use Carbon Themes to modify existing components to fit their own specific visual styles and needs. Rather than changing each individual component's css or building modified components from scratch, components can now be easily customized by changing a set of universal variables that seamlessly propagate across all of the components.\n\n---\n\n<a href=\"http://themes.carbondesignsystem.com/\" target=\"_blank\">Explore Themes</a>\n\n### Theme terms\n\n| Term         | Definition                                                                                                     |\n| ------------ | -------------------------------------------------------------------------------------------------------------- |\n| **Theme**    | The set of unique values assigned to the universal variables                                                   |\n| **Value**    | A theme's unique styles (ie hex code, line weight etc) assigned to a universal variable                        |\n| **Role**     | The systematic usage/s of a value. Roles cannot be changed between themes.                                     |\n| **Variable** | The code identifier for a unique role or set of roles. Variables are universal and never change across themes. |\n\n## IBM Cloud theme\n\nThe Carbon Design System has a default theme which is based off of the IBM Cloud UI and IBM Design Language. When `carbon-components` is downloaded and installed, they are preset to use the default theme.\n\nThe default theme acts as a starting point; from there designers and developers only need to define how their own components and styles deviate from the default. A theme can change all of the values or as little as only one. Those different values are then packaged into a new theme which when called will override the values of the default.\n\n---\n\n[Carbon Themes repo](https://github.com/carbon-design-system/carbon-themes)\n\n## Variables\n\nBy using variables developers only need to make a change in one place to see a system wide change. They are used across multiple components and make it easy for components to be systematically updated while keeping global patterns and styles consistent.\n\nAll variables come pre-baked into the Carbon component source code. Variables are denoted by the prefix `$` (eg. `$brand-01`).\n\nThere are two categories of variables: **color** and **global.**\n\n### Color\n\nEach theme is assigned 25 universal color variables, which are determined by [common roles and usage](/style/color/usage). This allows for uniform color application across themes while giving each theme the freedom to express its own personality.\n\n```scss\n//// Carbon\n// Color Variables\n$brand-01: #3d70b2;\n$brand-02: #5596e6;\n$brand-03: #41d6c3;\n$inverse-01: #ffffff;\n$ui-01: #ffffff;\n$ui-02: #f4f7fb;\n$ui-03: #dfe3e6;\n$ui-04: #8897a2;\n$ui-05: #5a6872;\n$text-01: #152934;\n$text-02: #5a6872;\n$text-03: #cdd1d4;\n$field-01: #ebf0f7;\n$support-01: #e0182d;\n$support-02: #5aa700;\n$support-03: #efc100;\n$support-04: #5aaafa;\n```\n\n### Global\n\nThe second category is global variables. These control more general styling of components, such as layer usage or border width.\n\n```scss\n// Global\n$use-layer: true;\n$input-border: 1px solid transparent;\n$input-label-weight: 700;\n```\n\n## Theming applied\n\nThe following examples demonstrates the relationship between the different theming elements. Each element has a variable, a role, and a value determined by its theme.\n\n### Default theme applied\n\n![Default theme applied](images/theme-1.png)\n\n| Key | Variable      | Role               | Value                 | Theme   |\n| --- | ------------- | ------------------ | --------------------- | ------- |\n| 1   | $text-01      | Primary text       | #152935               | Default |\n| 2   | $text-03      | Hint text          | #cdd1d4               | Default |\n| 3   | $input-border | Input border       | 1px solid transparent | Default |\n| 4   | $brand-01     | Primary icon       | #3d70b2               | Default |\n| 5   | $ui-02        | Default background | #f4f7fb               | Default |\n| 6   | $field-01     | Field background   | #152935 @ 10%         | Default |\n\n### Custom theme applied\n\nHere is the same component but with a different theme applied. Notice how only the values and theme items changed. The variables and role are the same for both.\n\n![Custom theme applied](images/theme-2.png)\n\n| Key | Variable      | Role               | Value            | Theme  |\n| --- | ------------- | ------------------ | ---------------- | ------ |\n| 1   | $text-01      | Primary text       | #272727          | Watson |\n| 2   | $text-03      | Hint text          | #777677          | Watson |\n| 3   | $input-border | Input border       | 1px solid $ui-04 | Watson |\n| 4   | $brand-01     | Primary icon       | #047cc0          | Watson |\n| 5   | $ui-02        | Default background | #f6f6f6          | Watson |\n| 6   | $field-01     | Field background   | #ffffff          | Watson |\n"
  },
  "138": {
    "parent": "style",
    "child": "typography",
    "section": "overview",
    "content": "**_Typography_ is used to create clear hierarchies, useful organizations, and purposeful alignments that guide users through the product and experience. It is the core structure of any well designed interface.**\n\n## Typeface: IBM Plex\n\nCarbon uses the new IBM open-sourced typeface, IBM Plex. It has been carefully designed to meet IBM's needs as a global technology company and reflect IBM's spirit, beliefs and design principles. IBM Plex can be accessed and downloaded from the <a href=\"https://github.com/ibm/type\" target=\"blank\">IBM GitHub repo</a>.\n\nTo use IBM Plex with Carbon components, simply toggle the scss variable `$css--plex` to true and components will automatically update.\n\n```scss\n$css--plex: true;\n```\n\n#### Sans-serif font stack\n\n```scss\nfont-family: 'ibm-plex-sans', 'Helvetica Neue', Arial, sans-serif;\n```\n\n#### Monospaced font stack\n\n```scss\nfont-family: 'ibm-plex-mono', 'Menlo', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Courier;\n```\n\n## Type scale\n\n<div data-insert-component=\"TypographyTable\"></div>\n\n### How it works\n\nIBM designed a complementary type scale to use with IBM Plex. Each step on the scale is determined by the previous step on the scale. Mathematically it works out to the following:\n\n```markup\nX₂=X₁+{INT[(n-2)/4]+1}x2\n\nX : step n type size     X₁ : step n-1 type size\n```\n\nThe gap between two steps is always based on increments of two. It is a non-linear arithmetic progression, providing a smaller interval for smaller type and a larger interval for larger type, allowing for a wide range of scales. It provides sensible value and works well in a product environments.\n\n## Typographic treatments\n\n### Font weight\n\nFont weight is an important typographic style that can add emphasis and is used to differentiate content hierarchy. Font weight and size pairings must be carefully balanced. A bold weight will always have more emphasis than a lighter weight font of the same size. However, a lighter weight font can rank hierarchically higher than a bold font if the lighter weight type size is significantly larger than the bold.\n\nIBM Plex family provides a wide range of weights. However, only SemiBold, Regular, Light should be used for product design.\n\n---\n***\n|  |  |\n|--------------|------------|\n| Font-weight: 300 / Light <br> _Should only be used at sizes greater than or equal to 18px / 1.125rem_  | Light 300  |\n| Font-weight: 400 / Normal | Normal 400 |\n| Font-weight: 600 / Semi-bold   | Semi-bold 600   |\n\n### Body copy\n\nWe recommend using two sizes for body copy. The first is UI specific. To maximize screen real estate we chose a smaller 14px / 0.875rem body copy size for the standard UI console. However, for areas that have prolonged reading, like Documentation, we use a larger body copy size of 16px / 1rem to enhance readability.\n\n|Body copy         | px   | rem     |\n|------------------|-----|--------|\n|Standard UI       |14px |0.875rem|\n|Prolonged reading |16px |1rem    |\n\n### Line-height\n\nLine-height, traditionally known as leading, is one of several factors that directly contribute to readability and pacing of copy. Line-heights are based on the size of the font itself. Ideal line-heights for standard copy have a ratio of 1:1.5 (typesize : line-height). For example, a type at 16px/1rem would have a line-height of 1.5rem/24px (16 x 1.5). The exception to this rule are headings, which need less spacing and therefore have a line-height ratio of 1:1.25.\n\n|Line-height       |Ratio  |\n|------------------|-------|\n|Standard UI       |1:1.5  |\n|Headers           |1:1.25 |\n\n\n### Line-length\n\nLine-length, traditionally known as measure, is the number of characters in a single line. It also directly contributes to the readability and pacing of copy. Lines that are too long degrade eye tracking from line to line, making it difficult to gauge which line to read next. In contrast, lines that are too short make it difficult for a reader to maintain a steady reading rhythm. Short lines often create disproportionate ragged edges that negatively affect the design.\n\n**Line-length: 52 - 78 characters**\n"
  },
  "139": {
    "parent": "style",
    "child": "typography",
    "section": "type-styles-table",
    "content": "\n|Display sizes  |Spec                |\n|---------------|--------------------|\n|Giga - 76     |**Giga** <br /> font-size: 76px / 4.75rem <br /> font-weight: light / 300 <br /> line-height: 1.25 (95px) <br /> ``.bx--type-giga`` |\n|Mega - 54     |**Mega** <br /> font-size: 54px / 3.375rem <br /> font-weight: light / 300 <br /> line-height: 1.25 (68px) <br /> <span>.bx--type-mega</span>|\n\n|Basic headers  |Spec                |\n|---------------|--------------------|\n|Alpha - 36    |**Alpha** <br /> font-size: 36px / 2.25rem <br /> font-weight: light / 300 <br /> line-height: 1.25 (45px) <br /> <span>.bx--type-alpha</span>|\n|Beta - 28     |**Beta** <br /> font-size: 28px / 1.75rem <br /> font-weight: light / 300 <br /> line-height: 1.25 (35px)<br /> <span>.bx--type-beta</span>|\n|Gamma - 20    |**Gamma** <br /> font-size: 20px / 1.25rem <br /> font-weight: light / 300 <br /> line-height: 1.25 (25px) <br /> <span>.bx--type-gamma</span>|\n|Delta - 18    |**Delta** <br /> font-size: 18px / 1.125rem <br /> font-weight: SemiBold / 600 <br /> line-height: 1.25 (23px) <br /> <span>.bx--type-delta</span>|\n|Epsilon - 16  |**Epsilon** <br /> font-size: 16px / 1rem <br /> font-weight: SemiBold / 600 <br /> line-height: 1.25 (20px) <br /> <span>.bx--type-epsilon</span>|\n|Zeta - 14     |**Zeta** <br /> font-size: 14px / 0.875rem <br /> font-weight: SemiBold / 600 <br /> line-height: 1.25 (18px) <br /> <span>.bx--type-zeta</span>|\n|Omega - 12     |**Omega** <br /> font-size: 12px (0.75rem) <br /> font-weight: SemiBold (600) <br /> line-height: 1.25 (16px) <br /> <span>.bx--type-omega</span>\n\n|Other styles   |Spec                |\n|---------------|--------------------|\n|p - 16        |**p** <br /> font-size: 16px (1rem) <br /> font-weight: Regular (400) <br /> line-height: 1.5 (24px) <br /> p|\n|Caption - 12  |**Caption** <br /> font-size: 12px (0.75rem) <br /> font-weight: Regular (400) <br /> line-height: 1.5 (18px) <br /> <span>.bx--type-caption</span>|\n|Legal - 11    |**Legal** <br /> font-size: 11px (0.6875rem) <br /> font-weight: Regular (400) <br /> line-height: 1.5 (17px) <br /> <span>.bx--type-legal</span>|\n\n"
  },
  "140": {
    "parent": "style",
    "child": "typography",
    "section": "type-styles",
    "content": "## Carbon type styles\n\nCarbon uses a double-stranded heading hierarchy which abstracts the HTML document hierarchy (`h1`, `h2`, etc.) from the visual hierarchy of the layout. This layer of abstraction is important to maintaining the document outline of a page for tools like screen readers. In Carbon, this abstracted layer is known as type styles. Each type style has an assigned CSS classname. These classes are independent of location or type of element.\n\nType styles are simply pre-set configurations of typographic elements (font-size, weight, line-height, etc) and are most commonly used as headers. Selecting the appropriate type style is determined by layout or template structure. Products may have several levels of architecture or areas that require varying typographic hierarchies.\n\nTo use a type style insert the `.bx--type-x` classname associated with each style (ie `.bx--type-alpha`).\n\n<div data-insert-component=\"TypeStylesTable\"></div>\n\n"
  },
  "141": {
    "parent": "style",
    "child": "typography",
    "section": "typography-table",
    "content": "| rem       | px    | Actual size                  |\n|-----------|-------|------------------------------|\n| 0.75rem   | 12 px | Good design is good business |\n| 0.875rem  | 14 px | Good design is good business |\n| 1rem      | 16 px | Good design is good business |\n| 1.125rem  | 18 px | Good design is good business |\n| 1.25rem   | 20 px | Good design is good business |\n| 1.5rem    | 24 px | Good design is good business |\n| 1.75rem   | 28 px | Good design is good business |\n| 2rem      | 32 px | Good design is good business |\n| 2.25rem   | 36 px | Good design is good business |\n| 2.625rem  | 42 px | Good design is good business |\n| 3rem      | 48 px | Good design is good business |\n| 3.375rem  | 54 px | Good design is good business |\n| 3.75rem   | 60 px | Good design is good business |\n| 4.25rem   | 68 px | Good design is good business |\n| 4.75rem   | 76 px | Good design is good business |\n| 5.25rem   | 84 px | Good design is good business |\n| 5.75rem   | 92 px | Good design is good business |\n"
  },
  "142": {
    "parent": "style",
    "child": "typography",
    "section": "typography",
    "content": "**_Typography_ is used to create clear hierarchies, useful organizations, and purposeful alignments that guide users through the product and experience. It is the core structure of any well designed interface.**\n\n## Typeface: IBM Plex\n\nCarbon uses the new IBM open-sourced typeface, IBM Plex. It has been carefully designed to meet IBM's needs as a global technology company and reflect IBM's spirit, beliefs and design principles. IBM Plex can be accessed and downloaded from the <a href=\"https://github.com/ibm/type\" target=\"blank\">IBM Github repo</a>.\n\nTo use IBM Plex with Carbon components, simply toggle the scss variable `$css--plex` to true and components will automatically update.\n\n```scss\n$css--plex: true;\n```\n\n**Sans-serif font stack**\n\n```scss\nfont-family: 'ibm-plex-sans', 'Helvetica Neue', Arial, sans-serif;\n```\n\n**Monospaced font stack**\n\n```scss\nfont-family: 'ibm-plex-mono', 'Menlo', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', Courier;\n```\n\n## Type scale\n\n<div data-insert-component=\"TypographyTable\"></div>\n\n### How it works\n\nIBM designed a complementary type scale to use with IBM Plex. Each step on the scale is determined by the previous step on the scale. Mathematically it works out to the following:\n\n```\nX₂=X₁+{INT[(n-2)/4]+1}x2\n\nX : step n type size     X₁ : step n-1 type size\n```\n\nThe gap between two steps is always based on increments of 2. It is a non-linear arithmetic progression, providing a smaller interval for smaller type and a larger interval for larger type, allowing for a wide range of scales. It provides sensible value and works well in a product environments.\n\n## Typographic treatments\n\n### Font weight\n\nFont weight is an important typographic style that can add emphasis and is used to differentiate content hierarchy. Font weight and size pairings must be carefully balanced. A bold weight will always have more emphasis than a lighter weight font of the same size. However, a lighter weight font can rank hierarchically higher than a bold font if the lighter weight type size is significantly larger than the bold.\n\nIBM Plex family provides a wide range of weights. However, only SemiBold, Regular, Light should be used for product design.\n\n---\n***\n|  |  |\n|--------------|------------|\n| Font-weight: 300 / Light <br> _Should only be used at sizes greater than or equal to 18px / 1.125rem_  | Light 300  |\n| Font-weight: 400 / Normal | Normal 400 |\n| Font-weight: 600 / Semi-bold   | Semi-bold 600   |\n\n### Body copy\n\nWe recommend using two sizes for body copy. The first is UI specific. To maximize screen real estate we chose a smaller 14px / 0.875rem body copy size for the standard UI console. However, for areas that have prolonged reading, like Documentation, we use a larger body copy size of 16px / 1rem to enhance readability.\n\n## Body copy\n\n### Font size\n\nWe recommend using two sizes for body copy. The first is UI specific. Due to valuable screen real estate we chose a smaller 14px / 0.875rem body copy size for the standard UI console. However, for areas that have prolonged reading, like Documentation, we use a larger body copy size of 16px / 1rem to enhance readability.\n\n**Standard Console: 14px / 0.875rem**\n\n**Prolonged reading: 16px / 1rem**\n\n### Line-height\n\nLine-height, traditionally known as leading, is one of several factors that directly contribute to readability and pacing of copy. Line-heights are based on the size of the font itself. Ideal line-heights for standard copy have a ratio of 1.5. For example, a type at 1em/16px would have a line-height of 24px (16 x 1.5). The exception to this rule are headings, which need less spacing and therefore have a line-height ratio of 1.25.\n\n**Standard line-height: type size x 1.5**\n\n**Headings line-height: type size x 1.25**\n\n### Line-length\n\nLine-length, traditionally known as measure, is the number of characters in a single line. It also directly contributes to the readability and pacing of copy. Lines that are too long degrade eye tracking from line to line, making it difficult to gauge which line to read next. In contrast, lines that are too short make it difficult for a reader to maintain a steady reading rhythm. Short lines often create disproportionate ragged edges that negatively affect the design.\n\n**Line-length: 52 - 78 characters**\n\n## Custom styling\n\n### Letter-spacing\n\nCustom letter-spacing is used only on a few special styles. The styles that it can be applied to are headers, bold weights and always to All Caps.\n\n**Letter-spacing: 0.5px**\n\n### Font-smoothing\n\nFont-smoothing is only used on bold weights (700). It is never used on thin (200) and light (300) weights.\n"
  },
  "143": {
    "parent": "utilities",
    "child": "common-actions",
    "section": "common-actions",
    "content": "**_Common actions_ are frequently used actions that appear multiple times across different components and workflows. For platform consistency, these actions should only be applied in the ways described below.**\n\n## Regressive actions\n\n### Cancel\nCancel stops the current action and closes the component or item. The user should be warned of any possible negative consequences of stopping an action from progressing, such as data corruption or data loss. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#cancel)\n\n**Usage:** Use a Secondary Button or a Link.\n\n![Example of cancel in a modal](images/common-action-1.png)\n\n_Cancel action as a button._\n\n### Clear\nThis action clears data from fields or removes selections. Clear can also delete the contents of a document, such as a log. Typically, the default selection or value is reset for controls that have a default selection or value, such as Radio Buttons. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#clear)\n\n**Usage:** Use the `x` icon on the right side of a field, item, or value.\n\n![Example of clear in Multi-select Dropdown and in Search](images/common-action-2.png)\n\n_Clear action in Multi-select dropdown (top) and in Search (bottom)._\n\n### Close\nThis action closes the current page, window, or menu. For example, closing a secondary window containing help. Close is also used to dismiss information, such as notifications. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#close)\n\n**Usage:** Use the `close` icon, which is typically placed on the upper right side of the element. Do not use close in a Button.\n\n![Example of close in an Inline Notification](images/common-action-3.png)\n\n_Close action in an Inline Notification._\n\n### Delete\nThis action eradicates an existing object. Delete actions cannot be easily undone and are typically permanent. The user should be warned of the negative consequences of destroying an object, such as loss of data. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#delete)\n\n**Usage:** Use either the `delete` trash can icon, a Danger Button, or a danger option in a menu. A Danger Modal is used when a warning is needed to confirm an action.\n\n![Example of delete in a Modal and Overflow Menu](images/common-action-4.png)\n\n_Delete action in a Modal (top) and an Overflow Menu (bottom)._\n\n### Remove\nThis action removes an object from a list or item however the object is not destroyed as a result of the action. Multiple objects can be removed at once. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#remove)\n\n**Usage:** Use as a Button or `subtract` icon or glyph.\n\n![Example of Remove in a Structured List](images/common-action-5.png)\n\n_Remove action in as an icon._\n\n### Reset\nThis action reverts values back to their last saved state. The last saved state includes the values stored the last time the user clicked or triggered Apply. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#reset)\n\n**Usage:** Typically applied as a Link.\n\n![Example of reset in a filter](images/common-action-6.png)\n\n_Reset action in a filter._\n\n## Progressive actions\n\n### Add\nThis action adds an existing object to a list, set, or system. For example, adding a document to a folder. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#add)\n\n**Usage:** Use a Primary Button, Button with Icon,  `add--glyph` or `add--outline` icon.\n\n![Example of add as a Button with Icon in a Data Table](images/common-action-7.png)\n\n_Add action as a Button with Icon in a Data Table._\n\n### Copy\nCreates a new identical instance of the selected object(s) to a specific destination. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#copy)\n\n**Usage:** Use the `copy` icon with the confirmation 'copied' tooltip appearing post click.\n\n![Example of copy in a Code Snippet](images/common-action-8.png)\n\n_Copy action as an icon with Tooltip in a Code Snippet._\n\n### Edit\nThis action allows data or values to be changed. Edit commonly triggers a state change to the targeted object or input item. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#edit)\n\n**Usage:** Use as an option in a menu, or as a Button or `edit` icon.\n\n![Example of edit in a Data Table cell](images/common-action-9.png)\n![Example of edit in an Overflow Menu](images/common-action-10.png)\n\n_Example of edit options for a Data Table cell and Overflow Menu._\n\n\n### Next\nAdvances the user to the next step in a sequence of steps, such as in a wizard. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#next)\n\n**Usage:** Use a Button with Icon or a stand alone `forward` icon.\n\n\n![Example of next as a Button with Icon](images/common-action-11.png)\n_Next action as a Button with Icon in a Wizard._\n\n\n### Refresh\nThis action reloads the view of an object, list, or data set when the displayed view has become unsynchronized with the source. [View in glossary](http://carbondesignsystem.com/guidelines/content/glossary#refresh)\n\n**Usage:** Use the `refresh` icon or a Button.\n\n![Example of edit in a Data Table cell](images/common-action-12.png)\n_Refresh action as a Ghost Button with Icon in the action bar of a Data Table._\n"
  },
  "144": {
    "parent": "utilities",
    "child": "disabled-states",
    "section": "disabled-states",
    "content": "**_A disabled state_ is applied to a component when the user is not allowed to interact with the component due to either permissions, dependencies or pre-requisites. Disabled states completely remove the interactive function of a component.**\n\n## Disabled variations\n\n| Variation | Description |\n|-----------|-------------|\n|**Default disabled**| Cannot be clicked, selected or interacted with. It is not read by a screen reader and takes on the default disabled visual style.|\n|**Read-only**| The user cannot interact with it but content is still readable & accessible to a screen reader. The visual style should contain no interactive indicators such as `$brand-01`, hover states, or text embellishments (ie. underlines).|\n|**Hidden**| The component is completely hidden from view. The user does not know the option is there.|\n\n\n## Default disabled\nA default disabled state is used when a component is temporarily disabled due to dependencies (when one piece of software relies on another one) or pre-requisites. This scenario is a temporary state change that is most commonly triggered by a user's action or inaction. Once the dependencies have been resolved and/or the pre-requisites have been fulfilled the default disabled component returns to its enabled state. In a temporarily disabled scenario the component should never fully disappear from the user's view.\n\n![Default disabled example on the right](images/disabled-1.png)\n\n### Style\nDefault disabled states are most commonly styled by a decrease in opacity with no hover state change and `not-allowed` cursor applied. Refer to each individual component for the accurate disabled state.\n\n| Attribute | Default disabled style |\n|-----------|----------------|\n| Component | 50% opacity\n| Text | 25% opacity |\n| Icons | 50% opacity |\n| Hover | None |\n| Cursor | `not-allowed` |\n\n![Default disabled style examples](images/disabled-2.png)\n\n\n### Additional warning\nAn [Inline Warning Notification](http://carbondesignsystem.com/components/notification/code) can be shown in cases where a temporarily disabled item effects multiple items or the primary action of the flow. The Notification should describe how the user can enable or re-enable the disabled component.\n\n\n![Additional warning with default disabled example](images/disabled-3.png)\n\n\n## Hidden\n\nThe hidden disabled variation is used when something or someone does not have permission to view, interact with or take action on an element or content. This variation completely hides the component, page, action, etc. from the user's interface. The only way to enable the hidden element and have it resurfaced on the UI would be to change the assigned permission.\n\nFor example, when a user is the organization owner they are allowed to add members to the organization. Any users that are not an organization owner would not be shown the “Add member” button on a team directory page. Once the user is made an organization owner **then and only then** will the button be visible.\n\n![Example of hidden disabled content on the right](images/disabled-4.png)\n\n\n## Read-only\nIn scenarios where the content of a disabled component or element is still relevant to the user or important to task completion, then the read-only variation is  used. This allows the user to read the information but not interact with or change it. Read-only content should always be accessible to a screen reader.\n\n### Style\nThe visual style of the read-only states vary by component but should never contain any interactive indicators such as `$brand-01` color usage, hover states, or text embellishments (ie. underlines).\n"
  },
  "145": {
    "parent": "utilities",
    "child": "filtering",
    "section": "filtering",
    "content": "**_Filtering_ is the action by which a user adds or removes data items from a shown data set by turning on and off certain predefined criteria.**\n\n## Selecting filters\n\n### Single selection\nA single selection filter is when the user can pick **only one criteria** from a category to modify the data results. Under the hood, single selection is a radio button. Ways in which a single selection filter can manifest is in a/an:\n\n- Basic Dropdown\n- Inline Dropdown\n- Search\n- Radio Button set (either stand alone or within a menu)\n\n![single selection filters](images/filter-1.png)\n\n_Single selection filter as an Inline Dropdown_\n\n\n### Multi-selection\nA multi-selection filter is used when the user has the option to pick **more than one criteria** from a category to modify the data results. Under the hood, multi-selections are Checkboxes. Ways in which a single selection filter can manifest is in a/an:\n\n- Multi-select dropdown\n- Inline multi-select dropdown\n- Search with tags\n- Checkbox set (either stand alone or within a menu)\n\n![multi-selection filters](images/filter-2.png)\n\n_Multi-selection filter set in a menu_\n\n### Multiple categories\nA category is a set of filter items within the same topic. For example, \"size\" is the category and small, medium, large, & extra large are the filter choices. Multiple filter categories may be applied to the same data set. For example, the user can filter by size as well as color and price range.\n\nMultiple category selection is most commonly manifested in either a vertical list on the left side of the page or within a horizontal drawer at the top of the data set. Multiple categories should never be put within a menu or dropdown.\n\n![Multiple filter categories examples](images/filter-3.png)\n\n_Multiple filter categories in a left panel_\n\n\n## Triggering filters\n\n### Batch filter\nA batch filter is when all filters are applied together at the end of the selection process. The data set only refreshes once. The trigger is most commonly an \"apply\" filter button.\n\nThe batch filter is beneficial to use when the user is making several filtering selections across different categories that may take a longer time to cognitively process. Batch filtering is also a good solution for slow data return speeds. This can prevent the user from having to wait for the data to load after every selection.\n\n![Batch filter example](images/filter-4.png)\n\n_Batch filter example in a drawer_\n\n### Interactive filter\nAn interactive filter returns results after each individual selection is made. The trigger is the individual selection and manipulates the data in real time. This is a good solution for when the user is only selecting from one category or the user is expected to only make one filter selection.\n\n## Filter interaction\nEach filter interaction should contain the following patterns and states:\n\n- Default start state\n- Unselected & selected state\n- Filter applied state\n- Clear filter(s) action\n\n### Starting states\nFilters within each category should start either as all unselected or all selected. When using multiple categories the start state can vary from category to category. If the user wants only one or a few criteria to be excluded from the results then all filters should be selected at the start. Oppositely, if the user wants to see only results related to one particular criteria then all filters should start as unselected.\n\n### Filter applied\nIf the filter(s) can be hidden in either a drawer, dropdown, or menu, then there should be an indicator visible on the closed filter state that informs the user that filters have been applied. At a minimum the indicator should include the number of filters applied and have the option to clear filters without re-opening the filter container.\n\n---\n***\n> \n![Hidden filters not applied](images/filter-5.png)\n\n_Filters not applied_\n\n---\n***\n> \n![Hidden filters applied](images/filter-6.png)\n\n_Filters applied_\n\n### Resetting filters\nEach category should have a way to clear all applied filters at once without having to interact with each individual item. Clearing filters returns the filters to their original default starting state.\n\nIf multiple categories have been applied to the same data set then there should be a way to dismiss all filters across all categories at once.\n\n![Filter reset example](images/filter-7.png)\n\n_Filter reset example for all categories and a single category_\n"
  },
  "146": {
    "parent": "utilities",
    "child": "loading",
    "section": "loading",
    "content": "**_Loading_ is applied when additional information takes an extended amount of time to process and appear on screen. Skeleton states and the Loading component are two interactions that communicate to users that data is currently loading and the screen is not frozen.**\n\n\n## Skeleton States\n\nSkeleton States are simplified versions of Carbon Components used on an initial page load to indicate to the user that the information on the page has not entirely loaded in yet. They should only appear for 1-3 seconds, disappearing once the actual content loads in.\n\nA Carbon Skeleton State is shown as a stripped down, bare bones version of a component as well as a `field-01` rectangular block for text. Motion is used in a Skeleton State to convey that the page is not stuck loading but rather that data is still being pulled in.\n\n![Example of a text Skeleton State in use on a Data Table](images/data-table-skeleton-state.gif)\n_Example of a text Skeleton State in a Data Table._\n\n\n### Usage\nSkeleton States are not meant to represent every component on a page but rather to illustrate the overall architecture of the page while it's loading. Typically components that should have Skeleton States are container-based components (Tiles, Structured List, etc.), data-based components (Data Tables, Cards, etc.), and data-based text. Action components (Button, Input Fields, Checkboxes, Toggle, etc.) do not need to have a Skeleton State in most use cases as they are not pulling in data and do not need additional time to load in.  \n\nThere are several components that should **never** be represented by a Skeleton State since the data for these items should already be loaded in by the time a user interacts with them. These include:\n\n- Toast Notification\n- Overflow Menu\n- Dropdown Items\n- Modal (elements inside a modal may have a Skeleton State, however the Modal itself should not be skeletonized)\n- Small and Large Loader (used for other loading cases but not Skeleton States)\n\n\n### Progressive loading\n\nWhen utilizing Skeleton States, the order in which components, data, and content load in needs to be planned and designed for using the progressive loading technique. Progressive loading is when content loads in batches. The first batch to load should be the most simplified view of the page, followed by the secondary and tertiary batches, with each batch adding more page detail until the entire viewport has been loaded. The primary batch should illustrate a page's structural layout (the Skeleton State versions of the container-based components), data-based text (the Skeleton State version of text) and non-data text. Secondary and tertiary batches can include images, content below the fold, interactive (action-based) components, and/or data-based text. Remember that not all items need a Skeleton State, but instead can be expressed as negative or white space until they load in. For example a 600 x 600px image could be shown as a 600 x 600px area of white space until the secondary or tertiary batch when the full image loads in.\n\n![Example of a dashboard using Skeleton States, to load in with progressive loading over three screens.](images/Progressive-Loading.png)\n_Example of a dashboard using Skeleton States to demonstrate progressive loading_\n\n\n\n### Code\n\nThe skeleton state for _most_ components can be displayed simply by adding a modifier class of `bx--skeleton` to the component while data is loading and then removing the class after it has loaded in. You will have to create your own custom javascript to implement this based on your environment.\n\n```html\n<button class=\"bx--btn bx--btn--primary bx--skeleton\"></button>\n<button class=\"bx--btn bx--btn--primary\">Button loaded</button>\n```\nIf you are using our [React library](http://react.carbondesignsystem.com/) there are separate skeleton state components available to display while data is loading. View an [example](https://codesandbox.io/s/wq264y43k8) of this for React.\n```javascript\nconst DataComponent = ({ loading, data }) => {\n  if (loading) {\n    return <CarbonComponent.skeleton />\n  }\n  return <CarbonComponent field1={data.field1} />\n}\n```\n\n| Component          | Vanilla | React |\n|--------------------|---------|-------|\n| Accordion          |  | ![available](images/checkmark--glyph.svg)|\n| Breadcrumb         | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Button             | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Checkbox           |  | ![available](images/checkmark--glyph.svg)|\n| Code Snippet       |  | ![available](images/checkmark--glyph.svg)|\n| Data Table         |  | ![available](images/checkmark--glyph.svg)|\n| Date Picker        |  | ![available](images/checkmark--glyph.svg)|\n| Dropdown           | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Icon               | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Label              | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Number Input       | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Pagination         |   | ![available](images/checkmark--glyph.svg)|\n| Progress Indicator | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Radio Button       |  | ![available](images/checkmark--glyph.svg)|\n| Search             |  | ![available](images/checkmark--glyph.svg)|\n| Skeleton Text      | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Slider             | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Small Toggle       | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Structured List    |   | ![available](images/checkmark--glyph.svg)|\n| Tabs               | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Tag                | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n| Text Area           |  | ![available](images/checkmark--glyph.svg)|\n| Text Input         |  | ![available](images/checkmark--glyph.svg)|\n| Toggle             | ![available](images/checkmark--glyph.svg)| ![available](images/checkmark--glyph.svg)|\n\n\n\n## Loading component\n\nA Loading component is a rotating shape indicating the application is processing and informs users that the system has reacted to an action taken.\n\nUse cases include:\n\n- When data processing takes more than a few seconds but no longer than one minute to load in\n- User inputted data is being saved or submitted\n\n\n### Large Loader\n\nThe Large Loading component should be used when the entire page is processing, for example when data is being submitted or saved by the user.\n\n![Example of a Large Loader in the context of a form page where data is being submitted.](images/Large-Loader.png)\n_Example of a Large Loader in context._\n\n### Small Loader\nThe Small Loading component is used when a single component is processing and appears inline to the relative component. For example, when a user tries to restart a stopped application, a Small Loading component indicates the system is processing the restart request.\n\n![Example of Small Loader in the context of a Detail Page Header.](images/small-loading-1.gif)\n_Example of Small Loader in context._\n\n## 'Load more' Button\n\nA 'Load more' Button may be used to extend a list where there are a large number of options (25 or more) that the user can choose from. It can also be used in cases where the list of options is populated via a database. Using 'Load more' allows the data to load in progressive batches.\n\n![Example of a 'Load More' Button inside of a Filter Dropdown.](images/load-more.png)\n_Example of 'Load more' Button in context._\n\n<!--## Progress Loader\n\nA Progress Loader is used to represent a specific load time for an item. This amount of time, whatever unit, can be measured based on actual events.\n\nUse cases for a Progress Loader include:\n\n- A file being uploaded (0 to 100%)\n- A new item being provisioned (0 to 10 minutes)\n\n*Example gif of file being uploaded (Is this the best use case?*-->\n"
  },
  "147": {
    "parent": "utilities",
    "child": "overflow-content",
    "section": "overflow-content",
    "content": "**_Overflow content_ is text, such as a paragraph or a text string, that exceeds a desired space. It also applies to a series of components that surpass a given space. Overflow content is typically reduced to fit a space or reduce repetition. Truncation and ‘Show more’ Buttons are two ways to indicate that overflow content is continued elsewhere or below the fold.**\n\n\n## Truncation\nTruncation is typically used for static text or Links. Truncated items are represented by an ellipse `...` and should represent three or more truncated characters in a text string. There must be at least four characters of non-ellipsed content in a truncated string. Truncated items always include a browser tooltip on hover to show the entire string, name, or phrase that the ellipses is representing. The only time a browser tooltip does not need to be used is at the end of a truncated paragraph.    \n\n![Example of a browser tooltip being used for truncation.](images/Browser Tooltip.png)\n\n_Example of a browser tooltip being used for truncation._\n\n---\n***\n>\n![Example of end-line truncation for a paragraph.](images/Truncated-Paragraph.png)\n\n_Example of end-line truncation for a paragraph._\n\n### Usage\nGood use cases for truncation include:\n\n- Breadcrumbs\n- Pagination\n- Long URL links\n- Paragraph of text (i.e. a description paragraph)\n- Truncation of a long item name (user or platform generated)\n\n\nTruncation should **not** be used on page headers, titles, labels, error messages, validation messages, Notifications, menu items, or Tabs.\n\n### Variations\nThere are three types of truncation: front-line, midline, and end-line.\n\n| Type  | Purpose  | Default  |  Truncated |   \n|---|---|---|---|\n| **Frontline**  | Used at the beginning of a text string to indicate the text is continued from a previous location.  | `123456789`  |  ...56789 |\n| **Midline**  | Used when several text strings have different beginnings and/or endings but the exact same middle characters. Can also be used to shorten a phrase or text string when the end of a string cannot be truncated by an ellipses.    | `123400005678` `987600004321`  | \t`1234...5678` `9876...4321`  |   \n| **End-line**  | Used at the end of a character string or paragraph to indicate that there is more content in another location, to show that the pattern in a sequence continues, or to shorten a long text string.    | `123456789`  | `12345...`  |   \n\nAn ellipse `...` on its own may also represent condensed content. This type of truncation requires an overflow menu on hover instead of a browser tooltip. See [Breadcrumb](link) or [Pagination](link) for additional examples of this.  \n\n![Example of a truncated Breadcrumb utilizing an ellipse with an Overflow Menu.](images/Ellipse.png)\n\n_Example of a truncated Breadcrumb utilizing an ellipse with an Overflow Menu._\n\n### Code\n\nTo use front and end-line truncation enter the appropriate class below and add `title` to populate the Browser Tooltip that appears when truncated text is hovered. The `width` of the container (or the text element itself) also needs to be configured in order to calculate where the truncation will start.\n\n| Type  | Class  |\n|---|---|\n| **Frontline**  | `.bx--text-truncate--front`  |\n| **End-line**  | `.bx--text-truncate--end`  |\n\n**Example Usage**\n\n```html\n<div class=\"container\">\n  <span title=\"123456789\" class=\"bx--front-line\">123456789</span>\n</div>\n```\n\n```css\n.container {\n  width: 65px;\n}\n```\n\n```css\n.bx--front-line {\n  width: 100%;\n  display: inline-block;\n  direction: rtl;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n```\n\n**Result**\n\n<img src=\"https://media.github.ibm.com/user/1679/files/1c695894-538c-11e8-8cd2-bb0b1cac151b\" alt=\"Result\" style=\"width: 20%; margin-top: 0\" />\n\n\n#### Midline truncation\n\nMidline truncation does not have its own class as it requires JavaScript. We have created an example in CodePen to show how it is implemented.  \n\n<iframe height='300' scrolling='no' title='Middle Truncation' src='//codepen.io/team/carbon/embed/KRoBQe/?height=300&theme-id=30962&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/team/carbon/pen/KRoBQe/'>Middle Truncation</a> by Carbon Design System (<a href='https://codepen.io/carbon'>@carbon</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n### 'Show more' Buttons\nThe ‘Show more’ Button is used when there is a significant amount of overflow content. Implementing a ‘Show more’ Button gives a user the ability to see the content in more digestible chunks as opposed to all at once. A ‘Show more’ Button is used in place of scrolling, gradients, or fades as they are more prominent and actionable. If needed a 'Show less' can be used to again hide the content the user opened. ‘Show more’ can also be presented as ‘Load more’ in cases where performance is a concern. See the [Loading](link) section for additional details.\n\n\n![Example of a Code Snippet utilizing the 'Show more' Button.](images/show-more.gif)\n\n_Example of the 'Show more' Button in context._\n"
  },
  "148": {
    "parent": "whats-new",
    "child": "whats-new",
    "section": "whats-new",
    "content": "**June 4, 2018: V9 Release**\n\n## Website\n\n- Add-ons section has been removed. There is an [Add-ons](getting-started/add-ons) page that now lives under the Getting Started section\n- The [Contributing](/getting-started/contributing) page has been moved from the Guidelines to the Getting Started section\n- [Data Visualization](/data-vis/overview/general) has moved from under the components section into its own section\n\n## Components\n\n### New\n\n- [Inline Code Snippet](/components/code-snippet/code)\n- [Icon Tooltip](/components/tooltip/code)\n- [Definition Tooltip](/components/tooltip/code)\n- [Danger Modal](/components/modal/code)\n- [Danger Primary Button](/components/button/code)\n\n### Updates (Visual & Interaction)\n\n- [Code snippets](/components/code-snippet/code) now have a new style and new interaction options. There is also a variation with line numbers available.\n- [Interactive Tooltip](/components/tooltip/code) (formerly Tooltip) can now contain interactive elements and opens on click\n- Updated all inputs so they meet the new WCAG 3:1 color ratio guidelines for defined objects\n  - [Date & Time Picker](/components/date-picker/code)\n  - [Dropdown](/components/dropdown/code)\n  - [Number Input](/components/number-input/code)\n  - [Search](/components/search/code)\n  - [Select](/components/select/code)\n  - [Slider](/components/slider/code)\n  - [Text Input](/components/text-input/code)\n  - [Text Area](/components/text-input/code)\n\n## Color\n\nGo check out the [Swatches](/style/color/swatches) page to see the new color options and updates.\n\n- Colors have been updated to make them more accessible— changing hex values and roles for some of the swatches\n- The new, updated palette is available with Design Kit\n- The changes include (bold indicates a new color token):\n\n  - $ui-05 #5A6872 (passing 4.5:1, high contrast border, secondary icons)\n  - $ui-04 #8897A2 (passing 3:1, now used for emphasis borders)\n  - $ui-03 – #DFE3E6 (not passing 3:1, now used for subtle borders)\n  - $support-01 - #E0182D (passing 4.5:1)\n  - $text-03 - #CDD1D4 (not passing 4,5:1, used only for placeholder text)\n  - $field-01 - #F4F7FB (input field background on ui-01)\n  - **$field-02 - #FFFFFF (input field background on ui-02)**\n  - **$inverse-02 - #272d33 (passing 4,5:1)**\n\n- There are four new hover tokens added to the Carbon palette. They can now be found on the [Swatches](/style/color/swatches) page and are available in the Design Kit and palette plugin\n\n  - $hover-primary – #30588c\n  - $hover-primary-text – #294c86\n  - $hover-row – #5596e6 at 10% opacity\n  - $hover-secondary – #3d70b2\n  - $hover-danger – #bd1427\n\n## Icons\n\n- Check out the [Iconography](/style/iconography/library) page to see the new icon style\n- All Icons are now `16x16px` (24x24px is no longer being supported).\n- The `--glyph` modifier has been deprecated. Most of the glyph variations were replaced with a `--solid modifier`. Check out the [icon migration docs](https://github.com/carbon-design-system/carbon-icons/blob/master/docs/migration-guides/migration-v7.md) to see the status of all the icons.\n\n## Design Kit\n\n- Download the latest version of the [Carbon Design Kit & Library](https://github.com/carbon-design-system/carbon-design-kit)\n- Components on the Component page are now split up into five different artboards: Controls, Inputs, Content, Navigation, Informative, and Data Tables\n- Library has been made more flexible and customizable\n- Kit and library have been updated with the new colors, components, and icon styles.\n\n<hr class=\"divider\">\n\n**May 16, 2018**\n\n## Utilities\n\nThere is a new section called Utilities which gives guidance on common pattern handlings.\nUnlike the component section, these guidelines offer usage guidance with minimal code documentation. To read more about each of these utilities see the sections below:\n\n- [Common Actions](utilities/common-actions)\n- [Disabled States](utilities/disabled-states)\n- [Filtering](utilities/filtering)\n- [Loading](utilities/loading)\n- [Overflow Content](utilities/overflow-content)\n\n## Themes\n\nThe [Themes page](style/themes) has been moved to the Style section.\n\n<hr class=\"divider\">\n\n**March 9, 2018**\n\n## Style\n\n### Systematic spacing\n\nWe have tokenized our spacing and now offer two systemized scales. The Spacing Scale defines space within a component while the Layout Scale is used to help position elements on a page. Check out the new [Spacing](style/spacing) section to learn more about these scales and read the rest of the spacing guidelines.\n\n## Design Kit\n\n### Sketch Libraries\n\nWe have recorded a [Carbon Design Kit with Sketch Libraries Tutorial](https://www.youtube.com/watch?v=Tm-s0Hcbwck&list=PL4BR_VlGD31aVhe1ScKk9UOhbi8YOL0dF) over on our YouTube channel. It goes over how to download the Carbon Sketch Kit, import a Sketch Library, as well as how to get and accept library updates/notifications. It also gives a brief overview of how the Library is organized and how to use the overrides panel and library symbols.\n\n<hr class=\"divider\">\n\n**February 23, 2018**\n\n## Design Kit\n\n### Sketch Libraries\n\nThe Carbon Design Kit now includes Sketch Libraries, a better way to share and version symbols across Sketch files. Check out our [Sketch Libraries wiki](https://github.com/carbon-design-system/carbon-design-kit/wiki/Sketch-Libraries-Overview) to get a quick tutorial on libraries.\n\n![sketch libraries in the carbon design kit](images/sketch-libraries.png)\n_Sketch Libraries in the Carbon Design Kit_\n\n### Sketch Plugins\n\nWith the latest release of the Design Kit, we've included the [Sketch Palettes](https://github.com/andrewfiorillo/sketch-palettes) plugin, which allows you to load in pre-saved palettes for Sketch. You can import Carbon's four color palettes (Carbon default theme, Data Vis primary, Data vis secondary, and Data Vis tertiary) into your working Sketch document.\n\n![Sketch Palettes plugin](images/sketch-palettes.png)\n_Sketch Palettes plugin_\n\nThere's also a variety of other [plugins](https://github.com/carbon-design-system/carbon-design-kit/wiki/Suggested-Sketch-Plugins) we recommend to help improve your workflow using Sketch.\n\nDownload the latest Kit today!\n\n---\n\n<a href=\"https://github.com/carbon-design-system/carbon-design-kit\" target=\"_blank\">Carbon Design Kit</a>\n\n## Carbon Sessions\n\nInterested in getting some 1:1 time with the Carbon team? Carbon Sessions is a chance for anyone using the Carbon Design System to ask questions and get feedback. Sessions happen very Wednesday morning (Central Standard Time). Time slots are around 10 minutes, but feel free to book more than one if you need additional time.\n\nSign up for a [Carbon Sessions time slot](https://github.com/carbon-design-system/design-system-website/wiki/Carbon-Sessions) if you're interested in chatting further!\n\n<hr class=\"divider\">\n\n**February 9, 2018**\n\n## Components\n\n### Dropdown\n\nWe're excited to bring some added functionality that enhances our [Dropdown](/components/dropdown) component. Filtering, Multi-select, and Inline Dropdown are new additions to our basic Dropdown component.\n\n**Note: This component is currently only available in [React](http://react.carbondesignsystem.com/?selectedKind=ComboBox&selectedStory=default&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel).**\n\n![example of Dropdown with Multi-Select](images/dropdown-new.gif)\n_Example of Multi-Select Dropdown_\n\n### Small Toggle\n\nSmall Toggle is a style variation of our traditional [Toggle](/components/toggle) component. It's more compact in size, which allows them to be used in Data Tables or inline with Form elements.\n\n---\n\n---\n\n> ![example of Small toggle](images/small-toggle.gif) > _Example of Small Toggle_\n\n### Data Vis: Bar Graph\n\nBar Graph is the newest addition to our Data Visualization collection. It comes in two variations: Bar Graph and Grouped Bar Graph. You can use this component to represent quantitative information, such as comparing the taco sales between Austin taco shops in the month of June.\n\nRead more about the usage of [Bar Graph](http://carbondesignsystem.com/data-vis/bar-graph/usage), or check out our [CodePen](https://codepen.io/team/carbon/pen/OzBKKN) to view the live demo.\n\n![Bar Graph example](images/usage-bar-graph.png)\n\n### Data Vis: Tooltip\n\nWe have created several Data Visualization Tooltip variations to show the value for a specific data point or increment range. Tooltips appear on hover above or below a data representation, depending on the use case.\n\nRead more about the usage of [Data Vis Tooltips](/data-vis/tooltip/usage), or check out our [CodePen](https://codepen.io/team/carbon/pen/rJWymp) to view the live demo.\n\n![small tooltip in a bar graph](images/usage-small-tooltip.png)\n\n_Small Tooltip used within a Bar Graph_\n"
  },
  "149": {
    "parent": "your-product-on-ibm-cloud",
    "child": "service-providers",
    "section": "design-approval",
    "content": "### Baseline requirements\nServices must meet the following baseline requirements in order to qualify for Experimental approval and beyond. See the [General tab](/getting-started/service-providers/general) for details on each capability:\n\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-1\" class=\"bx--checkbox\" type=\"checkbox\" value=\"urc\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-1\" class=\"bx--checkbox-label\">Utilize Resource Controller (RC)</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-2\" class=\"bx--checkbox\" type=\"checkbox\" value=\"dys\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-2\" class=\"bx--checkbox-label\">Develop your service as a microservice</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-3\" class=\"bx--checkbox\" type=\"checkbox\" value=\"uit\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-3\" class=\"bx--checkbox-label\">Utilize IAM to grant and enforce access to your service</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-4\" class=\"bx--checkbox\" type=\"checkbox\" value=\"bct\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-4\" class=\"bx--checkbox-label\">Bill customers through BSS</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-5\" class=\"bx--checkbox\" type=\"checkbox\" value=\"eic\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-5\" class=\"bx--checkbox-label\">Employ IBM Cloud platform Metering</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-6\" class=\"bx--checkbox\" type=\"checkbox\" value=\"iyr\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-6\" class=\"bx--checkbox-label\">Index your resource utilizing GhoST</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-7\" class=\"bx--checkbox\" type=\"checkbox\" value=\"eys\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-7\" class=\"bx--checkbox-label\">Ensure your service is Global Catalog compliant</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-8\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-8\" class=\"bx--checkbox-label\">Follow IBM Cloud platform UI behaviors, especially:</label>\n</div>\n<div style=\"margin-left: 1.5rem\" class=\"bx--form-item bx--checkbox-wrapper\">\n    <input id=\"bx--checkbox-9\" class=\"bx--checkbox\" type=\"checkbox\" value=\"dol\" name=\"checkbox\">\n    <label style=\"display: block;\" for=\"bx--checkbox-9\" class=\"bx--checkbox-label\">Do not launch out to new a browser window or tab to work with your resource</label>\n  </div>\n<div style=\"margin-left: 1.5rem\" class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-10\" class=\"bx--checkbox\" type=\"checkbox\" value=\"uccnew\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-10\" class=\"bx--checkbox-label\">Use Carbon components to build your UI</label>\n</div>\n\n### Experimental\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-11\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-11\" class=\"bx--checkbox-label\">Download the <a style=\"padding: 0 .25rem\" href=\"http://journey-map.stage1.mybluemix.net/#\" target=\"_blank\">Journey map kit</a> and complete an as-is journey of your service.</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-12\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-12\" class=\"bx--checkbox-label\" style=\"line-height: 1.5\">Schedule a live walk-through with your assigned design Cloud focal in staging of your product from discovery, to implementation, to usage.</label>\n</div>\n\n### Beta\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-13\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-13\" class=\"bx--checkbox-label\">Complete five user tests while your service is in Beta. Refer to these <a href=\"https://ibm.ent.box.com/notes/220208728866?s=9zaeshrkbe3u0xxsuj65kojx8ey0qw81\" target=\"_blank\">user testing guidelines</a> to help you choose and conduct tests.</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-14\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-14\" class=\"bx--checkbox-label\">Conduct a live walk-through in staging of your product from discovery, to implementation, to usage with your assigned design Cloud focal.</label>\n</div>\n\n### GA\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-15\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-15\" class=\"bx--checkbox-label\">Service provider agrees to maintain and support the offering. Additional functionality and major design changes will be subject to a design review with your assigned design Cloud focal.</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-16\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-16\" class=\"bx--checkbox-label\">Demonstrate NPS is enabled for your service.</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-17\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-17\" class=\"bx--checkbox-label\">Present your current NPS data at the Tuesday Cloud Platform Playback.</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-18\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-18\" class=\"bx--checkbox-label\">Conduct a live walk-through of your product from discovery, to implementation, to usage with your assigned design Cloud focal.</label>\n</div>\n\n### Iterations\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-19\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-19\" class=\"bx--checkbox-label\">Use Optimizely, an A/B testing tool, to validate future iterations in production. Follow [these instructions](https://pages.github.ibm.com/Bluemix/platform-analytics/tools/optimizely/) to apply for access, receive training, and to get started with the tool.</label>\n</div>\n<div class=\"bx--form-item bx--checkbox-wrapper\">\n  <input id=\"bx--checkbox-19\" class=\"bx--checkbox\" type=\"checkbox\" value=\"fip\" name=\"checkbox\">\n  <label style=\"display: block;\" for=\"bx--checkbox-19\" class=\"bx--checkbox-label\">Demonstrate NPS is enabled for your service.</label>\n</div>\n"
  },
  "150": {
    "parent": "your-product-on-ibm-cloud",
    "child": "service-providers",
    "section": "general",
    "content": "## Introduction\n\nThe IBM Cloud platform is a collection of behaviors and capabilities that are tied together through the IBM Cloud console. Fully participatory services share capabilities and tooling to ensure a professional, performant, consistent, and cohesive platform experience.\n\nThis document will guide you through the design and implementation of your service as part of the IBM Cloud Platform. It will provide instructions for specific aspects of the presentation layer, such as using Carbon and creating your service icons. Additionally, it will enumerate the requirements for Service Governance approvers and the process to get that approval. Following this guidance and execution steps will ensure the design portion of the approval process is straightforward.\n\n\nServices must adopt these foundational capabilities to actively participate in the IBM Cloud platform:\n\n* [RC (Resource Controller)](https://console.stage1.bluemix.net/docs/developing/resource-controller/overview.html#resource-controller): Manage the lifecycle of cloud resources using this next-generation provisioning layer.\n* [Bluemix Console SDK](https://console.stage1.bluemix.net/docs/developing/console-sdk/index.html#getting-started): Learn how to develop your service as a microservice so that it will seamlessly integrate into the IBM Cloud platform.  \n* [IAM (Identity and Access Management)](https://console.stage1.bluemix.net/docs/developing/Access-Management/index.html#iam_features): Securely authenticate users and control access to all cloud resources consistently. Learn how to onboard your service to IAM [here](https://console.stage1.bluemix.net/docs/developing/Access-Management/checklist_overview.html#getting-started-onboarding-overview).\n* [BSS (Business Support Systems)](https://console.stage1.bluemix.net/docs/services/onboarding/new_service.html#onboarding-a-new-service-into-bluemix): Develop your pricing plan in RMC (Resource Management Console) by enabling [Metering](https://console.stage1.bluemix.net/docs/developing/metering/index.html#reporting_resource_usage) so IBM Cloud users are billed according to usage data.\n* [GhoST (Global Search and Tagging System)](https://console.stage1.bluemix.net/docs/developing/GhoST/onboard.html#getting-started): Add resource types so they are visible in the IBM Cloud filesystem to better enable platform-wide search. Follow [these instructions](https://ibm.ent.box.com/s/qopacahpyg34z2urevv74mter742yfse) to onboard a new resource type. For more help, contact someone via Slack at [#global-search-tagging](https://ibm-cloudplatform.slack.com/messages/C11F8KA1Z/details/).\n* [Global Catalog](https://console.stage1.bluemix.net/docs/developing/resource-catalog/index.html#global_catalog_overview): Record and manage your cloud offering across geographies.\n* [Documentation](https://console.stage1.bluemix.net/docs/developing/writing/index.html#get-started): Compose content for each phase of your offering and continually update as your service pushes new changes.\n* [Carbon Design System](http://design-system.stage1.mybluemix.net/): Use Carbon as a resource for [code](https://github.com/carbon-design-system/carbon-components), [visual](https://github.com/carbon-design-system/carbon-design-kit), and UX guidance when developing components and creating your service icon.\n\n\n## Onboarding requirements\n\nOnboard your service to IBM Cloud by fulfilling the following requirements. Design approval is required for each phase of the process including Experimental, Beta, GA, and post GA iterations.\n\n### Enable NPS\n* NPS (Net Promoter Score) is a management tool that measures customer relationships. To enable in-product NPS data collection for your service, follow [these instructions](https://pages.github.ibm.com/Bluemix/platform-analytics/data/nps/).\n\n### Use Carbon\n* Leverage the Carbon Design System for visual and user experience guidance. By utilizing the [Carbon Component Library](https://github.com/carbon-design-system/carbon-components), your development team can easily implement ready-made components to create comprehensive UI.\n* If you are new to Carbon, get started as a [designer](http://carbondesignsystem.com/getting-started/designers) or [developer](http://carbondesignsystem.com/getting-started/developers), and check the [FAQ's](http://carbondesignsystem.com/getting-started/FAQ) to learn more.\n\n### Confirm accessibility\nYour service UI (e.g. Configuration, Dashboard) should follow [WCAG AA](https://www.w3.org/WAI/WCAG20/quickref/) gudielines. All Carbon components are designed to meet accessibility standards. However, if components are customized the designs must:\n\n* Pass [color contrast ratios](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) and meet [color usage](http://carbondesignsystem.com/style/colors/usage) guidelines, which include type color combinations and [data visualization](http://carbondesignsystem.com/data-vis/overview/colors) best practices. If necessary, use a [color contrast checker](https://marijohannessen.github.io/color-contrast-checker/) to verify your design.\n* Follow common [accessibility patterns](http://carbondesignsystem.com/guidelines/accessibility), such as keyboard tabbing, focus states, and nagivation order. \n\n### Service icon\nReview the [service icon guidelines](#) for information on the design, production, approval, and submission of service icons.\n\n### IBM Cloud UI\n#### IBM Cloud Platform\nLearn about the IBM Cloud Platform, including how the console works, plugin requirements for microservices, and more [here](https://console.stage1.bluemix.net/docs/developing/console-sdk/global-console.html#bluemix-global-console-overview). Every service should be navigable within the platform and does not launch out to a separate browser tab or window.\n\n#### Service Configuration Page\nA configuration page describes a service to potential customers. It may include but is not limited to the product description, images of the product, and the pricing table. Using Carbon components, create a configuration page that best characterizes your service.\n\n![Service configuration page](images/sp-config-1.png)\n\n#### Service Dashboard\nService Dashboards display information and details of an existing instance. Using Carbon components, create a dashboard that works for your service.\n\n![Service dashboard](images/sp-dashboard-1.png)\n\n#### Common Header\nIBM Cloud and its products share a global header with composable variations. See the [Add-ons](carbondesignsystem.com/add-ons/header/code) library to learn more about its behavior and consume the component.\n\n![IBM generic header](images/sp-header-1.png)\n![IBM Cloud header](images/sp-header-2.png)\n\n\n## Resources\n* [Developing in IBM Cloud](https://console.stage1.bluemix.net/docs/developing/index.html)\n* [IBM Cloud Console SDK](https://console.stage1.bluemix.net/docs/developing/console-sdk/index.html#getting-started)\n* [Service onboarding](https://console.stage1.bluemix.net/onboarding/login)\n* [IBM Cloud onboarding FAQs](https://apps.na.collabserv.com/wikis/home?lang=en-us#!/wiki/We288cdeb7a36_44d6_aeb9_a4c703715b90/page/FAQs)\n"
  },
  "151": {
    "parent": "your-product-on-ibm-cloud",
    "child": "service-providers",
    "section": "service-icon",
    "content": "## Design guidelines\nYour design team has complete control over your icon's design. We recommend that all icons try to look and feel like IBM, or reflect your product portfolios style. Below are some best practices to consider when making your service's icon.\n\n### Do:\n\n- Get creative\n- Keep it simple\n- Be symmetrical\n- Use a bold line weight/stroke\n- Use two similar colors to create depth and value\n- Draw vectors to be whole pixels\n- Make the icon pixel perfect\n\n### Don't:\n\n- Use gradients\n- Use drop shadows\n- Use a color background\n- Use lines or strokes less than 1 pixel (px)\n- Add internal padding\n\n\n### Color\nIf you have multiple services, you should either use the same icon with a different color for each service or use the same color scheme for each distinct icon. The examples here show how a row of services from the same provider could look in the catalog. Refer to the [IBM Design Language](https://www.ibm.com/design/language/resources/color-library) color palette for color inspiration and accessibility guidelines.\n\n![Multiple services in the Bluemix catalog A](images/service-providers-1.svg)\n![Multiple services in the Bluemix catalog B](images/service-providers-3.svg)\n\n### Size\n\nOnly one SVG is required of your service icon for production purposes. It should be submitted at the dimensions of `32 x 32` px.\n\n## Production guidelines\n### Icon requirements\n\n<p>1. SVG is sized at 32 x 32 pixels.</p>\n\n<div data-insert-component=\"DosAndDonts5\"></div>\n\n<p>2. All vectors should be squarely on the pixel grid (completing requirements 3-6 will help with this but if you need further help check out the FAQ section at the bottom of this page).</p>\n\n<div data-insert-component=\"DosAndDonts6\"></div>\n\n<p>3. There should be no decimals in the x or y coordinates.</p>\n\n<div data-insert-component=\"DosAndDonts7\"></div>\n\n<p>4. The width and height of the icon should be full pixels (no fractions of pixels).</p>\n\n<div data-insert-component=\"DosAndDonts8\"></div>\n\n<p>5. All strokes and lines are at least 1px, (i.e. 0.75px is not an acceptable stroke thickness).</p>\n\n<div data-insert-component=\"DosAndDonts9\"></div>\n\n<p>6. All strokes and lines are whole pixels (no decimals).</p>\n\n<div data-insert-component=\"DosAndDonts10\"></div>\n\n<p>7. All stokes are expanded or converted to outlines.</p>\n\n<div data-insert-component=\"DosAndDonts11\"></div>\n\n<p>8. All possible layers are merged so there are as few paths as possible.</p>\n\n<div data-insert-component=\"DosAndDonts12\"></div>\n\n<p>9. All layers are ungrouped.</p>\n<p>10. All layers are and artboards are properly named (these names will also be exported and carried over into the code).</p>\n\n#### Pro tips\n\n- Set your workspace up from the start to snap to pixels and round values to whole pixels to avoid correcting shapes later.\n- Never use `center` borders. Centering can cause half pixels.\n- Avoid using the line tool and use the rectangle tool instead. The line tool will place the vector on half pixels.\n- Be aware of automatic alignments which can either place vectors on uneven or half pixels.\n\n### Exporting\n\n#### How to export SVGs from Sketch\n\n1. Draw a 32 x 32 pixel stand-alone artboard.\n2. Place icon in the pixel perfect center of the artboard.\n3. Convert all strokes to outlines `(Shift + ⌘ + O)`.\n4. Select any overlapping shapes and click the `Union` icon from the top navigation, to merge all of the shapes together.\n5. Select the artboard and click `Make Exportable` at the bottom of the right toolbar in Sketch.\n6. In the export widget select `SVG` in the format dropdown.\n7. Click `Export 'Artboard-Name'`.\n8. Name icon with the name of your service. Do not name it or include \"Bluemix icon\" or \"cloud icon\".\n\n#### How to export SVGs from Adobe Illustrator\n\n1. Draw a 32 x 32 pixel stand-alone artboard.\n2. Place icon in the pixel perfect center of the artboard.\n3. Expand all strokes `(Object > Expand)`.\n4. Select all overlapping shapes and click the `Unite` icon in the `Pathfinder` panel, to merge all of the shapes together.\n5. Select `File` from the top navigation bar.\n6. Select `Save A Copy...` which will open a dialog.\n7. On the `Format` dropdown select SVG (svg).\n8. Below `Format` select `Use Artboard` then select either all or a range of artboards depending on your need.\n9. Click `Save`.\n10. The `SVG Options` dialog will then open.\n11. Make sure the preferences are the same as in the image below.\n![export icons from Illustrator](images/service-icon-17.png)\n\n### Optimize icon\nOnce your icon is exported as an SVG you'll need to optimize and clean up the XML code.\n\nRun SVG XML code through [SVGOMG](https://jakearchibald.github.io/svgomg/).\nInspect the code and make sure that your XML doesn't include the following:\n\n- `<g>` tags\n- `class` attribtues\n- `stroke` attributes\n- `stroke-width` attributes\n\n## Icon approval & submission\n\n1. Ensure your icon meets all of the above icon requirements and is pixel perfect.\n2. Once your icon is ready, host one svg at 32x32px on your service endpoint.\n3. Submit the icon for review by opening an issue on the [service icons repo](https://github.ibm.com/Bluemix/service-icons) and link the icon url from the end point in the issue. Then add the label “review needed” to the issue.\n4. One of the Carbon team members will review the icon within 3 days of the request, so please plan and allow time to process your approval. If changes are requested, the svg url must be resubmitted for approval.\n5. The issue will be label as “approved” once the process is complete.\n\n## FAQ\n\n**What icon sizes do I need to submit?**\n\nOnly one SVG is required for your service icon. It should be submitted at the dimensions of 32 x 32 px.\n\n**What are you looking for during the approval process?**\n\nWe only check for production quality and do not critique visual styling. The list of `Icon requirements` listed above is what we will be evaluating your icon against.\n\n**I don't understand what you mean by pixel perfect and/or pixel grid and alignment.**\n\nIcon design best practices mandate that all vectors be flush to the base level pixel grid. This means the straight edges of vectors should be aligned with pixels exactly and the points of curves should be aligned whenever possible.\n\nCheck out these [Sketch](https://medium.com/sketch-app-sources/getting-the-pixels-right-in-sketch-2386c730af90) and [Illustrator](http://iconutopia.com/how-to-design-pixel-perfect-icons/) tutorials to learn how to best set up your document and align your icon to the pixel grid. There are also some helpful [Sketch plug-ins](https://github.com/swiadek/pixel-perfecter-sketch-plugin) and [Illustrator tools](https://helpx.adobe.com/illustrator/how-to/pixel-perfect.html) that can do this work for you.\n\n**How do I turn on the pixel grid in Sketch or Illustrator?**\n\nIn Sketch in the top navigation bar select `View` > `Canvas` > `Show Pixel Grid`.\nIn Illustrator, in the top navigation bar select `View` > `Pixel Preview`.\n\n**Why does the icon need to be pixel perfect if its an SVG?**\n\nEven with SVGs, unaligned vectors can cause icons to look fuzzy on low-resolution screens. Unaligned vectors also reflects poorly on the craft of the product and can lessen user trust.\n"
  },
  "152": {
    "parent": "your-product-on-ibm-cloud",
    "child": "user-flow",
    "section": "user-flow",
    "content": "**Users approach your product with specific goals in mind. When they achieve\ntheir goals quickly, they feel a sense of power. Thoughtful content and clean\nvisual design add delight. Use this guidance to optimize the user's flow from\ndiscovery of your product to productive use.**\n\n## Contents\n\n1.  [Discovery](#discovery)\n\n2.  [Product Marketing Page](#product-marketing-page)\n\n3.  [Catalog](#catalog)\n\n4.  [Product UI](#product-ui)\n\n5.  [Evaluation](#evaluation)\n\n6.  [Provisioning and Loading](#provisioning-and-loading)\n\n7.  [State Memory](#state-memory)\n\n8.  [First Spend and Increasing Spend](#first-spend-and-increasing-spend)\n\n9.  [Connecting](#connecting)\n\n10. [Resources](#resources)\n\n11. [Navigation](#navigation)\n\n## Discovery\n\nEvery product has a set of public URLs for direct entry via internet search, and\nis also listed in the IBM Cloud Catalog. Users can discover and enter a product\nin one of two primary ways:\n\n1.  Direct entry by URL (from an internet search, Product marketing page,\n    Solution page, or other link)\n\n2.  Discovery in Cloud Catalog (or an embedded Catalog component)\n\nUsers do not need to visit the Cloud Catalog or Dashboard in order to enter a\nproduct. They can enter it directly, as illustrated in this user flow diagram:\n\n![](images/user-flow-1.png)\n\nThe expected URL paths for your product are:\n\n|                | Future Path                       | Legacy Path                        |\n| -------------- | --------------------------------- | ---------------------------------- |\n| Product UI     | cloud.ibm.com/{product}           | console.bluemix.net/{product}      |\n| Marketing Page | ibm.com/cloud/{product}           |                                    |\n| Docs           | ibm.com/cloud/{product}/docs      | console.bluemix.net/docs/{product} |\n| API Endpoint   | api.ibm.com/cloud/{product} [TBD] |                                    |\n\n## Product Marketing Page\n\nUsers discover your product via internet search, forums, tweets, partner\npromotions, etc. They come to your Product Marketing Page to understand how the\nproduct can help them. You supply all the metadata for this page. Answer the\nuser's questions, including:\n\n* What job does this Product do for me?\n\n* What are its differentiating features?\n\n* Why should I use this product over a competing one?\n\n* What does it cost? What is it likely to cost for my level of usage?\n\n* If I decide to use it, what will I be doing?\n\nBe clear about the job the product will do for the user. Content should focus on\ntechnical accuracy and avoid unexplained buzzwords.\n\nThe conversion performance of the Product Marketing Page, along with the usage\nof the product itself, will determine how highly the product is ranked in the\nCatalog.\n\n## Catalog\n\nWhen the user finds your Product in the Catalog and clicks on it, they will be\ntaken directly into the Product UI. This is a change from previous flows\n(2014-2017).\n\nOptionally, the user can click a secondary action to browse to the corresponding\nProduct Marketing Page or Documentation home page.\n\n## Product UI\n\nWhen a user lands on your Product UI for the first time, show a Welcome screen.\nBriefly state what job the Product will do for them. Tell the user the first 3\nthings they will achieve with it.\n\nDo not act like a Product Marketing Page. Link out to the Product Marketing Page\nfor details of features and pricing. Only summarize key points here.\n\nShow a Guided Walkthrough on first entry into the Product UI. (See next section,\n[Evaluation](#evaluation).)\n\nOnce the user has interacted with your product (e.g. by creating a resource),\nskip the Welcome screen on entry.\n\n## Evaluation\n\nWhen a user first begins using your product, they are in an evaluation phase.\nThe user is trying to understand what your product does, achieve a few small but\nconcrete things, and determine whether it has enough value to bet a full project\non it. During evaluation, the user must gain a clear understanding of what job\nyour product will do for them, and be able to achieve three basic milestones:\n\n1.  Create a Resource\n\n2.  Modify the Resource in a meaningful way, and confirm the impact of that\n    change\n\n3.  Connect the Resource to another Resource in another Product to achieve some\n    sort of workflow\n\nA guided walkthrough is an essential tool for enabling the user to achieve this.\n(Future) Use the Walkthrough component.\n\n## Provisioning and Loading\n\nPerceived performance is absolutely essential on a cloud platform. When a user\nenters your product, either from the Cloud Catalog or via direct link, it should\nload [within two\nseconds](https://medium.com/@vikigreen/impact-of-slow-page-load-time-on-website-performance-40d5c9ce568a).\nUsers will interpret slow loading performance as a sign of how their own app or\ndata project will perform on the platform.\n\nWhen content is not available immediately, show skeleton states. This gives the\nuser a frame of reference for where to expect the content to appear. Use the\nskeleton states shown for each component [in the\nStorybook](http://react.carbondesignsystem.com/).\n\nWhen creating a Resource, wait times of several seconds or even minutes are not\nunusual. Do not make the user wait until provisioning is complete to see the\nResource appear. Show the Resource in list views, and allow the user to drill\ninto its details page, even before it is fully provisioned. Display whatever\ninformation is available. If the provisioning fails with an error, show the\nerror state and let the user correct it from the Details page.\n\n## State Memory\n\nWhen the user returns to your product, the system will restore the state in\nwhich they left it. To achieve this, developers must store the essential state\nelements in the URL. The Shell will track the URL and return the user to that\nURL automatically upon return.\n\n(Future) To store more advanced state than what can fit in a URL, place it in\nthe User Profile object, then retrieve it when the Product UI loads. If User\nProfile data is corrupt or non-applicable, discard it and fail silently.\n\n## First Spend and Increasing Spend\n\nThere is no single moment when a cloud user decides to buy. Users will make many\nspending decisions, with progressive levels of commitment. Your product should\nencourage small spending upfront for a well-defined benefit, then scale up from\nthere as the user becomes increasingly confident in the value provided and the\npredictability of its cost.\n\nWhen crafting your Pricing Plan, ensure the user receives clear, tangible value\nfor the first dollar spent. A free tier is useful but not sufficient to make the\nuser confident that the first dollar spent will be worthwhile. Meanwhile, a user\nwho spends one dollar and feels confident they obtained value from it, will\nhappily spend hundreds or thousands of dollars when ready to scale up their\nproject.\n\nReserve enterprise-class features such as large scale, load balancing,\nencryption, and fine-grained security, for premium pricing tiers. Make it\npossible to test these premium-priced capabilities, so the user is confident\nthey actually work as intended.\n\n## Connecting\n\nIBM Cloud is designed to enable teams to collaborate around data. Your product\nshould connect to at least one or two other products to either get or put data.\n\n(Future) Leverage our embeddable Connect widget within your user flows to enable\nthe user to quickly select a Resource within another product, then either get\ndata from that Resource or send data to it.\n\nEmploy the Connect flow as follows:\n\n1.  Place the Connect button/icon within your Product UI.\n\n2.  When triggered, the user selects a target Resource within another product\n\n3.  The target product provides a custom workflow action.\n\n(Future) To make your product's Resources a target for other products to\nconsume, implement the Connect workflow action (step 3 in the flow above). When\nyour product registers with the Cloud Resource Controller, its Connect\ncapabilities will be registered for use by other products.\n\n## Resources\n\nUsers can browse all their Resources by visiting the Resource List in the\nDashboard. The purpose of the Resource List is to help users find things they've\ncreated and worked on previously, and to provide a lookup system for making\nConnections between Resources. It is not meant to give a fine-grained view of\nevery detail of a Resource. To see granular data, the user must open the\nResource in its Product UI.\n\nExpose Resources using a coarse-grained granularity that is sufficient enough\nto:\n\n1.  help the user find a prior piece of work without wading through many\n    detailed elements\n\n2.  look up the Resource when establishing a Connection\n\n3.  share the Resource with other users\n\nWhen determining granularity, compare your candidates to filesystem documents\nthat feel familiar. You would not expose a separate file in the user's Documents\nfolder for every slide of a slide deck or every sheet in a workbook, or every\nelement in a graphic design file.\n\nLikewise, a product that is managing a complicated Machine Learning Model with\nmany nodes and parameters should only expose one resource corresponding to the\nModel, not many resources corresponding to each of the individual nodes. A\nproduct managing a complex build pipeline for developers could expose just one\nresource for the entire pipeline.\n\nA Database product could expose each Database as a resource, but not the tables\nor rows.\n\n## Navigation\n\nUsers can switch between your product and another one quickly by clicking the\nApplication Switcher icon or its keyboard shortcut. Your product will appear\nthere after the user has browsed to it and interacted with it. (Future: See\nApplication Switcher.)\n"
  }
}